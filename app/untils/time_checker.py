import logging
from datetime import datetime, timedelta

from app.data.database.models import Customer, Worker, Banned, WorkerAndSubscription, Abs, WorkersAndAbs, \
    SubscriptionType, BannedAbs, City, WorkerAndRefsAssociation
from app.keyboards import KeyboardCollection
from app.untils import help_defs
from loaders import bot

logger = logging.getLogger()


async def check_time_alive():
    logger.info('check_time_alive')
    customers = await Customer.get_all()
    workers = await Worker.get_all()
    users = []

    users += workers
    for customer in customers:
        if await Worker.get_worker(tg_id=customer.tg_id) is None:
            users.append(customer)
    len_users = len(users) if users else 0

    await bot.send_message(chat_id=-4215934637, text=f'Bot alive\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {len_users}')


async def check_time_banned():
    logger.info('check_time_banned')
    banned_users = await Banned.get_all_banned_now()
    if banned_users:
        for banned_user in banned_users:
            if banned_user.forever:
                continue
            if banned_user.ban_end <= datetime.now():
                await banned_user.update(ban_now=False)
                try:
                    await bot.send_message(chat_id=banned_user.tg_id,
                                           text='–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu')
                except Exception:
                    pass


async def check_time_workers_stars():
    logger.info('check_time_workers_stars')
    workers = await Worker.get_all()
    if workers:
        for worker in workers:
            if not await Banned.get_banned(tg_id=worker.tg_id):
                if worker.stars/worker.count_ratings < 2:
                    if worker.count_ratings > 5:
                        banned = Banned(id=None, tg_id=worker.tg_id, ban_counter=1, ban_end=str(datetime.now()+timedelta(days=1000)), ban_now=True, forever=True, ban_reason='–ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥')
                        await banned.save()
                        banned = await Banned.get_banned(tg_id=worker.tg_id)
                        await banned.update(forever=True)
                        await worker.delete()
                        if customer := await Customer.get_customer(tg_id=worker.tg_id):
                            await customer.delete()
                        try:
                            await bot.send_message(chat_id=worker.tg_id, text='–£–≤—ã, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞–º –ø—Ä–∏—à–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤–∞–º –¥–æ—Å—Ç—É–ø –∑–∞ –Ω–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ üò¢')
                        except Exception:
                            pass


async def check_time_workers():
    logger.info('check_time_workers')
    workers = await Worker.get_all()
    kbc = KeyboardCollection()
    if workers:
        for worker in workers:
            if not await Banned.get_banned(tg_id=worker.tg_id):
                worker_subscription = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
                if worker_subscription.subscription_end:
                    if worker_subscription.date_end <= datetime.now() + timedelta(days=1):
                        btn_bonus = False
                        if worker_and_ref := await WorkerAndRefsAssociation.get_refs_by_worker(worker_id=worker.id):
                            if worker_and_ref.worker_bonus:
                                btn_bonus = True
                        elif worker_and_ref := await WorkerAndRefsAssociation.get_by_ref(ref_id=worker.tg_id):
                            if worker_and_ref.ref_bonus:
                                btn_bonus = True

                        try:
                            await bot.send_message(chat_id=worker.tg_id, text='–£ –≤–∞—Å –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞', reply_markup=kbc.subscription_btn(btn_bonus=btn_bonus))
                        except Exception:
                            pass


async def check_time_customer():
    logger.info('check_time_customer')
    customers = await Customer.get_all()
    if customers:
        for customer in customers:
            await customer.update_abs_count(abs_count=3)
            if customer.abs_count != 3:
                if worker := await Worker.get_worker(tg_id=customer.tg_id):
                    if not worker.active:
                        try:
                            await bot.send_message(chat_id=customer.tg_id, text='–û–±–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è 0 –∏–∑ 3')
                        except Exception:
                            pass
                else:
                    try:
                        await bot.send_message(chat_id=customer.tg_id, text='–û–±–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è 0 –∏–∑ 3')
                    except Exception:
                        pass


async def check_time_advertisement():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    logger.info('check_time_advertisement')
    advertisements = await Abs.get_all()
    kbc = KeyboardCollection()
    if advertisements:
        for advertisement in advertisements:
            await check_single_advertisement_expiry(advertisement, kbc)


async def check_single_advertisement_expiry(advertisement, kbc):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –µ–≥–æ —Å—Ä–æ–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏"""
    now = datetime.now()
    expiry_time = advertisement.date_to_delite
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    time_until_expiry = expiry_time - now
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    if time_until_expiry.total_seconds() <= 0:
        # –ò–°–¢–ï–ö - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        await handle_expired_advertisement(advertisement, kbc)
    elif time_until_expiry.total_seconds() <= 2 * 3600:  # <= 2 —á–∞—Å–∞
        # –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç (–¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ä–æ–∫–æ–≤)
        await handle_expiring_soon_advertisement(advertisement, kbc)
    elif time_until_expiry.total_seconds() <= 24 * 3600:  # <= 24 —á–∞—Å–∞
        # –ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞ (–¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤)
        await handle_expiring_tomorrow_advertisement(advertisement, kbc)


async def handle_expired_advertisement(advertisement, kbc):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ"""
    logger.info(f'Handling expired advertisement {advertisement.id}')
    
    workers_and_abs = await WorkersAndAbs.get_by_abs(abs_id=advertisement.id)
    customer = await Customer.get_customer(id=advertisement.customer_id)
    text = help_defs.read_text_file(advertisement.text_path)

    if workers_and_abs:
        workers_for_assessments = []
        for worker_and_abs in workers_and_abs:
            worker = await Worker.get_worker(id=worker_and_abs.worker_id)
            if worker is None:
                continue
            worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
            sub = await SubscriptionType.get_subscription_type(id=worker_sub.subscription_id)
            if sub.notification:
                city = await City.get_city(id=advertisement.city_id)
                text = f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ {advertisement.id} –≥. {city.city}\n' + help_defs.read_text_file(
                    advertisement.text_path)
                try:
                    await bot.send_message(chat_id=worker.tg_id,
                                           text=f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∑–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º —Å—Ä–æ–∫–∞ –¥–∞–≤–Ω–æ—Å—Ç–∏\n\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ\n\n{text}')
                except Exception:
                    pass
            if worker_and_abs.applyed:
                workers_for_assessments.append(worker)
            await worker_and_abs.delete()

        if workers_for_assessments:
            names = [
                f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ID {worker.id} ‚≠êÔ∏è {round(worker.stars / worker.count_ratings, 1) if worker.count_ratings else worker.stars}'
                for worker in workers_for_assessments]
            ids = [worker.id for worker in workers_for_assessments]

            try:
                await bot.send_message(
                    chat_id=customer.tg_id,
                    text=f'–°—Ä–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{advertisement.id} –∏—Å—Ç–µ–∫!\n\n'
                         f'{text}\n\n'
                         f'–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏',
                    reply_markup=kbc.get_for_staring(ids=ids, names=names, abs_id=advertisement.id)
                )
            except Exception as e:
                logger.info(e)

    else:
        try:
            await bot.send_message(
                chat_id=customer.tg_id,
                text=f'–°—Ä–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{advertisement.id} –∏—Å—Ç–µ–∫!\n\n'
                     f'{text}'
            )
        except Exception as e:
            logger.info(e)

    await advertisement.delete(delite_photo=True if advertisement.photo_path else False)


async def handle_expiring_soon_advertisement(advertisement, kbc):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç (–¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ä–æ–∫–æ–≤)"""
    logger.info(f'Handling expiring soon advertisement {advertisement.id}')
    
    customer = await Customer.get_customer(id=advertisement.customer_id)
    text = help_defs.read_text_file(advertisement.text_path)
    
    try:
        await bot.send_message(
            chat_id=customer.tg_id,
            text=f'‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{advertisement.id} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞!\n\n'
                 f'{text}\n\n'
                 f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞.'
        )
    except Exception as e:
        logger.info(e)


async def handle_expiring_tomorrow_advertisement(advertisement, kbc):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞ (–¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤)"""
    logger.info(f'Handling expiring tomorrow advertisement {advertisement.id}')
    
    customer = await Customer.get_customer(id=advertisement.customer_id)
    
    try:
        await bot.send_message(
            chat_id=customer.tg_id,
            text=f'üìÖ –ó–∞–≤—Ç—Ä–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{advertisement.id}!'
        )
    except Exception as e:
        logger.info(e)
# –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞


async def check_time_banned_advertisement():
    logger.info('check_time_banned_advertisement')
    banned_advertisements = await BannedAbs.get_all()
    if banned_advertisements:
        for banned_advertisement in banned_advertisements:
            if banned_advertisement.date_to_delite <= datetime.now():
                await banned_advertisement.delete(delite_photo=True if banned_advertisement.photo_path else False)


async def cleanup_orphaned_files():
    """–û—á–∏—Å—Ç–∫–∞ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"""
    logger.info('cleanup_orphaned_files')
    try:
        cleaned_count = help_defs.cleanup_orphaned_portfolio_files()
        logger.info(f'–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned_count}')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {e}')


async def restore_weekly_activity():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç +1 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—Å–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –∑–∞ –Ω–µ–¥–µ–ª—é –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏–π"""
    logger.info('restore_weekly_activity: Starting weekly activity restoration')
    
    try:
        import aiosqlite
        
        conn = await aiosqlite.connect('app/data/database/database.db')
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            cursor = await conn.execute('SELECT id, activity_level FROM workers WHERE active = 1')
            workers = await cursor.fetchall()
            await cursor.close()
            
            updated_count = 0
            week_ago = (datetime.now() - timedelta(days=7)).isoformat()
            
            for worker_id, current_activity in workers:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–º–µ–Ω –æ—Ç–∫–ª–∏–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
                cursor = await conn.execute('''
                    SELECT COUNT(*) FROM worker_response_cancellations 
                    WHERE worker_id = ? AND cancelled_at >= ?
                ''', (worker_id, week_ago))
                cancelled_responses_count = (await cursor.fetchone())[0]
                await cursor.close()
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–º–µ–Ω –æ—Ç–∫–ª–∏–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                if cancelled_responses_count == 0 and current_activity < 100:
                    new_activity = min(100, current_activity + 1)
                    cursor = await conn.execute(
                        'UPDATE workers SET activity_level = ? WHERE id = ?',
                        (new_activity, worker_id)
                    )
                    await cursor.close()
                    updated_count += 1
                    logger.debug(f'Worker {worker_id}: {current_activity} -> {new_activity}')
            
            await conn.commit()
            logger.info(f'restore_weekly_activity: Updated {updated_count} workers')
            
        finally:
            await conn.close()
            
    except Exception as e:
        logger.error(f'restore_weekly_activity: Error - {e}')


#  _    _        _      _____              _
# | |  | |      | |    |_   _|            | |
# | |  | |  ___ | |__    | |    ___   ___ | |__
# | |/\| | / _ \| '_ \   | |   / _ \ / __|| '_ \
# \  /\  /|  __/| |_) |  | |  |  __/| (__ | | | |
#  \/  \/  \___||_.__/   \_/   \___| \___||_| |_|
