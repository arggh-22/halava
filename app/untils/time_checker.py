import logging
from datetime import datetime, timedelta

from app.data.database.models import Customer, Worker, Banned, WorkerAndSubscription, Abs, WorkersAndAbs, \
    SubscriptionType, BannedAbs, City, WorkerAndRefsAssociation
from app.keyboards import KeyboardCollection
from app.untils import help_defs
from loaders import bot

logger = logging.getLogger()


async def check_time_alive():
    logger.info('check_time_alive')
    customers = await Customer.get_all()
    workers = await Worker.get_all()
    users = []

    users += workers
    for customer in customers:
        if await Worker.get_worker(tg_id=customer.tg_id) is None:
            users.append(customer)
    len_users = len(users) if users else 0

    await bot.send_message(chat_id=-4215934637, text=f'Bot alive\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {len_users}')


async def check_time_banned():
    logger.info('check_time_banned')
    banned_users = await Banned.get_all_banned_now()
    if banned_users:
        for banned_user in banned_users:
            if banned_user.forever:
                continue
            if banned_user.ban_end <= datetime.now():
                await banned_user.update(ban_now=False)
                try:
                    await bot.send_message(chat_id=banned_user.tg_id,
                                           text='–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu')
                except Exception:
                    pass


async def check_time_workers_stars():
    logger.info('check_time_workers_stars')
    workers = await Worker.get_all()
    if workers:
        for worker in workers:
            if not await Banned.get_banned(tg_id=worker.tg_id):
                if worker.stars/worker.count_ratings < 2:
                    if worker.count_ratings > 5:
                        banned = Banned(id=None, tg_id=worker.tg_id, ban_counter=1, ban_end=str(datetime.now()+timedelta(days=1000)), ban_now=True, forever=True, ban_reason='–ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥')
                        await banned.save()
                        banned = await Banned.get_banned(tg_id=worker.tg_id)
                        await banned.update(forever=True)
                        await worker.delete()
                        if customer := await Customer.get_customer(tg_id=worker.tg_id):
                            await customer.delete()
                        try:
                            await bot.send_message(chat_id=worker.tg_id, text='–£–≤—ã, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞–º –ø—Ä–∏—à–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤–∞–º –¥–æ—Å—Ç—É–ø –∑–∞ –Ω–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ üò¢')
                        except Exception:
                            pass


async def check_time_workers():
    logger.info('check_time_workers')
    workers = await Worker.get_all()
    kbc = KeyboardCollection()
    if workers:
        for worker in workers:
            if not await Banned.get_banned(tg_id=worker.tg_id):
                worker_subscription = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
                if worker_subscription.subscription_end:
                    if worker_subscription.date_end <= datetime.now() + timedelta(days=1):
                        btn_bonus = False
                        if worker_and_ref := await WorkerAndRefsAssociation.get_refs_by_worker(worker_id=worker.id):
                            if worker_and_ref.worker_bonus:
                                btn_bonus = True
                        elif worker_and_ref := await WorkerAndRefsAssociation.get_by_ref(ref_id=worker.tg_id):
                            if worker_and_ref.ref_bonus:
                                btn_bonus = True

                        try:
                            await bot.send_message(chat_id=worker.tg_id, text='–£ –≤–∞—Å –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞', reply_markup=kbc.subscription_btn(btn_bonus=btn_bonus))
                        except Exception:
                            pass


async def check_time_customer():
    logger.info('check_time_customer')
    customers = await Customer.get_all()
    if customers:
        for customer in customers:
            await customer.update_abs_count(abs_count=3)
            if customer.abs_count != 3:
                if worker := await Worker.get_worker(tg_id=customer.tg_id):
                    if not worker.active:
                        try:
                            await bot.send_message(chat_id=customer.tg_id, text='–û–±–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è 0 –∏–∑ 3')
                        except Exception:
                            pass
                else:
                    try:
                        await bot.send_message(chat_id=customer.tg_id, text='–û–±–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è 0 –∏–∑ 3')
                    except Exception:
                        pass


async def check_time_advertisement():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    logger.info('check_time_advertisement')
    advertisements = await Abs.get_all()
    kbc = KeyboardCollection()
    if advertisements:
        for advertisement in advertisements:
            await check_single_advertisement_expiry(advertisement, kbc)


async def check_single_advertisement_expiry(advertisement, kbc):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –µ–≥–æ —Å—Ä–æ–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏"""
    now = datetime.now()
    expiry_time = advertisement.date_to_delite
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    time_until_expiry = expiry_time - now
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    if time_until_expiry.total_seconds() <= 0:
        # –ò–°–¢–ï–ö - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        await handle_expired_advertisement(advertisement, kbc)
    elif time_until_expiry.total_seconds() <= 2 * 3600:  # <= 2 —á–∞—Å–∞
        # –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç (–¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ä–æ–∫–æ–≤)
        await handle_expiring_soon_advertisement(advertisement, kbc)
    elif time_until_expiry.total_seconds() <= 24 * 3600:  # <= 24 —á–∞—Å–∞
        # –ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞ (–¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤)
        await handle_expiring_tomorrow_advertisement(advertisement, kbc)


async def handle_expired_advertisement(advertisement, kbc):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ"""
    logger.info(f'Handling expired advertisement {advertisement.id}')
    
    workers_and_abs = await WorkersAndAbs.get_by_abs(abs_id=advertisement.id)
    customer = await Customer.get_customer(id=advertisement.customer_id)
    text = help_defs.read_text_file(advertisement.text_path)

    if workers_and_abs:
        workers_for_assessments = []
        for worker_and_abs in workers_and_abs:
            worker = await Worker.get_worker(id=worker_and_abs.worker_id)
            if worker is None:
                continue
            worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
            sub = await SubscriptionType.get_subscription_type(id=worker_sub.subscription_id)
            if sub.notification:
                city = await City.get_city(id=advertisement.city_id)
                text = f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ {advertisement.id} –≥. {city.city}\n' + help_defs.read_text_file(
                    advertisement.text_path)
                try:
                    await bot.send_message(chat_id=worker.tg_id,
                                           text=f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∑–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º —Å—Ä–æ–∫–∞ –¥–∞–≤–Ω–æ—Å—Ç–∏\n\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ\n\n{text}')
                except Exception:
                    pass
            if worker_and_abs.applyed:
                workers_for_assessments.append(worker)
            await worker_and_abs.delete()

        if workers_for_assessments:
            names = [
                f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ID {worker.id} ‚≠êÔ∏è {round(worker.stars / worker.count_ratings, 1) if worker.count_ratings else worker.stars}'
                for worker in workers_for_assessments]
            ids = [worker.id for worker in workers_for_assessments]

            try:
                await bot.send_message(
                    chat_id=customer.tg_id,
                    text=f'–°—Ä–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{advertisement.id} –∏—Å—Ç–µ–∫!\n\n'
                         f'{text}\n\n'
                         f'–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏',
                    reply_markup=kbc.get_for_staring(ids=ids, names=names, abs_id=advertisement.id)
                )
            except Exception as e:
                logger.info(e)

    else:
        try:
            await bot.send_message(
                chat_id=customer.tg_id,
                text=f'–°—Ä–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{advertisement.id} –∏—Å—Ç–µ–∫!\n\n'
                     f'{text}'
            )
        except Exception as e:
            logger.info(e)

    await advertisement.delete(delite_photo=True if advertisement.photo_path else False)


async def handle_expiring_soon_advertisement(advertisement, kbc):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç (–¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ä–æ–∫–æ–≤)"""
    logger.info(f'Handling expiring soon advertisement {advertisement.id}')
    
    customer = await Customer.get_customer(id=advertisement.customer_id)
    text = help_defs.read_text_file(advertisement.text_path)
    
    try:
        await bot.send_message(
            chat_id=customer.tg_id,
            text=f'‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{advertisement.id} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞!\n\n'
                 f'{text}\n\n'
                 f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞.'
        )
    except Exception as e:
        logger.info(e)


async def handle_expiring_tomorrow_advertisement(advertisement, kbc):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞ (–¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤)"""
    logger.info(f'Handling expiring tomorrow advertisement {advertisement.id}')
    
    customer = await Customer.get_customer(id=advertisement.customer_id)
    
    try:
        await bot.send_message(
            chat_id=customer.tg_id,
            text=f'üìÖ –ó–∞–≤—Ç—Ä–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{advertisement.id}!'
        )
    except Exception as e:
        logger.info(e)
# –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞


async def check_time_banned_advertisement():
    logger.info('check_time_banned_advertisement')
    banned_advertisements = await BannedAbs.get_all()
    if banned_advertisements:
        for banned_advertisement in banned_advertisements:
            if banned_advertisement.date_to_delite <= datetime.now():
                await banned_advertisement.delete(delite_photo=True if banned_advertisement.photo_path else False)


async def cleanup_orphaned_files():
    """–û—á–∏—Å—Ç–∫–∞ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"""
    logger.info('cleanup_orphaned_files')
    try:
        cleaned_count = help_defs.cleanup_orphaned_portfolio_files()
        logger.info(f'–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned_count}')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {e}')


async def restore_weekly_activity():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç +1 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—Å–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –∑–∞ –Ω–µ–¥–µ–ª—é –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏–π"""
    logger.info('restore_weekly_activity: Starting weekly activity restoration')
    
    try:
        import aiosqlite
        
        conn = await aiosqlite.connect('app/data/database/database.db')
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            cursor = await conn.execute('SELECT id, activity_level FROM workers WHERE active = 1')
            workers = await cursor.fetchall()
            await cursor.close()
            
            updated_count = 0
            week_ago = (datetime.now() - timedelta(days=7)).isoformat()
            
            for worker_id, current_activity in workers:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–º–µ–Ω –æ—Ç–∫–ª–∏–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
                cursor = await conn.execute('''
                    SELECT COUNT(*) FROM worker_response_cancellations 
                    WHERE worker_id = ? AND cancelled_at >= ?
                ''', (worker_id, week_ago))
                cancelled_responses_count = (await cursor.fetchone())[0]
                await cursor.close()
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–º–µ–Ω –æ—Ç–∫–ª–∏–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                if cancelled_responses_count == 0 and current_activity < 100:
                    new_activity = min(100, current_activity + 1)
                    cursor = await conn.execute(
                        'UPDATE workers SET activity_level = ? WHERE id = ?',
                        (new_activity, worker_id)
                    )
                    await cursor.close()
                    updated_count += 1
                    logger.debug(f'Worker {worker_id}: {current_activity} -> {new_activity}')
            
            await conn.commit()
            logger.info(f'restore_weekly_activity: Updated {updated_count} workers')
            
        finally:
            await conn.close()
            
    except Exception as e:
        logger.error(f'restore_weekly_activity: Error - {e}')


async def check_worker_statuses():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (–ò–ü, –û–û–û, –°–ó) –∫–∞–∂–¥—ã–µ 6 –º–µ—Å—è—Ü–µ–≤.
    –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - —Å–Ω–∏–º–∞–µ—Ç –µ–≥–æ.
    """
    try:
        logger.info('check_worker_statuses: Starting...')
        from app.data.database.models import WorkerStatus
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (—Å—Ç–∞—Ä—à–µ 6 –º–µ—Å—è—Ü–µ–≤)
        statuses_to_check = await WorkerStatus.get_all_for_recheck()
        
        if not statuses_to_check:
            logger.info('check_worker_statuses: No statuses to check')
            return
        
        logger.info(f'check_worker_statuses: Checking {len(statuses_to_check)} statuses...')
        
        checked_count = 0
        revoked_count = 0
        
        for status in statuses_to_check:
            status_changed = False
            revoked_status_name = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ü
            if status.has_ip and status.ip_number:
                result = help_defs.check_ip_status_by_ogrnip(status.ip_number)
                if not result:
                    # –ò–ü –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç
                    status.has_ip = False
                    status.ip_number = None
                    status_changed = True
                    revoked_status_name = "–ò–ü"
                    revoked_count += 1
                    logger.info(f'check_worker_statuses: Revoked IP for worker {status.worker_id}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –û–û–û
            if status.has_ooo and status.ooo_number:
                result = help_defs.check_ooo(status.ooo_number)
                if result != True:  # False or "error"
                    # –û–û–û –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞
                    if result == False:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—á–Ω–æ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç
                        status.has_ooo = False
                        status.ooo_number = None
                        status_changed = True
                        revoked_status_name = "–û–û–û"
                        revoked_count += 1
                        logger.info(f'check_worker_statuses: Revoked OOO for worker {status.worker_id}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –°–ó
            if status.has_sz and status.sz_number:
                result = help_defs.check_npd(status.sz_number)
                if result != True:  # False or "error"
                    # –°–ó –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞
                    if result == False:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—á–Ω–æ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç
                        status.has_sz = False
                        status.sz_number = None
                        status_changed = True
                        revoked_status_name = "–°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å"
                        revoked_count += 1
                        logger.info(f'check_worker_statuses: Revoked SZ for worker {status.worker_id}')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            status.last_status_check = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if status_changed or True:  # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º last_status_check
                await status.save()
                checked_count += 1
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –æ —Å–Ω—è—Ç–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
                if status_changed and revoked_status_name:
                    try:
                        from app.data.database.models import Worker
                        from loaders import bot
                        
                        worker = await Worker.get_worker(id=status.worker_id)
                        if worker:
                            notification_text = (
                                f"‚ö†Ô∏è **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ**\n\n"
                                f"–í–∞—à —Å—Ç–∞—Ç—É—Å **{revoked_status_name}** –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.\n\n"
                                f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: **–°—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚ö†Ô∏è**\n\n"
                                f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–Ω–æ–≤–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–°—Ç–∞—Ç—É—Å' –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."
                            )
                            await bot.send_message(
                                chat_id=worker.tg_id,
                                text=notification_text,
                                parse_mode='Markdown'
                            )
                            logger.info(f'check_worker_statuses: Notification sent to worker {status.worker_id}')
                    except Exception as notify_error:
                        logger.error(f'check_worker_statuses: Failed to send notification - {notify_error}')
        
        logger.info(f'check_worker_statuses: Checked {checked_count} statuses, revoked {revoked_count} statuses')
        
    except Exception as e:
        logger.error(f'check_worker_statuses: Error - {e}')


async def update_worker_ranks():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞–Ω–≥–∏ –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00.
    –ü—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ —Ä–∞–Ω–≥–∞ –æ–±–Ω—É–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–≤—ã—à–∞—é—Ç –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç.
    
    –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–æ–≤ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    –≤ —Ñ—É–Ω–∫—Ü–∏–∏ update_worker_rank_instantly(). –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–ª—É–∂–∏—Ç –∑–∞–ø–∞—Å–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
    –∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏—è —Ä–∞–Ω–≥–æ–≤.
    """
    logger.info('update_worker_ranks: Starting rank update for all workers')
    
    try:
        from app.data.database.models import Worker, WorkerRank, WorkerAndSubscription
        from loaders import bot
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        workers = await Worker.get_all()
        if not workers:
            logger.info('update_worker_ranks: No workers found')
            return
        
        updated_count = 0
        upgraded_count = 0
        downgraded_count = 0
        reset_work_types_count = 0
        
        for worker in workers:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ä–∞–Ω–≥
                old_rank = await WorkerRank.get_by_worker(worker.id)
                old_rank_type = old_rank.rank_type if old_rank else None
                old_work_types_limit = old_rank.get_work_types_limit() if old_rank else 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–Ω–≥ (–ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
                new_rank = await WorkerRank.get_or_create_rank(worker.id)
                new_work_types_limit = new_rank.get_work_types_limit()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ä–∞–Ω–≥
                if old_rank_type and old_rank_type != new_rank.rank_type:
                    rank_levels = {'bronze': 1, 'silver': 2, 'gold': 3, 'platinum': 4}
                    old_level = rank_levels.get(old_rank_type, 0)
                    new_level = rank_levels.get(new_rank.rank_type, 0)
                    
                    if new_level > old_level:
                        upgraded_count += 1
                        logger.info(f'update_worker_ranks: Worker {worker.id} upgraded from {old_rank_type} to {new_rank.rank_type}')
                    elif new_level < old_level:
                        downgraded_count += 1
                        logger.info(f'update_worker_ranks: Worker {worker.id} downgraded from {old_rank_type} to {new_rank.rank_type}')
                        
                        # –ü—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ —Ä–∞–Ω–≥–∞ –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
                        current_work_types_count = len(worker_sub.work_type_ids) if worker_sub and worker_sub.work_type_ids else 0
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω—É–ª—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        if worker_sub and worker_sub.work_type_ids and new_work_types_limit is not None and current_work_types_count > new_work_types_limit:
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
                                from app.data.database.models import WorkType
                                old_work_types_names = []
                                for wt_id in worker_sub.work_type_ids:
                                    work_type = await WorkType.get_work_type(id=int(wt_id))
                                    if work_type:
                                        old_work_types_names.append(work_type.work_type)
                                
                                # –û–±–Ω—É–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                                worker_sub.work_type_ids = []
                                await worker_sub.save()
                                reset_work_types_count += 1
                                
                                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ (–Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º)
                                from app.data.database.models import WorkerWorkTypeChanges
                                work_type_changes = await WorkerWorkTypeChanges.get_or_create(worker.id)
                                work_type_changes.pending_selection = True
                                await work_type_changes.save()
                                
                                logger.info(f'update_worker_ranks: Reset work types for worker {worker.id} (had {current_work_types_count}, limit now {new_work_types_limit}), set pending_selection flag')
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
                                try:
                                    old_rank_name = WorkerRank.RANK_TYPES[old_rank_type]['name']
                                    old_rank_emoji = WorkerRank.RANK_TYPES[old_rank_type]['emoji']
                                    new_rank_name = new_rank.get_rank_name()
                                    new_rank_emoji = new_rank.get_rank_emoji()
                                    
                                    notification_text = (
                                        f"‚ö†Ô∏è **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞**\n\n"
                                        f"–í–∞—à —Ä–∞–Ω–≥ –∏–∑–º–µ–Ω–∏–ª—Å—è:\n"
                                        f"{old_rank_emoji} **{old_rank_name}** ‚Üí {new_rank_emoji} **{new_rank_name}**\n\n"
                                        f"üìä **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:**\n"
                                        f"–ë—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ: **{old_work_types_limit if old_work_types_limit else '–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}**\n"
                                        f"–°—Ç–∞–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ: **{new_work_types_limit}**\n\n"
                                        f"‚ùå **–í–∞—à–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã:**\n"
                                    )
                                    
                                    for i, wt_name in enumerate(old_work_types_names, 1):
                                        notification_text += f"{i}. {wt_name}\n"
                                    
                                    notification_text += (
                                        f"\nüí° –í–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ {new_work_types_limit} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–∞–Ω–æ–≤–æ.\n"
                                        f"–ù–∞–∂–º–∏—Ç–µ **–û–ö**, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π."
                                    )
                                    
                                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û–ö" –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –≤ —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
                                    builder = InlineKeyboardBuilder()
                                    builder.button(text="‚úÖ –û–ö", callback_data="rank_downgrade_ok")
                                    
                                    await bot.send_message(
                                        chat_id=worker.tg_id,
                                        text=notification_text,
                                        reply_markup=builder.as_markup(),
                                        parse_mode='Markdown'
                                    )
                                    
                                    logger.info(f'update_worker_ranks: Sent rank downgrade notification to worker {worker.id}')
                                    
                                except Exception as notify_error:
                                    logger.error(f'update_worker_ranks: Failed to send notification to worker {worker.id} - {notify_error}')
                        
                        else:
                            # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ù–ï –æ–±–Ω—É–ª–µ–Ω—ã (–≤ —Ä–∞–º–∫–∞—Ö –ª–∏–º–∏—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤–æ–æ–±—â–µ)
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            try:
                                old_rank_name = WorkerRank.RANK_TYPES[old_rank_type]['name']
                                old_rank_emoji = WorkerRank.RANK_TYPES[old_rank_type]['emoji']
                                new_rank_name = new_rank.get_rank_name()
                                new_rank_emoji = new_rank.get_rank_emoji()
                                
                                notification_text = (
                                    f"‚ö†Ô∏è **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞**\n\n"
                                    f"–í–∞—à —Ä–∞–Ω–≥ –∏–∑–º–µ–Ω–∏–ª—Å—è:\n"
                                    f"{old_rank_emoji} **{old_rank_name}** ‚Üí {new_rank_emoji} **{new_rank_name}**\n\n"
                                    f"üìä **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:**\n"
                                    f"–ë—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ: **{old_work_types_limit if old_work_types_limit else '–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}**\n"
                                    f"–°—Ç–∞–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ: **{new_work_types_limit}**\n\n"
                                )
                                
                                if current_work_types_count > 0:
                                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                                    from app.data.database.models import WorkType
                                    current_work_types_names = []
                                    for wt_id in worker_sub.work_type_ids:
                                        work_type = await WorkType.get_work_type(id=int(wt_id))
                                        if work_type:
                                            current_work_types_names.append(work_type.work_type)
                                    
                                    notification_text += (
                                        f"‚úÖ **–í–∞—à–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:**\n"
                                        f"–£ –≤–∞—Å –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ **{current_work_types_count}** –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, "
                                        f"—á—Ç–æ –≤ —Ä–∞–º–∫–∞—Ö –Ω–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞ (**{new_work_types_limit}**).\n\n"
                                    )
                                    
                                    for i, wt_name in enumerate(current_work_types_names, 1):
                                        notification_text += f"{i}. {wt_name}\n"
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                                    remaining_slots = new_work_types_limit - current_work_types_count
                                    if remaining_slots > 0:
                                        notification_text += (
                                            f"\nüí° –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ **{remaining_slots}** "
                                            f"{'–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' if remaining_slots == 1 else '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è' if remaining_slots < 5 else '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π'}.\n"
                                            f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è."
                                        )
                                    else:
                                        notification_text += (
                                            f"\nüéØ –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–∞–Ω–≥–∞."
                                        )
                                else:
                                    notification_text += (
                                        f"üí° –£ –≤–∞—Å –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.\n"
                                        f"–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–æ **{new_work_types_limit}** "
                                        f"{'–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' if new_work_types_limit == 1 else '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è' if new_work_types_limit < 5 else '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π'}.\n"
                                        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è' –¥–ª—è –≤—ã–±–æ—Ä–∞."
                                    )
                                
                                # –ö–Ω–æ–ø–∫–∞ –±–µ–∑ callback (–ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
                                await bot.send_message(
                                    chat_id=worker.tg_id,
                                    text=notification_text,
                                    parse_mode='Markdown'
                                )
                                
                                logger.info(f'update_worker_ranks: Sent rank downgrade info (no reset) to worker {worker.id}')
                                
                            except Exception as notify_error:
                                logger.error(f'update_worker_ranks: Failed to send info notification to worker {worker.id} - {notify_error}')
                
                updated_count += 1
                
            except Exception as worker_error:
                logger.error(f'update_worker_ranks: Error updating rank for worker {worker.id} - {worker_error}')
        
        logger.info(f'update_worker_ranks: Updated {updated_count} workers. Upgraded: {upgraded_count}, Downgraded: {downgraded_count}, Reset work types: {reset_work_types_count}')
        
    except Exception as e:
        logger.error(f'update_worker_ranks: Error - {e}')


#  _    _        _      _____              _
# | |  | |      | |    |_   _|            | |
# | |  | |  ___ | |__    | |    ___   ___ | |__
# | |/\| | / _ \| '_ \   | |   / _ \ / __|| '_ \
# \  /\  /|  __/| |_) |  | |  |  __/| (__ | | | |
#  \/  \/  \___||_.__/   \_/   \___| \___||_| |_|
