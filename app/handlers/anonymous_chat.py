"""
Handlers –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞ –º–µ–∂–¥—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∏ –∑–∞–∫–∞–∑—á–∏–∫–æ–º
- –û–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
- –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
- –ü–æ–∫—É–ø–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è)
"""

import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from app.states import WorkStates, CustomerStates
from app.keyboards import KeyboardCollection
from app.data.database.models import (
    Worker, Customer, Abs, WorkersAndAbs,
    ContactExchange, ContactTariff
)
from loaders import bot
from app.untils.contact_filter import check_message_for_contacts

logger = logging.getLogger(__name__)
router = Router()


# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
async def get_worker_status_string(worker_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    from app.data.database.models import WorkerStatus
    worker_status = await WorkerStatus.get_by_worker(worker_id)

    if not worker_status:
        return "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"

    statuses = []
    if worker_status.has_ip:
        statuses.append("–ò–ü ‚úÖ")
    if worker_status.has_ooo:
        statuses.append("–û–û–û ‚úÖ")
    if worker_status.has_sz:
        statuses.append("–°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å ‚úÖ")

    if not statuses:
        return "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"

    return " | ".join(statuses)


async def format_chat_history_for_display(user_type: str, abs_id: int, worker, customer) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—Ç–∫–ª–∏–∫–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º WorkersAndAbs –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        response = await WorkersAndAbs.get_by_worker_and_abs(worker.id, abs_id)
        if not response:
            return ""
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        worker_messages_list = []
        customer_messages_list = []

        # –§–∏–ª—å—Ç—Ä—É–µ–º worker_messages: —É–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—É—Å—Ç—ã–µ
        if response.worker_messages:
            worker_messages_list = [
                msg for msg in response.worker_messages 
                if msg and msg.strip() and msg != "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ"
            ]

        # –§–∏–ª—å—Ç—Ä—É–µ–º customer_messages: —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
        if response.customer_messages:
            customer_messages_list = [
                msg for msg in response.customer_messages 
                if msg and msg.strip()
            ]
        
        ordered_messages = []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏–∑ –ë–î
        timestamps_list = response.message_timestamps if hasattr(response, 'message_timestamps') else []
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if timestamps_list and len(timestamps_list) > 0:
            # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
            all_messages_with_timestamps = []
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            worker_msg_idx = 0
            customer_msg_idx = 0
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –º–µ—Ç–∫–∞–º –æ–¥–∏–Ω —Ä–∞–∑ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            for ts_data in timestamps_list:
                if ts_data['sender'] == 'worker' and worker_msg_idx < len(worker_messages_list):
                    msg = worker_messages_list[worker_msg_idx]
                    # –°–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ –ë–î
                    all_messages_with_timestamps.append({
                        'text': msg,
                        'sender': 'worker',
                        'timestamp': ts_data['timestamp']
                    })
                    worker_msg_idx += 1
                elif ts_data['sender'] == 'customer' and customer_msg_idx < len(customer_messages_list):
                    msg = customer_messages_list[customer_msg_idx]
                    # –°–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ –ë–î
                    all_messages_with_timestamps.append({
                        'text': msg,
                        'sender': 'customer',
                        'timestamp': ts_data['timestamp']
                    })
                    customer_msg_idx += 1
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –º–µ—Ç–∫–∞–º
            sorted_messages = sorted(all_messages_with_timestamps, key=lambda x: x['timestamp'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            for msg_data in sorted_messages:
                ordered_messages.append({
                    'text': msg_data['text'],
                    'sender': msg_data['sender']
                })
        else:
            # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è
            worker_count = len(worker_messages_list)
            customer_count = len(customer_messages_list)
            
            if abs(worker_count - customer_count) <= 1:
                worker_idx = 0
                customer_idx = 0
                while worker_idx < worker_count or customer_idx < customer_count:
                    if worker_idx < worker_count:
                        msg = worker_messages_list[worker_idx]
                        ordered_messages.append({'text': msg, 'sender': 'worker'})
                        worker_idx += 1
                    if customer_idx < customer_count:
                        msg = customer_messages_list[customer_idx]
                        ordered_messages.append({'text': msg, 'sender': 'customer'})
                        customer_idx += 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
        chat_history = ""
        
        if ordered_messages:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫–ª–∏–∫–∞
            for msg_data in ordered_messages[-10:]:
                msg_text = msg_data['text']
                msg_sender = msg_data['sender']

                if user_type == "customer":
                    # –ó–∞–∫–∞–∑—á–∏–∫ –≤–∏–¥–∏—Ç —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ "–í—ã"
                    if msg_sender == "customer":
                        chat_history += f"üë§ **–í—ã:** {msg_text}\n"
                    else:
                        chat_history += f"üë§ **{worker.public_id or f'ID#{worker.id}'}:** {msg_text}\n"
                else:  # worker
                    # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ "–í—ã"
                    if msg_sender == "worker":
                        chat_history += f"üë§ **–í—ã:** {msg_text}\n"
                    else:
                        chat_history += f"üë§ **{customer.public_id or f'ID#{customer.id}'}:** {msg_text}\n"
        
        return chat_history
        
    except Exception as e:
        logger.error(f"Error in format_chat_history_for_display: {e}")
        return ""


async def send_or_update_chat_message(user_id: int, user_type: str, abs_id: int,
                                      worker, customer, message_text: str, sender: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞
    —Å –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞
    """
    try:
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ë–î
        import asyncio
        await asyncio.sleep(0.1)
        
        # –ü–æ–ª—É—á–∞–µ–º WorkersAndAbs –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        response = await WorkersAndAbs.get_by_worker_and_abs(worker.id, abs_id)
        if not response:
            logger.warning(f"[CHAT_HISTORY] WorkersAndAbs not found for worker_id={worker.id}, abs_id={abs_id}")
            return
        
        logger.info(f"[CHAT_HISTORY] Loading chat history. Worker messages: {len(response.worker_messages) if response.worker_messages else 0}, Customer messages: {len(response.customer_messages) if response.customer_messages else 0}")

        # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        chat_history = ""

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        worker_messages_list = []
        customer_messages_list = []

        # –§–∏–ª—å—Ç—Ä—É–µ–º worker_messages: —É–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—É—Å—Ç—ã–µ
        if response.worker_messages:
            worker_messages_list = [
                msg for msg in response.worker_messages 
                if msg and msg.strip() and msg != "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ"
            ]

        # –§–∏–ª—å—Ç—Ä—É–µ–º customer_messages: —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
        if response.customer_messages:
            customer_messages_list = [
                msg for msg in response.customer_messages 
                if msg and msg.strip()
            ]
        

        # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Ö –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
        all_messages = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
        for i, msg in enumerate(worker_messages_list):
            if msg and msg.strip():
                all_messages.append({
                    'text': msg,
                    'sender': 'worker',
                    'index': i,
                    'sender_type': 'worker'
                })

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
        for i, msg in enumerate(customer_messages_list):
            if msg and msg.strip():
                all_messages.append({
                    'text': msg,
                    'sender': 'customer',
                    'index': i,
                    'sender_type': 'customer'
                })

        # –ù–û–í–û–ï –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        
        ordered_messages = []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏–∑ –ë–î
        timestamps_list = response.message_timestamps if hasattr(response, 'message_timestamps') else []
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if timestamps_list and len(timestamps_list) > 0:
            logger.info(f"[CHAT_HISTORY] Using timestamps for sorting: {len(timestamps_list)} timestamps")
            
            # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
            all_messages_with_timestamps = []
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            worker_msg_idx = 0
            customer_msg_idx = 0
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –º–µ—Ç–∫–∞–º –æ–¥–∏–Ω —Ä–∞–∑ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            for ts_data in timestamps_list:
                if ts_data['sender'] == 'worker' and worker_msg_idx < len(worker_messages_list):
                    msg = worker_messages_list[worker_msg_idx]
                    # –°–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ –ë–î
                    all_messages_with_timestamps.append({
                        'text': msg,
                        'sender': 'worker',
                        'timestamp': ts_data['timestamp']
                    })
                    worker_msg_idx += 1
                elif ts_data['sender'] == 'customer' and customer_msg_idx < len(customer_messages_list):
                    msg = customer_messages_list[customer_msg_idx]
                    # –°–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ –ë–î
                    all_messages_with_timestamps.append({
                        'text': msg,
                        'sender': 'customer',
                        'timestamp': ts_data['timestamp']
                    })
                    customer_msg_idx += 1
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –º–µ—Ç–∫–∞–º
            sorted_messages = sorted(all_messages_with_timestamps, key=lambda x: x['timestamp'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            for msg_data in sorted_messages:
                ordered_messages.append({
                    'text': msg_data['text'],
                    'sender': msg_data['sender']
                })
        else:
            # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            logger.info(f"[CHAT_HISTORY] No timestamps, using fallback logic")
            
            worker_count = len(worker_messages_list)
            customer_count = len(customer_messages_list)
            
            # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è
            if abs(worker_count - customer_count) <= 1:
                worker_idx = 0
                customer_idx = 0
                while worker_idx < worker_count or customer_idx < customer_count:
                    if worker_idx < worker_count:
                        msg = worker_messages_list[worker_idx]
                        # –°–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ –ë–î
                        ordered_messages.append({'text': msg, 'sender': 'worker'})
                        worker_idx += 1
                    if customer_idx < customer_count:
                        msg = customer_messages_list[customer_idx]
                        # –°–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ –ë–î
                        ordered_messages.append({'text': msg, 'sender': 'customer'})
                        customer_idx += 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if user_type == "customer":
            header = f"üí¨ **–ß–∞—Ç —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º**\n\nüìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {worker.public_id or f'ID#{worker.id}'}\n\n"
        else:  # worker
            header = f"üí¨ **–ß–∞—Ç —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º**\n\nüìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\nüë§ –ó–∞–∫–∞–∑—á–∏–∫: {customer.public_id or f'ID#{customer.id}'}\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not ordered_messages:
            full_text = header + "üí¨ –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        else:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞ Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
            MAX_MESSAGE_LENGTH = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
            MAX_MESSAGES_INITIAL = min(15, len(ordered_messages))
            
            full_text = ""
            messages_shown = 0
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            for limit in range(MAX_MESSAGES_INITIAL, 0, -1):
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
                selected_messages = ordered_messages[-limit:]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
                chat_history = ""
                for msg_data in selected_messages:
                    msg_text = msg_data['text']
                    msg_sender = msg_data['sender']

                    if user_type == "customer":
                        # –ó–∞–∫–∞–∑—á–∏–∫ –≤–∏–¥–∏—Ç —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ "–í—ã"
                        if msg_sender == "customer":
                            chat_history += f"üë§ **–í—ã:** {msg_text}\n"
                        else:
                            chat_history += f"üë§ **{worker.public_id or f'ID#{worker.id}'}:** {msg_text}\n"
                    else:  # worker
                        # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ "–í—ã"
                        if msg_sender == "worker":
                            chat_history += f"üë§ **–í—ã:** {msg_text}\n"
                        else:
                            chat_history += f"üë§ **{customer.public_id or f'ID#{customer.id}'}:** {msg_text}\n"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
                full_text = header + "üìù **–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:**\n" + chat_history
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
                if len(full_text) <= MAX_MESSAGE_LENGTH:
                    messages_shown = limit
                    break
            
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–ª–µ–∑–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if messages_shown == 0:
                full_text = header + "üí¨ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥."

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        contact_exchange = await ContactExchange.get_by_worker_and_abs(worker.id, abs_id)
        contacts_purchased = contact_exchange and contact_exchange.contacts_purchased
        contacts_sent = contact_exchange and contact_exchange.contacts_sent

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"[CHAT_STATUS] ContactExchange found: {contact_exchange is not None}")
        if contact_exchange:
            logger.info(f"[CHAT_STATUS] contacts_purchased: {contact_exchange.contacts_purchased}")
            logger.info(f"[CHAT_STATUS] contacts_sent: {contact_exchange.contacts_sent}")
            logger.info(f"[CHAT_STATUS] ContactExchange ID: {contact_exchange.id}")
            logger.info(f"[CHAT_STATUS] Worker ID: {contact_exchange.worker_id}, ABS ID: {contact_exchange.abs_id}")

        kbc = KeyboardCollection()

        if user_type == "customer":
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
            reply_markup = kbc.anonymous_chat_customer_buttons(
                worker_id=worker.id,
                abs_id=abs_id,
                contact_requested=contacts_sent,
                contact_sent=contacts_sent,
                contacts_purchased=contacts_purchased
            )
        else:  # worker
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            reply_markup = kbc.anonymous_chat_worker_buttons(
                abs_id=abs_id,
                has_contacts=contacts_purchased,
                contacts_requested=contacts_sent
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await bot.send_message(
            chat_id=user_id,
            text=full_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"Error in send_or_update_chat_message: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if user_type == "customer":
            await bot.send_message(
                chat_id=user_id,
                text=f"üí¨ **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è**\n\nüìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n\nüí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n{message_text}",
                parse_mode='Markdown'
            )
        else:
            await bot.send_message(
                chat_id=user_id,
                text=f"üí¨ **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞**\n\nüìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n\nüí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n{message_text}",
                parse_mode='Markdown'
            )


# ========== HANDLERS –î–õ–Ø –ó–ê–ö–ê–ó–ß–ò–ö–ê ==========

@router.callback_query(lambda c: c.data == "noop")
async def handle_noop_button(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer("‚ÑπÔ∏è –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)


@router.callback_query(lambda c: c.data.startswith('confirm_contact_share_'))
async def confirm_contact_share(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    try:
        # confirm_contact_share_{worker_id}_{abs_id}
        parts = callback.data.split('_')
        worker_id = int(parts[3])
        abs_id = int(parts[4])

        print(
            f"[CONTACT_SHARE] Customer {callback.from_user.id} confirmed contact share for worker {worker_id}, abs {abs_id}")
        logger.info(f"[CONTACT_SHARE] Customer confirmed contact share")

        customer = await Customer.get_customer(tg_id=callback.from_user.id)
        worker = await Worker.get_worker(id=worker_id)

        if not customer or not worker:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
        contact_exchange = await ContactExchange.get_by_worker_and_abs(worker_id, abs_id)
        if not contact_exchange:
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ª–∏ —É–∂–µ –∑–∞–∫–∞–∑—á–∏–∫ –ø–µ—Ä–µ–¥–∞—á—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        if contact_exchange.contacts_sent:
            await callback.answer("‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏!", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å - –∑–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª
        await contact_exchange.update(contacts_sent=True)

        kbc = KeyboardCollection()

        # –°–¶–ï–ù–ê–†–ò–ô 1: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–º–µ–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        if worker.unlimited_contacts_until:
            from datetime import datetime
            try:
                end_date = datetime.strptime(worker.unlimited_contacts_until, "%Y-%m-%d")
                if end_date > datetime.now():
                    # –ë–µ–∑–ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–µ–Ω - —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
                    await contact_exchange.update(contacts_purchased=True)

                    # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
                    contacts_text = f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞:**\n\n"
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–∫–∞–∑—á–∏–∫–∞
                    if customer.contact_type == "telegram_only":
                        contacts_text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                        contacts_text += f"üÜî **ID:** {customer.tg_id}"
                    elif customer.contact_type == "phone_only":
                        contacts_text += f"üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** [{customer.phone_number}](tel:{customer.phone_number})"
                    elif customer.contact_type == "both":
                        contacts_text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                        contacts_text += f"üÜî **ID:** {customer.tg_id}\n"
                        contacts_text += f"üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** [{customer.phone_number}](tel:{customer.phone_number})"
                    else:
                        # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Telegram –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
                        contacts_text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                        contacts_text += f"üÜî **ID:** {customer.tg_id}"

                    await bot.send_message(
                        chat_id=worker.tg_id,
                        text=f"üéâ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã!**\n\nüìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\nüë§ –ó–∞–∫–∞–∑—á–∏–∫: {customer.public_id or f'ID#{customer.id}'}\n\n{contacts_text}",
                        parse_mode='Markdown'
                    )

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
                    await bot.send_message(
                        chat_id=customer.tg_id,
                        text=f"‚úÖ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!**\n\nüìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {worker.public_id or f'ID#{worker.id}'}\n\nüí¨ –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç - —Ç–µ–ø–µ—Ä—å –æ–±—â–∞–π—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é.",
                        parse_mode='Markdown'
                    )

                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
                    response = await WorkersAndAbs.get_by_worker_and_abs(worker_id, abs_id)
                    if response:
                        await response.update(applyed=False)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                        original_text = "–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n\n"
                        original_text += f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n"
                        original_text += f"ID: {worker.public_id or f'W{worker.id}'}\n"
                        original_text += f"–†–µ–π—Ç–∏–Ω–≥: {round(worker.stars / worker.count_ratings, 1) if worker.count_ratings else worker.stars}/5 ({worker.count_ratings} –æ—Ü–µ–Ω–æ–∫)\n"
                        original_text += f"–°—Ç–∞—Ç—É—Å: {'–ò–ü ‚úÖ' if worker.individual_entrepreneur else '–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚ö†Ô∏è'}\n"
                        original_text += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {worker.order_count}\n"
                        original_text += f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {worker.registration_data}\n\n"
                        original_text += "‚úÖ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!**"

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                        if callback.message.photo:
                            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption
                            await callback.message.edit_caption(
                                caption=original_text,
                                reply_markup=kbc.anonymous_chat_customer_buttons(
                                    worker_id=worker_id,
                                    abs_id=abs_id,
                                    contact_requested=True,
                                    contact_sent=True,
                                    contacts_purchased=True
                                ),
                                parse_mode='Markdown'
                            )
                        else:
                            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                            await callback.message.edit_text(
                                text=original_text,
                                reply_markup=kbc.anonymous_chat_customer_buttons(
                                    worker_id=worker_id,
                                    abs_id=abs_id,
                                    contact_requested=True,
                                    contact_sent=True,
                                    contacts_purchased=True
                                ),
                                parse_mode='Markdown'
                            )
                    except Exception as edit_error:
                        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await callback.message.answer(
                            text="‚úÖ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!**",
                            reply_markup=kbc.anonymous_chat_customer_buttons(
                                worker_id=worker_id,
                                abs_id=abs_id,
                                contact_requested=True,
                                contact_sent=True,
                                contacts_purchased=True
                            ),
                            parse_mode='Markdown'
                        )

                    await callback.answer("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!")
                    return
            except ValueError:
                pass  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã

        # –°–¶–ï–ù–ê–†–ò–ô 2: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–º–µ–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        if worker.purchased_contacts > 0:
            # –°–ø–∏—Å—ã–≤–∞–µ–º –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç
            new_count = worker.purchased_contacts - 1
            await worker.update_purchased_contacts(purchased_contacts=new_count)
            await contact_exchange.update(contacts_purchased=True)

            # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
            contacts_text = f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞:**\n\n"
            contacts_text += f"üë§ **–ò–º—è:** {customer.tg_name}\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–∫–∞–∑—á–∏–∫–∞
            if customer.contact_type == "telegram_only":
                contacts_text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                contacts_text += f"üÜî **ID:** {customer.tg_id}"
            elif customer.contact_type == "phone_only":
                contacts_text += f"üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** [{customer.phone_number}](tel:{customer.phone_number})"
            elif customer.contact_type == "both":
                contacts_text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                contacts_text += f"üÜî **ID:** {customer.tg_id}\n"
                contacts_text += f"üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** [{customer.phone_number}](tel:{customer.phone_number})"
            else:
                # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Telegram –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
                contacts_text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                contacts_text += f"üÜî **ID:** {customer.tg_id}"

            await bot.send_message(
                chat_id=worker.tg_id,
                text=f"üéâ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã!**\n\nüìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\nüë§ –ó–∞–∫–∞–∑—á–∏–∫: {customer.public_id or f'ID#{customer.id}'}\n\n{contacts_text}",
                parse_mode='Markdown'
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
            await bot.send_message(
                chat_id=customer.tg_id,
                text=f"‚úÖ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!**\n\nüìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {worker.public_id or f'ID#{worker.id}'}\n\nüí¨ –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç - —Ç–µ–ø–µ—Ä—å –æ–±—â–∞–π—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é.",
                parse_mode='Markdown'
            )

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
            response = await WorkersAndAbs.get_by_worker_and_abs(worker_id, abs_id)
            if response:
                await response.update(applyed=False)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                original_text = "–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n\n"
                original_text += f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n"
                original_text += f"ID: {worker.public_id or f'W{worker.id}'}\n"
                original_text += f"–†–µ–π—Ç–∏–Ω–≥: {round(worker.stars / worker.count_ratings, 1) if worker.count_ratings else worker.stars}/5 ({worker.count_ratings} –æ—Ü–µ–Ω–æ–∫)\n"
                original_text += f"–°—Ç–∞—Ç—É—Å: {'–ò–ü ‚úÖ' if worker.individual_entrepreneur else '–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚ö†Ô∏è'}\n"
                original_text += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {worker.order_count}\n"
                original_text += f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {worker.registration_data}\n\n"
                original_text += "‚úÖ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!**"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                if callback.message.photo:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption
                    await callback.message.edit_caption(
                        caption=original_text,
                        reply_markup=kbc.anonymous_chat_customer_buttons(
                            worker_id=worker_id,
                            abs_id=abs_id,
                            contact_requested=True,
                            contact_sent=True,
                            contacts_purchased=True
                        ),
                        parse_mode='Markdown'
                    )
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                    await callback.message.edit_text(
                        text=original_text,
                        reply_markup=kbc.anonymous_chat_customer_buttons(
                            worker_id=worker_id,
                            abs_id=abs_id,
                            contact_requested=True,
                            contact_sent=True,
                            contacts_purchased=True
                        ),
                        parse_mode='Markdown'
                    )
            except Exception as edit_error:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    text="‚úÖ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!**",
                    reply_markup=kbc.anonymous_chat_customer_buttons(
                        worker_id=worker_id,
                        abs_id=abs_id,
                        contact_requested=True,
                        contact_sent=True,
                        contacts_purchased=True
                    ),
                    parse_mode='Markdown'
                )

            await callback.answer("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!")
            return

        # –°–¶–ï–ù–ê–†–ò–ô 3: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ - –Ω—É–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, —Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—à–µ)
        notification_text = (
            f"üîî **–ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–¥–∞—á—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤!**\n\n"
            f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n"
            f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {customer.public_id or f'ID#{customer.id}'}\n\n"
            f"üí∞ –£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.\n"
            f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—É–ø–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã."
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        builder = InlineKeyboardBuilder()
        builder.add(kbc._inline(button_text="üí≥ –ö—É–ø–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã",
                                callback_data=f"buy_contacts_for_abs_{abs_id}"))
        builder.add(kbc._inline(button_text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è",
                                callback_data=f"reject_contact_offer_{abs_id}"))
        builder.adjust(1)

        await bot.send_message(
            chat_id=worker.tg_id,
            text=notification_text,
            reply_markup=builder.as_markup(),
            parse_mode='Markdown'
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            original_text = "–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n\n"
            original_text += f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n"
            original_text += f"ID: {worker.public_id or f'W{worker.id}'}\n"
            original_text += f"–†–µ–π—Ç–∏–Ω–≥: {round(worker.stars / worker.count_ratings, 1) if worker.count_ratings else worker.stars}/5 ({worker.count_ratings} –æ—Ü–µ–Ω–æ–∫)\n"
            original_text += f"–°—Ç–∞—Ç—É—Å: {'–ò–ü ‚úÖ' if worker.individual_entrepreneur else '–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚ö†Ô∏è'}\n"
            original_text += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {worker.order_count}\n"
            original_text += f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {worker.registration_data}\n\n"
            original_text += "‚è≥ **–û–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è...**"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if callback.message.photo:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption
                await callback.message.edit_caption(
                    caption=original_text,
                    reply_markup=kbc.anonymous_chat_customer_buttons(
                        worker_id=worker_id,
                        abs_id=abs_id,
                        contact_requested=True,
                        contact_sent=True,
                        contacts_purchased=False
                    ),
                    parse_mode='Markdown'
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                await callback.message.edit_text(
                    text=original_text,
                    reply_markup=kbc.anonymous_chat_customer_buttons(
                        worker_id=worker_id,
                        abs_id=abs_id,
                        contact_requested=True,
                        contact_sent=True,
                        contacts_purchased=False
                    ),
                    parse_mode='Markdown'
                )
        except Exception as edit_error:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                text="‚è≥ **–û–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è...**",
                reply_markup=kbc.anonymous_chat_customer_buttons(
                    worker_id=worker_id,
                    abs_id=abs_id,
                    contact_requested=True,
                    contact_sent=True,
                    contacts_purchased=False
                ),
                parse_mode='Markdown'
            )

        await callback.answer("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏!")

    except Exception as e:
        logger.error(f"Error in confirm_contact_share: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith('buy_contacts_for_abs_'))
async def buy_contacts_for_abs(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫—É–ø–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    try:
        # buy_contacts_for_abs_{abs_id}
        parts = callback.data.split('_')
        abs_id = int(parts[4])

        worker = await Worker.get_worker(tg_id=callback.from_user.id)

        if not worker:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        advertisement = await Abs.get_one(id=abs_id)
        if not advertisement:
            await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        customer = await Customer.get_customer(id=advertisement.customer_id)
        if not customer:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–¥–∞—á—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        contact_exchange = await ContactExchange.get_by_worker_and_abs(worker.id, abs_id)
        if not contact_exchange or not contact_exchange.contacts_sent:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑—á–∏–∫ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–¥–∞—á—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫—É–ø–ª–µ–Ω—ã –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        if contact_exchange.contacts_purchased:
            await callback.answer("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã —É–∂–µ –ø–æ–ª—É—á–µ–Ω—ã", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        if worker.purchased_contacts > 0:
            # –ï—Å—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã - —Å—Ä–∞–∑—É —Å–ø–∏—Å—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ–¥–∞–µ–º
            new_count = worker.purchased_contacts - 1
            await worker.update_purchased_contacts(purchased_contacts=new_count)

            # –û–±–Ω–æ–≤–ª—è–µ–º ContactExchange
            await contact_exchange.update(contacts_purchased=True)

            # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
            contacts_text = f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞:**\n\n"
            contacts_text += f"üë§ **–ò–º—è:** {customer.tg_name}\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–∫–∞–∑—á–∏–∫–∞
            if customer.contact_type == "telegram_only":
                contacts_text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                contacts_text += f"üÜî **ID:** {customer.tg_id}"
            elif customer.contact_type == "phone_only":
                contacts_text += f"üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** [{customer.phone_number}](tel:{customer.phone_number})"
            elif customer.contact_type == "both":
                contacts_text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                contacts_text += f"üÜî **ID:** {customer.tg_id}\n"
                contacts_text += f"üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** [{customer.phone_number}](tel:{customer.phone_number})"
            else:
                # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Telegram –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
                contacts_text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                contacts_text += f"üÜî **ID:** {customer.tg_id}"

            await bot.send_message(
                chat_id=worker.tg_id,
                text=f"üéâ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã!**\n\nüìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\nüë§ –ó–∞–∫–∞–∑—á–∏–∫: {customer.public_id or f'ID#{customer.id}'}\n\n{contacts_text}\n\nüí∞ –û—Å—Ç–∞–ª–æ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {new_count}",
                parse_mode='Markdown'
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
            await bot.send_message(
                chat_id=customer.tg_id,
                text=f"‚úÖ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!**\n\nüìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {worker.public_id or f'ID#{worker.id}'}\n\nüí¨ –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç - —Ç–µ–ø–µ—Ä—å –æ–±—â–∞–π—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é.",
                parse_mode='Markdown'
            )

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
            response = await WorkersAndAbs.get_by_worker_and_abs(worker.id, abs_id)
            if response:
                await response.update(applyed=False)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            kbc = KeyboardCollection()
            await callback.message.edit_text(
                text=f"‚úÖ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã!**\n\nüìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n\n{contacts_text}\n\nüí∞ –û—Å—Ç–∞–ª–æ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {new_count}",
                reply_markup=kbc.menu_btn(),
                parse_mode='Markdown'
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(WorkStates.worker_menu)

            await callback.answer("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã!")
            return

        # –ù–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã –ø–æ–∫—É–ø–∫–∏
        kbc = KeyboardCollection()
        await callback.message.edit_text(
            text="üí∞ **–¢–∞—Ä–∏—Ñ—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:",
            reply_markup=kbc.buy_tokens_tariffs(),
            parse_mode='Markdown'
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–∏
        await state.update_data(
            buying_contacts_for_abs=True,
            target_worker_id=worker.id,
            target_abs_id=abs_id
        )

    except Exception as e:
        logger.error(f"Error in buy_contacts_for_abs: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith('reject_contact_offer_'))
async def reject_contact_offer(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    try:
        # reject_contact_offer_{abs_id}
        parts = callback.data.split('_')
        abs_id = int(parts[3])

        worker = await Worker.get_worker(tg_id=callback.from_user.id)

        if not worker:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        advertisement = await Abs.get_one(id=abs_id)
        if not advertisement:
            await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        customer = await Customer.get_customer(id=advertisement.customer_id)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ–± –æ—Ç–∫–∞–∑–µ
        await bot.send_message(
            chat_id=customer.tg_id,
            text=f"‚ùå **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤**\n\nüìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {worker.public_id or f'ID#{worker.id}'}\n\n–û—Ç–∫–ª–∏–∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.",
            parse_mode='Markdown'
        )

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å ContactExchange
        contact_exchange = await ContactExchange.get_by_worker_and_abs(worker.id, abs_id)
        if contact_exchange:
            await contact_exchange.delete()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        kbc = KeyboardCollection()
        await callback.message.edit_text(
            text="‚ùå **–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤**\n\n–û—Ç–∫–ª–∏–∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.",
            reply_markup=kbc.menu_btn(),
            parse_mode='Markdown'
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(WorkStates.worker_menu)

        await callback.answer("‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")

    except Exception as e:
        logger.error(f"Error in reject_contact_offer: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith('decline_contact_share_'))
async def decline_contact_share(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    try:
        # decline_contact_share_{worker_id}_{abs_id}
        parts = callback.data.split('_')
        worker_id = int(parts[3])
        abs_id = int(parts[4])

        print(
            f"[CONTACT_SHARE] Customer {callback.from_user.id} declined contact share for worker {worker_id}, abs {abs_id}")
        logger.info(f"[CONTACT_SHARE] Customer declined contact share")

        customer = await Customer.get_customer(tg_id=callback.from_user.id)
        worker = await Worker.get_worker(id=worker_id)

        if not customer or not worker:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
        contact_exchange = await ContactExchange.get_by_worker_and_abs(worker_id, abs_id)
        if not contact_exchange:
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º contact_exchange
        message_id_to_delete = None
        if contact_exchange.message_id:
            message_id_to_delete = contact_exchange.message_id

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å ContactExchange
        await contact_exchange.delete()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        notification_text = (
            f"‚ùå **–ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–µ—Ä–µ–¥–∞—á—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤**\n\n"
            f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n"
            f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {customer.public_id or f'ID#{customer.id}'}\n\n"
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–∫–∞–∑—á–∏–∫ –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏.\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–∑–∂–µ."
        )

        await bot.send_message(
            chat_id=worker.tg_id,
            text=notification_text,
            parse_mode='Markdown'
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if message_id_to_delete:
            try:
                await bot.delete_message(chat_id=worker.tg_id, message_id=message_id_to_delete)
                print(
                    f"[MESSAGE_DELETE] Deleted contact offer message {message_id_to_delete} for worker {worker.tg_id}")
            except Exception as e:
                logger.error(f"Error deleting contact offer message: {e}")
                print(f"[MESSAGE_DELETE] Failed to delete contact offer message {message_id_to_delete}: {e}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –∫ —Å–ø–∏—Å–∫—É –æ—Ç–∫–ª–∏–∫–æ–≤
        kbc = KeyboardCollection()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å text –∏–ª–∏ caption)
        current_text = callback.message.text or callback.message.caption or ""
        new_text = current_text + "\n\n‚ùå **–ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.**"

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ç–æ)
        try:
            if callback.message.text:
                await callback.message.edit_text(
                    text=new_text,
                    reply_markup=kbc.customer_responses_list_buttons(
                        responses_data=[{
                            'worker_id': worker_id,
                            'worker_public_id': worker.public_id or f'ID#{worker.id}',
                            'active': True
                        }],
                        abs_id=abs_id
                    ),
                    parse_mode='Markdown'
                )
            else:
                # –ï—Å–ª–∏ –±—ã–ª–æ —Ñ–æ—Ç–æ —Å caption
                await callback.message.edit_caption(
                    caption=new_text,
                    reply_markup=kbc.customer_responses_list_buttons(
                        responses_data=[{
                            'worker_id': worker_id,
                            'worker_public_id': worker.public_id or f'ID#{worker.id}',
                            'active': True
                        }],
                        abs_id=abs_id
                    ),
                    parse_mode='Markdown'
                )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await callback.message.delete()
            except Exception:
                pass
            await callback.message.answer(
                text=new_text,
                reply_markup=kbc.customer_responses_list_buttons(
                    responses_data=[{
                        'worker_id': worker_id,
                        'worker_public_id': worker.public_id or f'ID#{worker.id}',
                        'active': True
                    }],
                    abs_id=abs_id
                ),
                parse_mode='Markdown'
            )

        await callback.answer("‚ùå –ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

    except Exception as e:
        logger.error(f"Error in decline_contact_share: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith('offer_contact_share_'))
async def offer_contact_share(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–∫–∞–∑—á–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    try:
        # offer_contact_share_{worker_id}_{abs_id}
        parts = callback.data.split('_')
        worker_id = int(parts[3])
        abs_id = int(parts[4])

        print(
            f"[CONTACT_OFFER] Customer {callback.from_user.id} offers contact share for worker {worker_id}, abs {abs_id}")
        logger.info(f"[CONTACT_OFFER] Customer offers contact share")

        customer = await Customer.get_customer(tg_id=callback.from_user.id)
        worker = await Worker.get_worker(id=worker_id)

        if not customer or not worker:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ç–æ–º, —á—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã
        contact_exchange = await ContactExchange.get_by_worker_and_abs(worker_id, abs_id)
        if not contact_exchange:
            # –ü–æ–ª—É—á–∞–µ–º customer_id
            customer_id = customer.id
            contact_exchange = ContactExchange(
                id=None,
                worker_id=worker_id,
                customer_id=customer_id,
                abs_id=abs_id,
                contacts_sent=True,  # –ó–∞–∫–∞–∑—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–∏–ª
                contacts_purchased=False,
                message_id=None  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            )
            await contact_exchange.save()
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if contact_exchange.contacts_sent and contact_exchange.message_id:
                await callback.answer("‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!", show_alert=True)
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            await contact_exchange.update(contacts_sent=True)
            # message_id –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        notification_text = (
            f"üîî **–ó–∞–∫–∞–∑—á–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã!**\n\n"
            f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n"
            f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {customer.public_id or f'ID#{customer.id}'}\n\n"
            f"–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞?"
        )

        kbc = KeyboardCollection()
        builder = InlineKeyboardBuilder()
        builder.add(kbc._inline(button_text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                                callback_data=f"accept_contact_offer_{worker_id}_{abs_id}"))
        builder.add(kbc._inline(button_text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                callback_data=f"reject_contact_offer_{worker_id}_{abs_id}"))
        builder.adjust(1)

        message = await bot.send_message(
            chat_id=worker.tg_id,
            text=notification_text,
            reply_markup=builder.as_markup(),
            parse_mode='Markdown'
        )

        print(message.message_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ ContactExchange
        await contact_exchange.update(message_id=message.message_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ caption (–µ—Å–ª–∏ –±—ã–ª–æ —Ñ–æ—Ç–æ)
        current_text = callback.message.text or callback.message.caption or ""
        new_text = current_text + "\n\n‚úÖ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!**"

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        try:
            if callback.message.text:
                await callback.message.edit_text(
                    text=new_text,
                    reply_markup=kbc.anonymous_chat_customer_buttons(
                        worker_id=worker_id,
                        abs_id=abs_id,
                        contact_requested=True,
                        contact_sent=True,
                        contacts_purchased=False
                    ),
                    parse_mode='Markdown'
                )
            else:
                # –ï—Å–ª–∏ –±—ã–ª–æ —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption
                await callback.message.edit_caption(
                    caption=new_text,
                    reply_markup=kbc.anonymous_chat_customer_buttons(
                        worker_id=worker_id,
                        abs_id=abs_id,
                        contact_requested=True,
                        contact_sent=True,
                        contacts_purchased=False
                    ),
                    parse_mode='Markdown'
                )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await callback.message.delete()
            except Exception:
                pass
            await callback.message.answer(
                text=new_text,
                reply_markup=kbc.anonymous_chat_customer_buttons(
                    worker_id=worker_id,
                    abs_id=abs_id,
                    contact_requested=True,
                    contact_sent=True,
                    contacts_purchased=False
                ),
                parse_mode='Markdown'
            )

        await callback.answer("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!")

    except Exception as e:
        logger.error(f"Error in offer_contact_share: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith('accept_contact_offer_'))
async def accept_contact_offer(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    try:
        # accept_contact_offer_{worker_id}_{abs_id}
        parts = callback.data.split('_')
        worker_id = int(parts[3])
        abs_id = int(parts[4])

        print(f"[CONTACT_ACCEPT] Worker {callback.from_user.id} accepts contact offer for abs {abs_id}")
        logger.info(f"[CONTACT_ACCEPT] Worker accepts contact offer")

        worker = await Worker.get_worker(tg_id=callback.from_user.id)
        if not worker or worker.id != worker_id:
            await callback.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        customer = await Customer.get_customer(id=(await Abs.get_one(id=abs_id)).customer_id)
        if not customer:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –±–µ–∑–ª–∏–º–∏—Ç –∏–ª–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        has_unlimited = worker.unlimited_contacts_until and datetime.now() < datetime.fromisoformat(
            worker.unlimited_contacts_until)
        has_purchased = worker.purchased_contacts > 0

        if has_unlimited or has_purchased:
            # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
            if has_purchased and not has_unlimited:
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                new_count = worker.purchased_contacts - 1
                await worker.update_purchased_contacts(purchased_contacts=new_count)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            contact_exchange = await ContactExchange.get_by_worker_and_abs(worker_id, abs_id)
            if contact_exchange:
                await contact_exchange.update(contacts_purchased=True)

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º WorkersAndAbs
            response = await WorkersAndAbs.get_by_worker_and_abs(worker_id, abs_id)
            if response:
                await response.update(applyed=False)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
            await bot.send_message(
                chat_id=customer.tg_id,
                text=f"‚úÖ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã!**\n\n"
                     f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n"
                     f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {worker.public_id or f'ID#{worker.id}'}\n\n"
                     f"üîí **–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç** - –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã.",
                parse_mode='Markdown'
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
            contacts_text = f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã!**\n\n"
            contacts_text += f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n"
            contacts_text += f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {customer.public_id or f'ID#{customer.id}'}\n\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–∫–∞–∑—á–∏–∫–∞
            if customer.contact_type == "telegram_only":
                contacts_text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                contacts_text += f"üÜî **ID:** {customer.tg_id}\n\n"
            elif customer.contact_type == "phone_only":
                contacts_text += f"üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** [{customer.phone_number}](tel:{customer.phone_number})\n\n"
            elif customer.contact_type == "both":
                contacts_text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                contacts_text += f"üÜî **ID:** {customer.tg_id}\n"
                contacts_text += f"üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** [{customer.phone_number}](tel:{customer.phone_number})\n\n"
            else:
                # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Telegram –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
                contacts_text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                contacts_text += f"üÜî **ID:** {customer.tg_id}\n\n"
            
            contacts_text += f"üîí **–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç** - —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é."

            await callback.message.edit_text(
                text=contacts_text,
                parse_mode='Markdown'
            )

            await callback.answer("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã! –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç.")

        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            kbc = KeyboardCollection()
            await callback.message.edit_text(
                text=f"üí∞ **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å**\n\n"
                     f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n"
                     f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {customer.public_id or f'ID#{customer.id}'}\n\n"
                     f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
                reply_markup=kbc.buy_tokens_tariffs(),
                parse_mode='Markdown'
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–∏
            await state.update_data(
                buying_contacts_for_abs=True,
                target_worker_id=worker.id,
                target_abs_id=abs_id
            )
            
            await callback.answer("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")

    except Exception as e:
        logger.error(f"Error in accept_contact_offer: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith('reject_contact_offer_'))
async def reject_contact_offer(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    try:
        # reject_contact_offer_{worker_id}_{abs_id}
        parts = callback.data.split('_')
        worker_id = int(parts[3])
        abs_id = int(parts[4])

        print(f"[CONTACT_REJECT] Worker {callback.from_user.id} rejects contact offer for abs {abs_id}")
        logger.info(f"[CONTACT_REJECT] Worker rejects contact offer")

        worker = await Worker.get_worker(tg_id=callback.from_user.id)
        customer = await Customer.get_customer(id=(await Abs.get_one(id=abs_id)).customer_id)

        if not worker or not customer:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        await bot.send_message(
            chat_id=customer.tg_id,
            text=f"‚ùå **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤**\n\n"
                 f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n"
                 f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {worker.public_id or f'ID#{worker.id}'}\n\n"
                 f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.",
            parse_mode='Markdown'
        )

        await callback.message.edit_text(
            text="‚ùå **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ**\n\n"
                 "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∑–∞–∫–∞–∑—á–∏–∫–∞.",
            parse_mode='Markdown'
        )

        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")

    except Exception as e:
        logger.error(f"Error in reject_contact_offer: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# ========== HANDLERS –î–õ–Ø –ß–ê–¢–ê ==========

@router.message(StateFilter(WorkStates.worker_anonymous_chat))
async def handle_worker_chat_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ"""
    try:
        print(f"[WORKER_CHAT] Worker {message.from_user.id} sent message in chat")
        logger.info(f"[WORKER_CHAT] Worker sent message in chat")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        is_valid, error_message = check_message_for_contacts(message.text)
        if not is_valid:
            await message.answer(
                f"üö´ **–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!**\n\n"
                f"{error_message}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∑–∞–∫–∞–∑—á–∏–∫–∞.",
                parse_mode='Markdown'
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
        data = await state.get_data()
        abs_id = data.get('current_chat_abs_id')
        customer_id = data.get('current_chat_customer_id')

        if not abs_id or not customer_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        worker = await Worker.get_worker(tg_id=message.from_user.id)
        customer = await Customer.get_customer(id=customer_id)

        if not worker or not customer:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å WorkersAndAbs
        response = await WorkersAndAbs.get_by_worker_and_abs(worker.id, abs_id)
        if not response:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã—Ç –ª–∏ —á–∞—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫—É–ø–ª–µ–Ω—ã)
        contact_exchange = await ContactExchange.get_by_worker_and_abs(worker.id, abs_id)
        if contact_exchange and contact_exchange.contacts_purchased:
            await message.answer("üîí **–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç** - –∫–æ–Ω—Ç–∞–∫—Ç—ã —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω—ã.\n–¢–µ–ø–µ—Ä—å –æ–±—â–∞–π—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if response.worker_messages == ['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ']:
            new_worker_messages = [message.text]
        else:
            worker_messages_list = list(response.worker_messages) if response.worker_messages else []
            new_worker_messages = worker_messages_list + [message.text]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        current_timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        current_timestamps = response.message_timestamps if hasattr(response, 'message_timestamps') and response.message_timestamps else []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–µ—Ç–∫—É
        new_timestamps = current_timestamps + [{"sender": "worker", "timestamp": current_timestamp}]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        await response.update(
            worker_messages=new_worker_messages,
            turn=False,  # —Ç–µ–ø–µ—Ä—å –æ—á–µ—Ä–µ–¥—å –∑–∞–∫–∞–∑—á–∏–∫–∞
            message_timestamps=new_timestamps
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        response.worker_messages = new_worker_messages
        response.message_timestamps = new_timestamps
        response.turn = False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É
        await send_or_update_chat_message(
            user_id=customer.tg_id,
            user_type="customer",
            abs_id=abs_id,
            worker=worker,
            customer=customer,
            message_text=message.text,
            sender="worker"
        )

        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –º–µ–Ω—é
        from app.handlers.worker import menu_worker
        from aiogram.types import CallbackQuery
        fake_callback = CallbackQuery(
            id="fake_callback_id",
            message=message,
            from_user=message.from_user,
            data="menu",
            chat_instance=""
        )
        await menu_worker(fake_callback, state)

    except Exception as e:
        logger.error(f"Error in handle_worker_chat_message: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")


@router.message(StateFilter(CustomerStates.customer_anonymous_chat))
async def handle_customer_chat_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–∫–∞–∑—á–∏–∫–∞ –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ"""
    try:
        print(f"[CUSTOMER_CHAT] Customer {message.from_user.id} sent message in chat")
        logger.info(f"[CUSTOMER_CHAT] Customer sent message in chat")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        is_valid, error_message = check_message_for_contacts(message.text)
        if not is_valid:
            await message.answer(
                f"üö´ **–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!**\n\n"
                f"{error_message}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã' –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.",
                parse_mode='Markdown'
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
        data = await state.get_data()
        abs_id = data.get('current_chat_abs_id')
        worker_id = data.get('current_chat_worker_id')

        if not abs_id or not worker_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        customer = await Customer.get_customer(tg_id=message.from_user.id)
        worker = await Worker.get_worker(id=worker_id)

        if not customer or not worker:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å WorkersAndAbs
        response = await WorkersAndAbs.get_by_worker_and_abs(worker_id, abs_id)
        if not response:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã—Ç –ª–∏ —á–∞—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫—É–ø–ª–µ–Ω—ã)
        contact_exchange = await ContactExchange.get_by_worker_and_abs(worker_id, abs_id)
        if contact_exchange and contact_exchange.contacts_purchased:
            await message.answer("üîí **–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç** - –∫–æ–Ω—Ç–∞–∫—Ç—ã —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω—ã.\n–¢–µ–ø–µ—Ä—å –æ–±—â–∞–π—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
        customer_messages_list = list(response.customer_messages) if response.customer_messages else []
        new_customer_messages = customer_messages_list + [message.text]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        current_timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        current_timestamps = response.message_timestamps if hasattr(response, 'message_timestamps') and response.message_timestamps else []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–µ—Ç–∫—É
        new_timestamps = current_timestamps + [{"sender": "customer", "timestamp": current_timestamp}]

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        await response.update(
            customer_messages=new_customer_messages,
            turn=True,  # —Ç–µ–ø–µ—Ä—å –æ—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            message_timestamps=new_timestamps
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        response.customer_messages = new_customer_messages
        response.message_timestamps = new_timestamps
        response.turn = True

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        await send_or_update_chat_message(
            user_id=worker.tg_id,
            user_type="worker",
            abs_id=abs_id,
            worker=worker,
            customer=customer,
            message_text=message.text,
            sender="customer"
        )

        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!")

    except Exception as e:
        logger.error(f"Error in handle_customer_chat_message: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")


@router.callback_query(lambda c: c.data.startswith('reply_in_worker_chat_'))
async def reply_in_worker_chat(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤ —á–∞—Ç–µ"""
    try:
        # reply_in_worker_chat_{abs_id}
        parts = callback.data.split('_')
        abs_id = int(parts[4])  # parts[0]=reply, parts[1]=in, parts[2]=worker, parts[3]=chat, parts[4]=abs_id

        print(f"[WORKER_REPLY_CHAT] Worker {callback.from_user.id} wants to reply in chat for abs {abs_id}")
        logger.info(f"[WORKER_REPLY_CHAT] Worker wants to reply in chat")

        worker = await Worker.get_worker(tg_id=callback.from_user.id)
        if not worker:
            await callback.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –∑–∞–∫–∞–∑—á–∏–∫–∞
        advertisement = await Abs.get_one(id=abs_id)
        if not advertisement:
            await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        customer = await Customer.get_customer(id=advertisement.customer_id)
        if not customer:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã—Ç –ª–∏ —á–∞—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫—É–ø–ª–µ–Ω—ã)
        contact_exchange = await ContactExchange.get_by_worker_and_abs(worker.id, abs_id)
        if contact_exchange and contact_exchange.contacts_purchased:
            await callback.answer("‚ùå –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç - –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã", show_alert=True)
            return

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞
        await state.update_data(current_chat_abs_id=abs_id, current_chat_customer_id=customer.id)
        await state.set_state(WorkStates.worker_anonymous_chat)

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        from app.untils.message_utils import safe_edit_message
        await safe_edit_message(
            callback=callback,
            text=f"üí¨ **–ß–∞—Ç —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º**\n\n"
                 f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n"
                 f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {customer.public_id or f'ID#{customer.id}'}\n\n"
                 f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É:",
            parse_mode='Markdown'
        )

        await callback.answer("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É")

    except Exception as e:
        logger.error(f"Error in reply_in_worker_chat: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# ========== 1. –ü–†–û–°–ú–û–¢–† –û–¢–ö–õ–ò–ö–û–í –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø ("–ú–æ–∏ –û—Ç–∫–ª–∏–∫–∏") ==========

@router.callback_query(F.data == "my_responses")
async def my_responses(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    try:
        worker = await Worker.get_worker(tg_id=callback.from_user.id)

        if not worker:
            await callback.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫–ª–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        responses = await WorkersAndAbs.get_by_worker(worker_id=worker.id)

        if not responses:
            kbc = KeyboardCollection()
            text = "üì≠ **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤**\n\n"
            text += "–û—Ç–∫–ª–∏–∫–∞–π—Ç–µ—Å—å –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É!"

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            try:
                await callback.message.edit_text(
                    text=text,
                    reply_markup=kbc.menu_btn(),
                    parse_mode='Markdown'
                )
            except Exception:
                try:
                    await callback.message.delete()
                except Exception:
                    pass
                await callback.message.answer(
                    text=text,
                    reply_markup=kbc.menu_btn(),
                    parse_mode='Markdown'
                )

            await state.set_state(WorkStates.worker_menu)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤
        responses_data = []
        for response in responses:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            contact_exchange = await ContactExchange.get_by_worker_and_abs(
                worker.id, response.abs_id
            )

            active = not (contact_exchange and contact_exchange.contacts_purchased)
            responses_data.append({
                'abs_id': response.abs_id,
                'active': active
            })

        kbc = KeyboardCollection()
        text = f"üìã **–í–∞—à–∏ –û—Ç–∫–ª–∏–∫–∏ ({len(responses_data)})**\n\n"
        text += "üí¨ - –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç\n"
        text += "‚úÖ - –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã"

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        try:
            await callback.message.edit_text(
                text=text,
                reply_markup=kbc.my_responses_list_buttons(responses_data),
                parse_mode='Markdown'
            )
        except Exception:
            try:
                await callback.message.delete()
            except Exception:
                pass
            await callback.message.answer(
                text=text,
                reply_markup=kbc.my_responses_list_buttons(responses_data),
                parse_mode='Markdown'
            )

        await state.set_state(WorkStates.worker_my_responses)

    except Exception as e:
        logger.error(f"Error in my_responses: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith('view_my_response_'))
async def view_my_response(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞"""
    try:
        abs_id = int(callback.data.split('_')[3])
        worker = await Worker.get_worker(tg_id=callback.from_user.id)
        advertisement = await Abs.get_one(id=abs_id)

        if not advertisement:
            await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–º–µ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
        contact_exchange = await ContactExchange.get_by_worker_and_abs(
            worker.id, abs_id
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
        has_contacts = contact_exchange and contact_exchange.contacts_purchased

        # –ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–¥–∞—á—É (contacts_sent=True), –Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –µ—â–µ –Ω–µ –∫—É–ø–∏–ª
        customer_confirmed = contact_exchange and contact_exchange.contacts_sent and not contact_exchange.contacts_purchased

        # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã (–∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç), –Ω–æ –∑–∞–∫–∞–∑—á–∏–∫ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª
        waiting_confirmation = contact_exchange and not contact_exchange.contacts_sent and not contact_exchange.contacts_purchased

        # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        import json
        try:
            photo_dict = json.loads(advertisement.photo_path) if isinstance(advertisement.photo_path, str) else advertisement.photo_path
            count_photo = len(photo_dict) if isinstance(photo_dict, dict) else 0
        except (json.JSONDecodeError, TypeError, AttributeError):
            count_photo = 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        from app.untils import help_defs
        text = f"üìã **–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{abs_id}**\n\n"
        text += help_defs.read_text_file(advertisement.text_path)
        text += "\n\n" + "=" * 30 + "\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
        customer = await Customer.get_customer(id=advertisement.customer_id)
        chat_history = await format_chat_history_for_display("worker", abs_id, worker, customer)
        
        if chat_history:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏
            temp_text = text + "üìù **–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:**\n\n" + chat_history
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–±–æ–ª—å—à–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(temp_text) > 4000:
                # –£—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —Ç–µ–∫—Å—Ç –Ω–µ –≤–ª–µ–∑–µ—Ç
                history_lines = chat_history.split('\n')
                remaining_chars = 4000 - len(text) - 100  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
                truncated_history = ""
                for line in reversed(history_lines):
                    if line.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                        if len(truncated_history) + len(line) + 1 <= remaining_chars:
                            truncated_history = line + '\n' + truncated_history
                        else:
                            break
                
                if truncated_history:
                    text += "üìù **–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:**\n\n"
                    text += truncated_history
                    text += f"\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)\n"
                    text += "\n" + "=" * 30 + "\n\n"
                else:
                    # –ï—Å–ª–∏ –¥–∞–∂–µ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –≤–ª–µ–∑–ª–∞, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                    text += "\nüìù –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
                    text += "\n" + "=" * 30 + "\n\n"
            else:
                text += "üìù **–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:**\n\n"
                text += chat_history
                text += "\n" + "=" * 30 + "\n\n"

        if has_contacts:
            # –ö–æ–Ω—Ç–∞–∫—Ç—ã —É–∂–µ –∫—É–ø–ª–µ–Ω—ã
            customer = await Customer.get_customer(id=advertisement.customer_id)
            text += "‚úÖ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:**\n\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–∫–∞–∑—á–∏–∫–∞
            if customer.contact_type == "telegram_only":
                text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                text += f"üÜî **ID:** {customer.tg_id}\n\n"
            elif customer.contact_type == "phone_only":
                text += f"üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** [{customer.phone_number}](tel:{customer.phone_number})\n\n"
            elif customer.contact_type == "both":
                text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                text += f"üÜî **ID:** {customer.tg_id}\n"
                text += f"üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** [{customer.phone_number}](tel:{customer.phone_number})\n\n"
            else:
                # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Telegram –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
                text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                text += f"üÜî **ID:** {customer.tg_id}\n\n"
            
            text += "üîí –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç"
        elif customer_confirmed:
            # –ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å
            text += "üí∞ **–ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–¥–∞—á—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤**\n\n"
            text += "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Ö –∫—É–ø–∏—Ç—å."
        elif waiting_confirmation:
            # –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞
            text += "‚è≥ **–°—Ç–∞—Ç—É—Å:** –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞\n\n"
            text += "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞.\n"
            text += "–ó–∞–∫–∞–∑—á–∏–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –∫–æ–Ω—Ç–∞–∫—Ç–∞.\n"
            text += "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç."
        else:
            # –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
            text += "üí¨ **–ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω**\n\n"
            text += "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç."

        kbc = KeyboardCollection()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞
        await state.update_data(current_chat_abs_id=abs_id)
        await state.set_state(WorkStates.worker_anonymous_chat)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if count_photo > 0:
            try:
                from aiogram.types import FSInputFile, InputMediaPhoto
                photo_path = advertisement.photo_path['0']
                
                if 'https' in photo_path:
                    await callback.message.delete()
                    await callback.message.answer_photo(
                        photo=photo_path,
                        caption=text,
                        reply_markup=kbc.anonymous_chat_worker_buttons(
                            abs_id=abs_id,
                            has_contacts=has_contacts,
                            contacts_requested=customer_confirmed,
                            contacts_sent=waiting_confirmation,
                            count_photo=count_photo,
                            photo_num=0
                        ),
                        parse_mode='Markdown'
                    )
                else:
                    await callback.message.delete()
                    await callback.message.answer_photo(
                        photo=FSInputFile(photo_path),
                        caption=text,
                        reply_markup=kbc.anonymous_chat_worker_buttons(
                            abs_id=abs_id,
                            has_contacts=has_contacts,
                            contacts_requested=customer_confirmed,
                            contacts_sent=waiting_confirmation,
                            count_photo=count_photo,
                            photo_num=0
                        ),
                        parse_mode='Markdown'
                    )
            except Exception:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–º —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                from app.untils.message_utils import safe_edit_message
                await safe_edit_message(
                    callback=callback,
                    text=text,
                    reply_markup=kbc.anonymous_chat_worker_buttons(
                        abs_id=abs_id,
                        has_contacts=has_contacts,
                        contacts_requested=customer_confirmed,
                        contacts_sent=waiting_confirmation,
                        count_photo=count_photo,
                        photo_num=0
                    ),
                    parse_mode='Markdown'
                )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            from app.untils.message_utils import safe_edit_message
            await safe_edit_message(
                callback=callback,
                text=text,
                reply_markup=kbc.anonymous_chat_worker_buttons(
                    abs_id=abs_id,
                    has_contacts=has_contacts,
                    contacts_requested=customer_confirmed,
                    contacts_sent=waiting_confirmation,
                    count_photo=count_photo,
                    photo_num=0
                ),
                parse_mode='Markdown'
            )

    except Exception as e:
        logger.error(f"Error in view_my_response: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith('cancel_worker_response_'))
async def cancel_worker_response_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –æ—Ç–∫–ª–∏–∫–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ -13 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    try:
        abs_id = int(callback.data.split('_')[3])
        worker = await Worker.get_worker(tg_id=callback.from_user.id)

        if not worker:
            await callback.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∫–ª–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        from app.data.database.models import WorkersAndAbs
        response = await WorkersAndAbs.get_by_worker_and_abs(worker.id, abs_id)
        if not response:
            await callback.answer("‚ùå –û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã –µ—â–µ –Ω–µ –∫—É–ø–ª–µ–Ω—ã
        contact_exchange = await ContactExchange.get_by_worker_and_abs(worker.id, abs_id)
        if contact_exchange and contact_exchange.contacts_purchased:
            await callback.answer("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", show_alert=True)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        current_activity = getattr(worker, 'activity_level', 100)
        new_activity = max(0, current_activity - 13)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if new_activity >= 74:
            zone_emoji = "üü¢"
            zone_name = "–∑–µ–ª–µ–Ω–æ–π"
        elif new_activity >= 48:
            zone_emoji = "üü°"
            zone_name = "–∂–µ–ª—Ç–æ–π"
        elif new_activity >= 9:
            zone_emoji = "üü†"
            zone_name = "–æ—Ä–∞–Ω–∂–µ–≤–æ–π"
        else:
            zone_emoji = "üî¥"
            zone_name = "–∫—Ä–∞—Å–Ω–æ–π"

        confirmation_text = f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –æ—Ç–∫–ª–∏–∫–∞**\n\n"
        confirmation_text += f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{abs_id}?\n\n"
        confirmation_text += f"**–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:**\n"
        confirmation_text += f"‚ùå –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∏–∑–∏—Ç—Å—è: {current_activity} ‚Üí {new_activity} (-13)\n"
        confirmation_text += f"{zone_emoji} –í—ã –ø–µ—Ä–µ–π–¥–µ—Ç–µ –≤ {zone_name} –∑–æ–Ω—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"

        if new_activity < 74:
            confirmation_text += f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –ü—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –æ—Ç–∫–ª–∏–∫–∏.\n\n"

        confirmation_text += f"–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª, –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º–∏."

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        from app.keyboards import KeyboardCollection
        from aiogram.utils.keyboard import InlineKeyboardBuilder

        kbc = KeyboardCollection()
        builder = InlineKeyboardBuilder()

        builder.add(kbc._inline("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", f"confirm_cancel_response_{abs_id}"))
        builder.add(kbc._inline("‚ùå –û—Ç–º–µ–Ω–∞", f"view_my_response_{abs_id}"))
        builder.adjust(1)

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        from app.untils.message_utils import safe_edit_message
        await safe_edit_message(
            callback=callback,
            text=confirmation_text,
            reply_markup=builder.as_markup(),
            parse_mode='Markdown'
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in cancel_worker_response_confirm: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith('confirm_cancel_response_'))
async def confirm_cancel_worker_response(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –æ—Ç–∫–ª–∏–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º —Å —Å–Ω–∏–∂–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ -13"""
    try:
        abs_id = int(callback.data.split('_')[3])
        worker = await Worker.get_worker(tg_id=callback.from_user.id)

        if not worker:
            await callback.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∫–ª–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        from app.data.database.models import WorkersAndAbs
        response = await WorkersAndAbs.get_by_worker_and_abs(worker.id, abs_id)
        if not response:
            await callback.answer("‚ùå –û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã –µ—â–µ –Ω–µ –∫—É–ø–ª–µ–Ω—ã
        contact_exchange = await ContactExchange.get_by_worker_and_abs(worker.id, abs_id)
        if contact_exchange and contact_exchange.contacts_purchased:
            await callback.answer("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª–∏–∫
        await response.delete()

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if contact_exchange:
            await contact_exchange.delete()

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É –≤ —Ç–∞–±–ª–∏—Ü—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        from app.data.database.models import WorkerResponseCancellation
        cancellation = WorkerResponseCancellation(
            worker_id=worker.id,
            abs_id=abs_id
        )
        await cancellation.save()

        # –°–Ω–∏–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ -13
        if not hasattr(worker, 'activity_level') or worker.activity_level is None:
            worker.activity_level = 100

        old_activity = worker.activity_level
        new_activity = max(0, min(100, worker.activity_level - 13))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å fallback
        from app.handlers.worker import update_worker_activity_fallback
        await update_worker_activity_fallback(worker, new_activity)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if new_activity >= 74:
            zone_emoji = "üü¢"
        elif new_activity >= 48:
            zone_emoji = "üü°"
        elif new_activity >= 9:
            zone_emoji = "üü†"
        else:
            zone_emoji = "üî¥"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        from loaders import bot
        notification_text = f"–û—Ç–º–µ–Ω–∞ –æ—Ç–∫–ª–∏–∫–∞:\n\n‚Äî13 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n{zone_emoji} –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {new_activity}"

        try:
            await bot.send_message(
                chat_id=worker.tg_id,
                text=notification_text
            )
        except Exception as e:
            logger.error(f"Error sending cancellation notification to worker {worker.tg_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É
        from app.data.database.models import Abs, Customer
        advertisement = await Abs.get_one(id=abs_id)
        if advertisement:
            customer = await Customer.get_customer(id=advertisement.customer_id)
            if customer:
                try:
                    await bot.send_message(
                        chat_id=customer.tg_id,
                        text=f"üì® –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ—Ç–∫–ª–∏–∫ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{abs_id}"
                    )
                except Exception as e:
                    logger.error(f"Error sending cancellation notification to customer {customer.tg_id}: {e}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç–∫–ª–∏–∫–æ–≤
        kbc = KeyboardCollection()
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        from app.untils.message_utils import safe_edit_message
        await safe_edit_message(
            callback=callback,
            text="‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–º–µ–Ω–µ–Ω\n\n–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ —Å–ø–∏—Å–∫—É –æ—Ç–∫–ª–∏–∫–æ–≤",
            reply_markup=kbc.menu_btn()
        )
        await state.set_state(WorkStates.worker_menu)

    except Exception as e:
        logger.error(f"Error in cancel_worker_response: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# ========== 2. –ê–ù–û–ù–ò–ú–ù–´–ô –ß–ê–¢ - –°–û–û–ë–©–ï–ù–ò–Ø –û–¢ –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø ==========

@router.message(F.text, StateFilter(WorkStates.worker_anonymous_chat))
async def worker_chat_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        is_valid, error_message = check_message_for_contacts(message.text)

        if not is_valid:
            kbc = KeyboardCollection()
            await message.answer(
                text=f"üö´ **–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!**\n\n{error_message}",
                reply_markup=kbc.menu(),
                parse_mode='Markdown'
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if len(message.text) > 500:
            await message.answer(
                text="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return

        data = await state.get_data()
        abs_id = data.get('current_chat_abs_id')

        if not abs_id:
            await message.answer("‚ùå –°–µ—Å—Å–∏—è —á–∞—Ç–∞ –∏—Å—Ç–µ–∫–ª–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –æ—Ç–∫–ª–∏–∫–∞–º.")
            return

        worker = await Worker.get_worker(tg_id=message.from_user.id)
        advertisement = await Abs.get_one(id=abs_id)
        customer = await Customer.get_customer(id=advertisement.customer_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        worker_and_abs = await WorkersAndAbs.get_by_abs(abs_id=abs_id)
        for response in worker_and_abs:
            if response.worker_id == worker.id:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                if isinstance(response.worker_messages, str):
                    messages = response.worker_messages.split(" | ") if response.worker_messages else []
                else:
                    messages = response.worker_messages or []

                messages.append(message.text)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                current_timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                current_timestamps = response.message_timestamps if hasattr(response, 'message_timestamps') and response.message_timestamps else []
                new_timestamps = current_timestamps + [{"sender": "worker", "timestamp": current_timestamp}]
                
                await response.update(
                    worker_messages=messages,
                    message_timestamps=new_timestamps
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
                response.worker_messages = messages
                response.message_timestamps = new_timestamps
                
                break

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫—É —Å –ø–æ–ª–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        notification_text = f"üí¨ **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è**\n\n"
        notification_text += f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n\n"

        # ID –∏ –∏–º—è
        worker_name = worker.profile_name or worker.tg_name
        notification_text += f"üë§ **ID:** {worker.public_id or f'#{worker.id}'} {worker_name}\n"

        # –†–µ–π—Ç–∏–Ω–≥
        if worker.count_ratings > 0:
            notification_text += f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {worker.stars / worker.count_ratings:.1f}/5 ({worker.count_ratings} –æ—Ü–µ–Ω–æ–∫)\n"
        else:
            notification_text += f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫\n"

        # –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
        status_string = await get_worker_status_string(worker.id)
        notification_text += f"üìã **–°—Ç–∞—Ç—É—Å:** {status_string}\n"

        # –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤
        notification_text += f"üì¶ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤:** {worker.order_count}\n"

        # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        notification_text += f"üìÖ **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:** {worker.registration_data}\n\n"

        notification_text += f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n{message.text}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
        if worker.profile_photo:
            try:
                from aiogram.types import FSInputFile
                await bot.send_photo(
                    chat_id=customer.tg_id,
                    photo=FSInputFile(worker.profile_photo),
                    caption=notification_text,
                    parse_mode='Markdown'
                )
            except Exception:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
                await bot.send_message(
                    chat_id=customer.tg_id,
                    text=notification_text,
                    parse_mode='Markdown'
                )
        else:
            await bot.send_message(
                chat_id=customer.tg_id,
                text=notification_text,
                parse_mode='Markdown'
            )

        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –º–µ–Ω—é
        from app.handlers.worker import menu_worker
        from aiogram.types import CallbackQuery
        fake_callback = CallbackQuery(
            id="fake_callback_id",
            message=message,
            from_user=message.from_user,
            data="menu",
            chat_instance=""
        )
        await menu_worker(fake_callback, state)

    except Exception as e:
        logger.error(f"Error in worker_chat_message: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")


# ========== 3. –ó–ê–ü–†–û–° –ö–û–ù–¢–ê–ö–¢–ê –û–¢ –ò–°–ü–û–õ–ù–ò–¢–ï–õ–Ø ==========

@router.callback_query(lambda c: c.data.startswith('request_contact_'))
async def request_contact(callback: CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    try:
        abs_id = int(callback.data.split('_')[2])
        worker = await Worker.get_worker(tg_id=callback.from_user.id)
        advertisement = await Abs.get_one(id=abs_id)
        customer = await Customer.get_customer(id=advertisement.customer_id)

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ ContactExchange
        # contacts_sent=False –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª
        contact_exchange = await ContactExchange.get_by_worker_and_abs(worker.id, abs_id)
        if not contact_exchange:
            contact_exchange = ContactExchange(
                id=None,
                worker_id=worker.id,
                customer_id=customer.id,
                abs_id=abs_id,
                contacts_sent=False,  # –ó–∞–∫–∞–∑—á–∏–∫ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª
                contacts_purchased=False,
                message_id=None
            )
            await contact_exchange.save()
        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å, –Ω–æ –∑–∞–∫–∞–∑—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            await contact_exchange.update(contacts_sent=False, contacts_purchased=False)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å –ø–æ–ª–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        notification_text = f"üìû **–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è**\n\n"
        notification_text += f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n\n"

        # ID –∏ –∏–º—è
        worker_name = worker.profile_name or worker.tg_name
        notification_text += f"üë§ **ID:** {worker.public_id or f'#{worker.id}'} {worker_name}\n"

        # –†–µ–π—Ç–∏–Ω–≥
        if worker.count_ratings > 0:
            notification_text += f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {worker.stars / worker.count_ratings:.1f}/5 ({worker.count_ratings} –æ—Ü–µ–Ω–æ–∫)\n"
        else:
            notification_text += f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫\n"

        # –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
        status_string = await get_worker_status_string(worker.id)
        notification_text += f"üìã **–°—Ç–∞—Ç—É—Å:** {status_string}\n"

        # –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤
        notification_text += f"üì¶ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤:** {worker.order_count}\n"

        # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        notification_text += f"üìÖ **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:** {worker.registration_data}\n\n"

        notification_text += "‚ùì **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –∫–æ–Ω—Ç–∞–∫—Ç–∞?**"

        kbc = KeyboardCollection()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
        if worker.profile_photo:
            try:
                from aiogram.types import FSInputFile
                await bot.send_photo(
                    chat_id=customer.tg_id,
                    photo=FSInputFile(worker.profile_photo),
                    caption=notification_text,
                    reply_markup=kbc.anonymous_chat_customer_buttons(
                        worker_id=worker.id,
                        abs_id=abs_id,
                        contact_requested=True,
                        contact_sent=False,
                        contacts_purchased=False
                    ),
                    parse_mode='Markdown'
                )
            except Exception:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
                await bot.send_message(
                    chat_id=customer.tg_id,
                    text=notification_text,
                    reply_markup=kbc.anonymous_chat_customer_buttons(
                        worker_id=worker.id,
                        abs_id=abs_id,
                        contact_requested=True,
                        contact_sent=False,
                        contacts_purchased=False
                    ),
                    parse_mode='Markdown'
                )
        else:
            await bot.send_message(
                chat_id=customer.tg_id,
                text=notification_text,
                reply_markup=kbc.anonymous_chat_customer_buttons(
                    worker_id=worker.id,
                    abs_id=abs_id,
                    contact_requested=True,
                    contact_sent=False,
                    contacts_purchased=False
                ),
                parse_mode='Markdown'
            )

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        from app.untils.message_utils import safe_edit_message
        await safe_edit_message(
            callback=callback,
            text="üìû **–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É**\n\n"
                 "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
                 "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑—á–∏–∫ –æ—Ç–≤–µ—Ç–∏—Ç.",
            reply_markup=kbc.anonymous_chat_worker_buttons(
                abs_id=abs_id,
                contacts_requested=True
            ),
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"Error in request_contact: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# ========== 4. –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–ï–†–ï–î–ê–ß–ò –ö–û–ù–¢–ê–ö–¢–ê –ó–ê–ö–ê–ó–ß–ò–ö–û–ú ==========
# ========== 5. –ü–û–ö–£–ü–ö–ê –ñ–ï–¢–û–ù–û–í (–ú–û–ù–ï–¢–ò–ó–ê–¶–ò–Ø) ==========

@router.callback_query(lambda c: c.data.startswith('buy_tokens_'))
async def buy_tokens(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∂–µ—Ç–æ–Ω–æ–≤"""
    try:
        parts = callback.data.split('_')

        # –ü–∞—Ä—Å–∏–º —Ç–∞—Ä–∏—Ñ
        if len(parts) >= 4:
            if parts[2] == 'unlimited':
                # –ë–µ–∑–ª–∏–º–∏—Ç
                months = int(parts[3])
                price = int(parts[4])
                tokens = -1  # -1 –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç
                tariff_name = f"–ë–µ–∑–ª–∏–º–∏—Ç {months} –º–µ—Å."
            else:
                # –û–±—ã—á–Ω—ã–µ –∂–µ—Ç–æ–Ω—ã
                tokens = int(parts[2])
                price = int(parts[3])
                tariff_name = f"{tokens} –∂–µ—Ç–æ–Ω(–æ–≤)"
        else:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞—Ä–∏—Ñ–∞", show_alert=True)
            return

        worker = await Worker.get_worker(tg_id=callback.from_user.id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ state
        await state.update_data(
            purchase_tokens=tokens,
            purchase_price=price,
            purchase_tariff=tariff_name
        )
        await state.set_state(WorkStates.worker_buy_tokens)

        confirmation_text = f"""
üí∞ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏**

üì¶ –¢–∞—Ä–∏—Ñ: {tariff_name}
üíµ –¶–µ–Ω–∞: {price}‚ÇΩ

{f'–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —É –≤–∞—Å –±—É–¥–µ—Ç {worker.purchased_contacts + tokens} –∂–µ—Ç–æ–Ω(–æ–≤)' if tokens > 0 else '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º'}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?
        """

        kbc = KeyboardCollection()
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        builder = kbc._inline
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        keyboard_builder = InlineKeyboardBuilder()
        keyboard_builder.add(kbc._inline(
            button_text=f"‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å {price}‚ÇΩ",
            callback_data=f"confirm_token_purchase_{tokens}_{price}"
        ))
        keyboard_builder.add(kbc._inline(
            button_text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_token_purchase"
        ))
        keyboard_builder.adjust(1)

        await callback.message.edit_text(
            text=confirmation_text,
            reply_markup=keyboard_builder.as_markup(),
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"Error in buy_tokens: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith('confirm_token_purchase_'))
async def confirm_token_purchase(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∂–µ—Ç–æ–Ω–æ–≤"""
    try:
        parts = callback.data.split('_')
        tokens = int(parts[3])
        price = int(parts[4])

        worker = await Worker.get_worker(tg_id=callback.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫—É–ø–∞–µ–º –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        data = await state.get_data()
        buying_for_abs = data.get('buying_contacts_for_abs', False)

        # –í–ê–ñ–ù–û: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        # –°–µ–π—á–∞—Å - –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏

        # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        import aiosqlite
        conn = await aiosqlite.connect('app/data/database/database.db')
        try:
            if tokens == -1:
                # –ë–µ–∑–ª–∏–º–∏—Ç
                from datetime import datetime, timedelta
                months = 1  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                until_date = (datetime.now() + timedelta(days=30 * months)).strftime('%Y-%m-%d')

                await conn.execute(
                    'UPDATE workers SET unlimited_contacts_until = ? WHERE id = ?',
                    (until_date, worker.id)
                )
            else:
                # –û–±—ã—á–Ω—ã–µ –∂–µ—Ç–æ–Ω—ã
                await conn.execute(
                    'UPDATE workers SET purchased_contacts = purchased_contacts + ? WHERE id = ?',
                    (tokens, worker.id)
                )

            await conn.commit()

            kbc = KeyboardCollection()

            if buying_for_abs:
                # –ü–æ–∫—É–ø–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                target_worker_id = data.get('target_worker_id')
                target_abs_id = data.get('target_abs_id')

                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                worker = await Worker.get_worker(id=target_worker_id)

                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                advertisement = await Abs.get_one(id=target_abs_id)
                if not advertisement:
                    await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                    return

                customer = await Customer.get_customer(id=advertisement.customer_id)

                if worker and customer:
                    # –°–ø–∏—Å—ã–≤–∞–µ–º –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç
                    if tokens != -1:
                        new_count = worker.purchased_contacts - 1
                        await worker.update_purchased_contacts(purchased_contacts=new_count)

                    # –û–±–Ω–æ–≤–ª—è–µ–º ContactExchange
                    contact_exchange = await ContactExchange.get_by_worker_and_abs(target_worker_id, target_abs_id)
                    if contact_exchange:
                        await contact_exchange.update(contacts_purchased=True)

                    # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
                    contacts_text = f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞:**\n\n"
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–∫–∞–∑—á–∏–∫–∞
                    if customer.contact_type == "telegram_only":
                        contacts_text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                        contacts_text += f"üÜî **ID:** {customer.tg_id}"
                    elif customer.contact_type == "phone_only":
                        contacts_text += f"üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** [{customer.phone_number}](tel:{customer.phone_number})"
                    elif customer.contact_type == "both":
                        contacts_text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                        contacts_text += f"üÜî **ID:** {customer.tg_id}\n"
                        contacts_text += f"üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** [{customer.phone_number}](tel:{customer.phone_number})"
                    else:
                        # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Telegram –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
                        contacts_text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
                        contacts_text += f"üÜî **ID:** {customer.tg_id}"

                    await bot.send_message(
                        chat_id=worker.tg_id,
                        text=f"üéâ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã!**\n\nüìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{target_abs_id}\nüë§ –ó–∞–∫–∞–∑—á–∏–∫: {customer.public_id or f'ID#{customer.id}'}\n\n{contacts_text}",
                        parse_mode='Markdown'
                    )

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
                    await bot.send_message(
                        chat_id=customer.tg_id,
                        text=f"‚úÖ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!**\n\nüìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{target_abs_id}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {worker.public_id or f'ID#{worker.id}'}\n\nüí¨ –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç - —Ç–µ–ø–µ—Ä—å –æ–±—â–∞–π—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é.",
                        parse_mode='Markdown'
                    )

                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
                    response = await WorkersAndAbs.get_by_worker_and_abs(target_worker_id, target_abs_id)
                    if response:
                        await response.update(applyed=False)

                    await callback.message.edit_text(
                        text=f"‚úÖ **–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n–ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã!",
                        reply_markup=kbc.menu_btn(),
                        parse_mode='Markdown'
                    )
                else:
                    await callback.message.edit_text(
                        text=f"‚úÖ **–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n"
                             f"{'–ë–µ–∑–ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!' if tokens == -1 else f'–î–æ–±–∞–≤–ª–µ–Ω–æ {tokens} –∂–µ—Ç–æ–Ω(–æ–≤)'}",
                        reply_markup=kbc.menu_btn(),
                        parse_mode='Markdown'
                    )
            else:
                # –û–±—ã—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
                await callback.message.edit_text(
                    text=f"‚úÖ **–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!**\n\n"
                         f"{'–ë–µ–∑–ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!' if tokens == -1 else f'–î–æ–±–∞–≤–ª–µ–Ω–æ {tokens} –∂–µ—Ç–æ–Ω(–æ–≤)'}",
                    reply_markup=kbc.menu_btn(),
                    parse_mode='Markdown'
                )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–º–µ—Å—Ç–æ clear()
            await state.set_state(WorkStates.worker_menu)

        except Exception as e:
            await conn.rollback()
            logger.error(f"Error in atomic purchase: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        finally:
            await conn.close()

    except Exception as e:
        logger.error(f"Error in confirm_token_purchase: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "cancel_token_purchase")
async def cancel_token_purchase(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∂–µ—Ç–æ–Ω–æ–≤"""
    kbc = KeyboardCollection()
    await callback.message.edit_text(
        text="‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=kbc.menu_btn()
    )
    await state.set_state(WorkStates.worker_menu)


# ========== 6. –û–¢–ú–ï–ù–ê –ó–ê–ü–†–û–°–ê –ö–û–ù–¢–ê–ö–¢–ê ==========

@router.callback_query(lambda c: c.data.startswith('cancel_contact_request_'))
async def cancel_contact_request(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    try:
        abs_id = int(callback.data.split('_')[3])
        worker = await Worker.get_worker(tg_id=callback.from_user.id)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –∑–∞–∫–∞–∑—á–∏–∫–∞
        advertisement = await Abs.get_one(id=abs_id)
        if not advertisement:
            await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        customer = await Customer.get_customer(id=advertisement.customer_id)

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å ContactExchange
        contact_exchange = await ContactExchange.get_by_worker_and_abs(
            worker.id, abs_id
        )

        if contact_exchange:
            await contact_exchange.delete()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø—Ä–æ—Å–∞
        notification_text = (
            f"‚ÑπÔ∏è **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞**\n\n"
            f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n"
            f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {worker.public_id or f'ID#{worker.id}'}\n\n"
            f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω."
        )

        await bot.send_message(
            chat_id=customer.tg_id,
            text=notification_text,
            parse_mode='Markdown'
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        kbc = KeyboardCollection()
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        from app.untils.message_utils import safe_edit_message
        await safe_edit_message(
            callback=callback,
            text="‚ùå **–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω**\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–∑–∂–µ.",
            reply_markup=kbc.anonymous_chat_worker_buttons(abs_id=abs_id),
            parse_mode='Markdown'
        )

        await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω")

    except Exception as e:
        logger.error(f"Error in cancel_contact_request: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "noop")
async def noop_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith('go-to-photo-worker-response_'))
async def navigate_photo_worker_response(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—Å—Ç–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –æ—Ç–∫–ª–∏–∫–∞—Ö –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    logger.debug(f'navigate_photo_worker_response...')
    kbc = KeyboardCollection()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: go-to-photo-worker-response_{photo_num}_{abs_id}
    parts = callback.data.split('_')
    photo_num = int(parts[1])
    abs_id = int(parts[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    advertisement = await Abs.get_one(id=abs_id)
    if not advertisement:
        await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ü–∞—Ä—Å–∏–º JSON —Å—Ç—Ä–æ–∫—É photo_path –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ
    import json
    try:
        photo_dict = json.loads(advertisement.photo_path) if isinstance(advertisement.photo_path, str) else advertisement.photo_path
        count_photo = len(photo_dict) if isinstance(photo_dict, dict) else 0
    except (json.JSONDecodeError, TypeError, AttributeError):
        count_photo = 1
    
    # –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    if photo_num <= -1:
        photo_num = count_photo - 1
    elif photo_num >= count_photo:
        photo_num = 0
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ
    photo_path = advertisement.photo_path[str(photo_num)]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    if not worker:
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–º–µ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    contact_exchange = await ContactExchange.get_by_worker_and_abs(worker.id, abs_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
    has_contacts = contact_exchange and contact_exchange.contacts_purchased
    customer_confirmed = contact_exchange and contact_exchange.contacts_sent and not contact_exchange.contacts_purchased
    waiting_confirmation = contact_exchange and not contact_exchange.contacts_sent and not contact_exchange.contacts_purchased
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç —á—Ç–æ –∏ –≤ view_my_response)
    from app.untils import help_defs
    text = f"üìã **–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{abs_id}**\n\n"
    text += help_defs.read_text_file(advertisement.text_path)
    text += "\n\n" + "=" * 30 + "\n\n"
    
    if has_contacts:
        # –ö–æ–Ω—Ç–∞–∫—Ç—ã —É–∂–µ –∫—É–ø–ª–µ–Ω—ã
        customer = await Customer.get_customer(id=advertisement.customer_id)
        text += "‚úÖ **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:**\n\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–∫–∞–∑—á–∏–∫–∞
        if customer.contact_type == "telegram_only":
            text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
            text += f"üÜî **ID:** {customer.tg_id}\n\n"
        elif customer.contact_type == "phone_only":
            text += f"üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** [{customer.phone_number}](tel:{customer.phone_number})\n\n"
        elif customer.contact_type == "both":
            text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
            text += f"üÜî **ID:** {customer.tg_id}\n"
            text += f"üìû **–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:** [{customer.phone_number}](tel:{customer.phone_number})\n\n"
        else:
            # Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Telegram –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
            text += f"üì± **Telegram:** [@{customer.tg_name}](tg://user?id={customer.tg_id})\n"
            text += f"üÜî **ID:** {customer.tg_id}\n\n"
        
        text += "üîí –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç"
    elif customer_confirmed:
        # –ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å
        text += "üí∞ **–ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–¥–∞—á—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤**\n\n"
        text += "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Ö –∫—É–ø–∏—Ç—å."
    elif waiting_confirmation:
        # –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞
        text += "‚è≥ **–°—Ç–∞—Ç—É—Å:** –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞\n\n"
        text += "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞.\n"
        text += "–ó–∞–∫–∞–∑—á–∏–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –∫–æ–Ω—Ç–∞–∫—Ç–∞.\n"
        text += "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç."
    else:
        # –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
        text += "üí¨ **–ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω**\n\n"
        text += "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç."
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–¥–∏–∞
    try:
        from aiogram.types import FSInputFile, InputMediaPhoto
        
        if 'https' in photo_path:
            await callback.message.edit_media(
                media=InputMediaPhoto(
                    media=photo_path,
                    caption=text),
                reply_markup=kbc.anonymous_chat_worker_buttons(
                    abs_id=abs_id,
                    has_contacts=has_contacts,
                    contacts_requested=customer_confirmed,
                    contacts_sent=waiting_confirmation,
                    count_photo=count_photo,
                    photo_num=photo_num
                )
            )
        else:
            await callback.message.edit_media(
                media=InputMediaPhoto(
                    media=FSInputFile(photo_path),
                    caption=text),
                reply_markup=kbc.anonymous_chat_worker_buttons(
                    abs_id=abs_id,
                    has_contacts=has_contacts,
                    contacts_requested=customer_confirmed,
                    contacts_sent=waiting_confirmation,
                    count_photo=count_photo,
                    photo_num=photo_num
                )
            )
    except Exception as e:
        logger.error(f"Error updating photo in navigate_photo_worker_response: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ", show_alert=True)
