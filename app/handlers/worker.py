import datetime
from datetime import timedelta, datetime
import logging
from functools import lru_cache
from typing import List, Optional

def get_activity_info_fallback(worker):
    """Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    activity_level = getattr(worker, 'activity_level', 100)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—É
    if activity_level >= 74:
        zone_emoji = "üü¢"
        zone_message = "–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –¥–æ—Å—Ç—É–ø –ø–æ–ª–Ω—ã–π"
        can_respond = True
        limit = -1
    elif activity_level >= 48:
        zone_emoji = "üü°"
        zone_message = "–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç—Å—è, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –º–æ–∂–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 3 –∑–∞–∫–∞–∑–∞ –≤ –¥–µ–Ω—å"
        can_respond = True  # –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –ø–æ responses_today
        limit = 3
    elif activity_level >= 9:
        zone_emoji = "üü†"
        zone_message = "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –º–æ–∂–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 1 –∑–∞–∫–∞–∑ –≤ –¥–µ–Ω—å"
        can_respond = True  # –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –ø–æ responses_today
        limit = 1
    else:
        zone_emoji = "üî¥"
        zone_message = "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤: –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!"
        can_respond = False
        limit = 0
    
    return zone_emoji, zone_message, can_respond, limit

async def update_worker_activity_fallback(worker, new_activity):
    """Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    if hasattr(worker, 'update_activity_level'):
        await worker.update_activity_level(new_activity)
    else:
        # Fallback: –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ SQL
        import aiosqlite
        conn = await aiosqlite.connect('app/data/database/database.db')
        try:
            cursor = await conn.execute(
                'UPDATE workers SET activity_level = ? WHERE id = ?',
                (new_activity, worker.id)
            )
            await conn.commit()
            await cursor.close()
            worker.activity_level = new_activity
        finally:
            await conn.close()

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest, TelegramEntityTooLarge
from aiogram.types import (
    CallbackQuery, Message, ReplyKeyboardRemove, LabeledPrice, PreCheckoutQuery, FSInputFile, InputMediaPhoto,
    InlineKeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

import config
import aiosqlite
from app.data.database.models import (
    Customer, Worker, City, SubscriptionType, WorkerAndSubscription, WorkType, Banned, Abs, WorkersAndAbs, Admin,
    WorkerAndRefsAssociation, WorkerAndReport, WorkerAndBadResponse, WorkerCitySubscription
)
from app.keyboards import KeyboardCollection
from app.states import WorkStates, UserStates, BannedStates
from app.untils import help_defs, checks, yandex_ocr
from loaders import bot

router = Router()
router.message.filter(F.from_user.id != F.bot.id)
logger = logging.getLogger()

# –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
_work_types_cache = None
_cache_timestamp = None
CACHE_DURATION = 300  # 5 –º–∏–Ω—É—Ç


async def check_worker_has_unlimited_contacts(worker_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º (–±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π).
    
    Args:
        worker_id: ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        from app.data.database.models import Worker
        worker = await Worker.get_worker(id=worker_id)
        
        if not worker:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
        if worker.unlimited_contacts_until:
            from datetime import datetime, timedelta
            try:
                end_date = datetime.strptime(worker.unlimited_contacts_until, "%Y-%m-%d")
                if end_date > datetime.now():
                    return True  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω
            except ValueError:
                pass  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        if worker.purchased_contacts > 0:
            return True  # –ï—Å—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        
        return False
    except Exception as e:
        logger.error(f"Error checking unlimited contacts for worker {worker_id}: {e}")
        return False


async def get_cached_work_types() -> List[WorkType]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç"""
    global _work_types_cache, _cache_timestamp

    current_time = datetime.now().timestamp()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
    if (_work_types_cache is None or
            _cache_timestamp is None or
            current_time - _cache_timestamp > CACHE_DURATION):
        _work_types_cache = await WorkType.get_all()
        _cache_timestamp = current_time
        logger.debug(f"Work types cache updated: {len(_work_types_cache)} items")

    return _work_types_cache


def clear_work_types_cache():
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç"""
    global _work_types_cache, _cache_timestamp
    _work_types_cache = None
    _cache_timestamp = None
    logger.debug("Work types cache cleared")


@router.callback_query(F.data == "registration_worker", WorkStates.worker_choose_work_types)
async def registration_new_worker(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'registration_new_worker...')
    kbc = KeyboardCollection()
    state_data = await state.get_data()
    city_id = int(state_data.get('city_id'))
    username = str(state_data.get('username'))

    registration_date = datetime.date.today().strftime("%d.%m.%Y")

    new_worker = Worker(tg_id=callback.message.chat.id,
                        city_id=[str(city_id)],
                        tg_name=username,
                        registration_data=registration_date,
                        confirmed=True)  # –£–±–∏—Ä–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é - —Å—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
    await new_worker.save()
    new_worker = await Worker.get_worker(tg_id=callback.message.chat.id)
    new_worker_and_subscription = WorkerAndSubscription(worker_id=new_worker.id)
    await new_worker_and_subscription.save()
    await callback.message.edit_text('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    await callback.message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç.',
                                  reply_markup=kbc.menu())
    await state.set_state(WorkStates.worker_choose_work_types)


@router.callback_query(F.data == "registration_worker", UserStates.registration_enter_city)
async def choose_city_main(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'choose_city_main...')
    kbc = KeyboardCollection()

    state_data = await state.get_data()
    username = str(state_data.get('username'))
    await state.set_state(WorkStates.registration_enter_city)
    await state.update_data(username=str(username))

    cities = await City.get_all()
    city_names = [city.city for city in cities]
    city_ids = [city.id for city in cities]
    count_cities = len(city_names)
    id_now = 0

    btn_next = True if len(city_names) > 5 else False

    city_names, city_ids = help_defs.get_obj_name_and_id_for_btn(names=city_names, ids=city_ids,
                                                                 id_now=id_now)

    msg = await callback.message.edit_text(
        text=f'–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º\n\n'
             f'–ü–æ–∫–∞–∑–∞–Ω–æ {id_now + len(city_names)} –∏–∑ {count_cities} –≥–æ—Ä–æ–¥–æ–≤',
        reply_markup=kbc.choose_obj(id_now=id_now, ids=city_ids, names=city_names,
                                    btn_next=btn_next, btn_back=False)
    )
    await state.update_data(msg_id=msg.message_id)


@router.message(F.text, WorkStates.registration_enter_city)
async def choose_city_main(message: Message, state: FSMContext) -> None:
    logger.debug(f'choose_city_main...')
    kbc = KeyboardCollection()

    city_input = message.text

    state_data = await state.get_data()

    msg_id = int(state_data.get('msg_id'))

    cities = await City.get_all(sort=False)
    city_names = [city.city for city in cities]

    city_find = await checks.levenshtein_distance_check_city(phrase=city_input, words=city_names)
    if not city_find:
        await message.answer(text=f'–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏')
        return

    cities = []

    for city_id in city_find:
        city = await City.get_city(id=city_id)
        cities.append(city)

    city_names = [city.city for city in cities]
    city_ids = [city.id for city in cities]

    msg = await message.answer(
        text=f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ: {city_input}\n'
             f'–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º\n\n',
        reply_markup=kbc.choose_obj(id_now=0, ids=city_ids, names=city_names,
                                    btn_next=True, btn_back=False, btn_next_name='–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞'))
    await state.update_data(msg_id=msg.message_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)


@router.callback_query(lambda c: c.data.startswith('go_'), WorkStates.registration_enter_city)
async def choose_city_next(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'choose_city_next...')
    kbc = KeyboardCollection()
    cities = await City.get_all()
    city_names = [city.city for city in cities]
    city_ids = [city.id for city in cities]
    count_cities = len(city_names)

    id_now = int(callback.data.split('_')[1])

    btn_next = True if len(city_names) > 5 + id_now else False
    btn_back = True if id_now >= 5 else False

    city_names, city_ids = help_defs.get_obj_name_and_id_for_btn(names=city_names, ids=city_ids,
                                                                 id_now=id_now)

    try:
        msg = await callback.message.edit_text(
            text=f'–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º\n\n'
                 f'–ü–æ–∫–∞–∑–∞–Ω–æ {id_now + len(city_names)} –∏–∑ {count_cities} –≥–æ—Ä–æ–¥–æ–≤',
            reply_markup=kbc.choose_obj(id_now=id_now, ids=city_ids, names=city_names,
                                        btn_next=btn_next, btn_back=btn_back))
        await state.update_data(msg_id=msg.message_id)
    except TelegramBadRequest:
        pass


@router.callback_query(lambda c: c.data.startswith('obj-id_'), WorkStates.registration_enter_city)
async def choose_city_end(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'choose_city_end...')

    kbc = KeyboardCollection()

    state_data = await state.get_data()
    username = str(state_data.get('username'))

    city_id = int(callback.data.split('_')[1])

    registration_date = datetime.date.today().strftime("%d.%m.%Y")

    new_worker = Worker(tg_id=callback.message.chat.id,
                        city_id=[city_id],
                        tg_name=username,
                        registration_data=registration_date,
                        stars=5)

    await new_worker.save()
    new_worker = await Worker.get_worker(tg_id=callback.message.chat.id)

    new_worker_and_subscription = WorkerAndSubscription(worker_id=new_worker.id)

    await new_worker_and_subscription.save()
    await callback.message.edit_text('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    await callback.message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç.',
                                  reply_markup=kbc.menu())
    await state.set_state(WorkStates.worker_choose_work_types)


# –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó


async def show_worker_menu_for_message(message: Message, state: FSMContext, user_worker: 'Worker') -> None:
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–¥–ª—è Message)"""
    kbc = KeyboardCollection()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    from app.data.database.models import WorkerRank, WorkerStatus, ContactExchange, WorkerCitySubscription
    import aiosqlite
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=user_worker.id)
    
    # –†–∞–Ω–≥
    worker_rank = await WorkerRank.get_or_create_rank(user_worker.id)
    rank_name = worker_rank.get_rank_name()
    rank_emoji = worker_rank.get_rank_emoji()
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    activity_level = user_worker.activity_level if hasattr(user_worker, 'activity_level') else 100
    activity_emoji = "üî•" if activity_level >= 80 else "‚ö°" if activity_level >= 50 else "üí§"
    
    # –°—Ç–∞—Ç—É—Å (–ò–ü/–û–û–û/–°–ó)
    worker_status_obj = await WorkerStatus.get_by_worker(user_worker.id)
    if worker_status_obj and (worker_status_obj.has_ip or worker_status_obj.has_ooo or worker_status_obj.has_sz):
        if worker_status_obj.has_ip:
            status_text = "–ò–ü ‚úÖ"
        elif worker_status_obj.has_ooo:
            status_text = "–û–û–û ‚úÖ"
        else:
            status_text = "–°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å ‚úÖ"
    else:
        status_text = "–°—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚ö†Ô∏è"
    
    # –ì–æ—Ä–æ–¥ –∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    main_city = await City.get_city(id=user_worker.city_id[0])
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø–æ–¥–ø–∏—Å–∫–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ) –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    conn = await aiosqlite.connect(database='app/data/database/database.db')
    try:
        cursor = await conn.execute(
            'SELECT city_ids, active, price FROM worker_city_subscriptions WHERE worker_id = ?',
            [user_worker.id])
        all_subscriptions = await cursor.fetchall()
        await cursor.close()
    finally:
        await conn.close()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    total_purchased_cities = 1  # –û—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥
    total_selected_cities = 1   # –û—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥
    
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    prices = {90: 1, 180: 2, 270: 3, 360: 4, 450: 5, 900: 10, 1800: 20}
    
    for sub_data in all_subscriptions:
        city_ids_str = sub_data[0]
        is_active = bool(sub_data[1])
        price = sub_data[2]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ö–£–ü–õ–ï–ù–ù–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ —Ü–µ–Ω–µ
        purchased_count = prices.get(price, 1)
        total_purchased_cities += purchased_count
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –í–´–ë–†–ê–ù–ù–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤
        if city_ids_str:
            selected_count = len(city_ids_str.split('|'))
            if is_active:
                total_selected_cities += selected_count
    
    if total_selected_cities == 1:
        city_text = f"–í–∞—à –≥–æ—Ä–æ–¥: {main_city.city}"
    else:
        additional = total_selected_cities - 1
        city_text = f"–í–∞—à –≥–æ—Ä–æ–¥: {main_city.city} +{additional} {'–≥–æ—Ä–æ–¥' if additional == 1 else '–≥–æ—Ä–æ–¥–∞' if additional < 5 else '–≥–æ—Ä–æ–¥–æ–≤'}"
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    contacts_purchased = await ContactExchange.count_by_worker(user_worker.id)
    
    # –†–µ–π—Ç–∏–Ω–≥
    if user_worker.count_ratings > 0:
        rating = round(user_worker.stars / user_worker.count_ratings, 1)
        rating_text = f"–†–µ–π—Ç–∏–Ω–≥: {rating} ‚≠ê ({user_worker.count_ratings} {'–æ—Ü–µ–Ω–∫–∞' if user_worker.count_ratings == 1 else '–æ—Ü–µ–Ω–∫–∏' if user_worker.count_ratings < 5 else '–æ—Ü–µ–Ω–æ–∫'})"
    else:
        rating_text = f"–†–µ–π—Ç–∏–Ω–≥: 0 ‚≠ê (0 –æ—Ü–µ–Ω–æ–∫)"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    text = f"**–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
    text += f"ID: {user_worker.id} {user_worker.profile_name}\n"
    text += f"{rating_text}\n"
    text += f"–†–∞–Ω–≥: {rank_name} {rank_emoji}\n"
    text += f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_level} {activity_emoji}\n"
    text += f"{status_text}\n"
    text += f"{city_text}\n\n"
    text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {contacts_purchased}\n"
    
    # –ï—Å–ª–∏ –∫—É–ø–∏–ª –±–æ–ª—å—à–µ –≥–æ—Ä–æ–¥–æ–≤, —á–µ–º –≤—ã–±—Ä–∞–ª - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
    if total_purchased_cities > total_selected_cities:
        not_selected = total_purchased_cities - total_selected_cities
        text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤: {total_selected_cities} (–Ω–µ –≤—ã–±—Ä–∞–Ω–æ: {not_selected})\n"
    else:
        text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤: {total_selected_cities}\n"
    
    text += f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {user_worker.order_count}\n"
    text += f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_worker.registration_data}"

    choose_works = True if worker_sub.unlimited_work_types else False

    profile_name = True if user_worker.profile_name else False
    
    # has_status —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤—ã—à–µ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
    has_status = False
    if worker_status_obj:
        has_status = worker_status_obj.has_ip or worker_status_obj.has_ooo or worker_status_obj.has_sz

    if user_worker.profile_photo:
        await message.answer_photo(
            photo=FSInputFile(user_worker.profile_photo),
            caption=text,
            reply_markup=kbc.menu_worker_keyboard(
                confirmed=True,  # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞
                choose_works=choose_works,
                individual_entrepreneur=user_worker.individual_entrepreneur,
                create_photo=False,
                create_name=profile_name,
                has_status=has_status
            ),
            parse_mode='Markdown'
        )
    else:
        await message.answer(
            text=text,
            reply_markup=kbc.menu_worker_keyboard(
                confirmed=True,  # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞
                choose_works=choose_works,
                individual_entrepreneur=user_worker.individual_entrepreneur,
                create_photo=True,
                create_name=profile_name,
                has_status=has_status
            ),
            parse_mode='Markdown'
        )
    await state.set_state(WorkStates.worker_menu)


async def show_worker_menu(callback: CallbackQuery, state: FSMContext, user_worker: 'Worker') -> None:
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–¥–ª—è CallbackQuery)"""
    kbc = KeyboardCollection()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    from app.data.database.models import WorkerRank, WorkerStatus, ContactExchange, WorkerCitySubscription
    import aiosqlite
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=user_worker.id)
    
    # –†–∞–Ω–≥
    worker_rank = await WorkerRank.get_or_create_rank(user_worker.id)
    rank_name = worker_rank.get_rank_name()
    rank_emoji = worker_rank.get_rank_emoji()
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    activity_level = user_worker.activity_level if hasattr(user_worker, 'activity_level') else 100
    activity_emoji = "üî•" if activity_level >= 80 else "‚ö°" if activity_level >= 50 else "üí§"
    
    # –°—Ç–∞—Ç—É—Å (–ò–ü/–û–û–û/–°–ó)
    worker_status_obj = await WorkerStatus.get_by_worker(user_worker.id)
    if worker_status_obj and (worker_status_obj.has_ip or worker_status_obj.has_ooo or worker_status_obj.has_sz):
        if worker_status_obj.has_ip:
            status_text = "–ò–ü ‚úÖ"
        elif worker_status_obj.has_ooo:
            status_text = "–û–û–û ‚úÖ"
        else:
            status_text = "–°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å ‚úÖ"
    else:
        status_text = "–°—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚ö†Ô∏è"
    
    # –ì–æ—Ä–æ–¥ –∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    main_city = await City.get_city(id=user_worker.city_id[0])
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø–æ–¥–ø–∏—Å–∫–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ) –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    conn = await aiosqlite.connect(database='app/data/database/database.db')
    try:
        cursor = await conn.execute(
            'SELECT city_ids, active, price FROM worker_city_subscriptions WHERE worker_id = ?',
            [user_worker.id])
        all_subscriptions = await cursor.fetchall()
        await cursor.close()
    finally:
        await conn.close()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    total_purchased_cities = 1  # –û—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥
    total_selected_cities = 1   # –û—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥
    
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    prices = {90: 1, 180: 2, 270: 3, 360: 4, 450: 5, 900: 10, 1800: 20}
    
    for sub_data in all_subscriptions:
        city_ids_str = sub_data[0]
        is_active = bool(sub_data[1])
        price = sub_data[2]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ö–£–ü–õ–ï–ù–ù–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ —Ü–µ–Ω–µ
        purchased_count = prices.get(price, 1)
        total_purchased_cities += purchased_count
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –í–´–ë–†–ê–ù–ù–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤
        if city_ids_str:
            selected_count = len(city_ids_str.split('|'))
            if is_active:
                total_selected_cities += selected_count
    
    if total_selected_cities == 1:
        city_text = f"–í–∞—à –≥–æ—Ä–æ–¥: {main_city.city}"
    else:
        additional = total_selected_cities - 1
        city_text = f"–í–∞—à –≥–æ—Ä–æ–¥: {main_city.city} +{additional} {'–≥–æ—Ä–æ–¥' if additional == 1 else '–≥–æ—Ä–æ–¥–∞' if additional < 5 else '–≥–æ—Ä–æ–¥–æ–≤'}"
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    contacts_purchased = await ContactExchange.count_by_worker(user_worker.id)
    
    # –†–µ–π—Ç–∏–Ω–≥
    if user_worker.count_ratings > 0:
        rating = round(user_worker.stars / user_worker.count_ratings, 1)
        rating_text = f"–†–µ–π—Ç–∏–Ω–≥: {rating} ‚≠ê ({user_worker.count_ratings} {'–æ—Ü–µ–Ω–∫–∞' if user_worker.count_ratings == 1 else '–æ—Ü–µ–Ω–∫–∏' if user_worker.count_ratings < 5 else '–æ—Ü–µ–Ω–æ–∫'})"
    else:
        rating_text = f"–†–µ–π—Ç–∏–Ω–≥: 0 ‚≠ê (0 –æ—Ü–µ–Ω–æ–∫)"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    text = f"**–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
    text += f"ID: {user_worker.id} {user_worker.profile_name}\n"
    text += f"{rating_text}\n"
    text += f"–†–∞–Ω–≥: {rank_name} {rank_emoji}\n"
    text += f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_level} {activity_emoji}\n"
    text += f"{status_text}\n"
    text += f"{city_text}\n\n"
    text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {contacts_purchased}\n"
    
    # –ï—Å–ª–∏ –∫—É–ø–∏–ª –±–æ–ª—å—à–µ –≥–æ—Ä–æ–¥–æ–≤, —á–µ–º –≤—ã–±—Ä–∞–ª - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
    if total_purchased_cities > total_selected_cities:
        not_selected = total_purchased_cities - total_selected_cities
        text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤: {total_selected_cities} (–Ω–µ –≤—ã–±—Ä–∞–Ω–æ: {not_selected})\n"
    else:
        text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤: {total_selected_cities}\n"
    
    text += f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {user_worker.order_count}\n"
    text += f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_worker.registration_data}"

    choose_works = True if worker_sub.unlimited_work_types else False

    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass

    profile_name = True if user_worker.profile_name else False
    
    # has_status —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤—ã—à–µ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
    has_status = False
    if worker_status_obj:
        has_status = worker_status_obj.has_ip or worker_status_obj.has_ooo or worker_status_obj.has_sz

    if user_worker.profile_photo:
        await callback.message.answer_photo(
            photo=FSInputFile(user_worker.profile_photo),
            caption=text,
            reply_markup=kbc.menu_worker_keyboard(
                confirmed=True,  # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞
                choose_works=choose_works,
                individual_entrepreneur=user_worker.individual_entrepreneur,
                create_photo=False,
                create_name=profile_name,
                has_status=has_status
            ),
            parse_mode='Markdown'
        )
    else:
        await callback.message.answer(
            text=text,
            reply_markup=kbc.menu_worker_keyboard(
                confirmed=True,  # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞
                choose_works=choose_works,
                individual_entrepreneur=user_worker.individual_entrepreneur,
                create_photo=True,
                create_name=profile_name,
                has_status=has_status
            ),
            parse_mode='Markdown'
        )
    await state.set_state(WorkStates.worker_menu)


@router.callback_query(F.data == "worker_menu")
async def menu_worker(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'menu_worker...')
    kbc = KeyboardCollection()
    if user_baned := await Banned.get_banned(tg_id=callback.message.chat.id):
        if user_baned.ban_now or user_baned.forever:
            await callback.message.answer(text='–£–ø—Å, –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
            await state.set_state(BannedStates.banned)
            return
    user_worker = await Worker.get_worker(tg_id=callback.message.chat.id)
    if not user_worker:
        await (callback.message.edit_text(
            text=f'''–£–ø—Å, –≤—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å''',
            reply_markup=kbc.registration_worker(),
        ))
        if customer := await Customer.get_customer(tg_id=callback.message.chat.id):
            await state.set_state(WorkStates.worker_choose_work_types)
            await state.update_data(city_id=str(customer.city_id), username=str(customer.tg_name))
            return
        await state.set_state(UserStates.registration_enter_city)
        if admin := await Admin.get_by_tg_id(tg_id=callback.message.chat.id):
            await state.update_data(username=str(admin.tg_name))
        return

    if not user_worker.active:
        await user_worker.update_active(active=True)

    if not user_worker.profile_name:
        text = f'–ü–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è'
        await state.set_state(WorkStates.create_name_profile)
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass

        msg = await callback.message.answer(
            text=text
        )
        await state.update_data(msg_id=msg.message_id)
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
    await show_worker_menu(callback, state, user_worker)


@router.callback_query(F.data == "menu", StateFilter(WorkStates.worker_menu, WorkStates.worker_check_abs,
                                                     WorkStates.worker_check_subscription,
                                                     WorkStates.worker_change_city,
                                                     WorkStates.worker_choose_city,
                                                     WorkStates.worker_change_main_city,
                                                     WorkStates.create_portfolio, WorkStates.create_name_profile,
                                                     WorkStates.create_photo_profile,
                                                     WorkStates.portfolio_upload_photo,
                                                     WorkStates.worker_choose_work_types))
async def menu_worker(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'menu_worker...')
    kbc = KeyboardCollection()
    if user_baned := await Banned.get_banned(tg_id=callback.message.chat.id):
        if user_baned.ban_now or user_baned.forever:
            await callback.message.answer(text='–£–ø—Å, –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
            await state.set_state(BannedStates.banned)
            return
    user_worker = await Worker.get_worker(tg_id=callback.message.chat.id)

    if not user_worker:

        await (callback.message.edit_text(
            text=f'''–£–ø—Å, –≤—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å''',
            reply_markup=kbc.registration_worker(),
        ))

        if customer := await Customer.get_customer(tg_id=callback.message.chat.id):
            await state.set_state(UserStates.registration_end)
            await state.update_data(city_id=str(customer.city_id), username=str(customer.tg_name))
            return

        await state.set_state(WorkStates.registration_enter_city)
        return

    if not user_worker.active:
        await user_worker.update_active(active=True)

    if not user_worker.profile_name:
        text = f'–ü–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è'
        await state.set_state(WorkStates.create_name_profile)
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass

        msg = await callback.message.answer(
            text=text
        )
        await state.update_data(msg_id=msg.message_id)
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
    await show_worker_menu(callback, state, user_worker)


@router.callback_query(F.data == "my_portfolio", WorkStates.worker_menu)
async def my_portfolio(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'my_portfolio...')

    kbc = KeyboardCollection()

    worker = await Worker.get_worker(tg_id=callback.message.chat.id)

    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass

    if worker.portfolio_photo:

        photo_len = len(worker.portfolio_photo)
        logger.debug(f'my_portfolio...{photo_len}')

        await callback.message.answer_photo(
            photo=FSInputFile(worker.portfolio_photo['0']),
            reply_markup=kbc.my_portfolio(
                photo_len=photo_len,
                new_photo=True if photo_len < 10 else False
            )
        )
    else:
        await callback.message.answer(
            text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ',
            reply_markup=kbc.my_portfolio()
        )

    await state.set_state(WorkStates.create_portfolio)


@router.callback_query(lambda c: c.data.startswith("go-to-portfolio_"), WorkStates.create_portfolio)
async def my_portfolio(callback: CallbackQuery) -> None:
    logger.debug(f'my_portfolio...')
    kbc = KeyboardCollection()

    photo_id = int(callback.data.split('_')[1])

    worker = await Worker.get_worker(tg_id=callback.message.chat.id)

    photo_len = len(worker.portfolio_photo)

    if photo_id <= -1:
        photo_id = photo_len - 1
    elif photo_id > (photo_len - 1):
        photo_id = 0

    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile(worker.portfolio_photo[str(photo_id)])),
        reply_markup=kbc.my_portfolio(
            photo_num=photo_id,
            photo_len=photo_len,
            new_photo=True if photo_len < 10 else False
        )
    )


@router.callback_query(lambda c: c.data.startswith("delite-photo-portfolio_"), WorkStates.create_portfolio)
async def my_portfolio(callback: CallbackQuery) -> None:
    logger.debug(f'my_portfolio...')
    kbc = KeyboardCollection()

    photo_id = int(callback.data.split('_')[1])
    worker = await Worker.get_worker(tg_id=callback.message.chat.id)

    # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∏ –ø–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    new_portfolio, removed_file_path = help_defs.reorder_dict(d=worker.portfolio_photo, removed_key=str(photo_id))
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
    if removed_file_path:
        file_deleted = help_defs.delete_file(removed_file_path)
        if file_deleted:
            logger.info(f"–§–æ—Ç–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —É–¥–∞–ª–µ–Ω–æ: {removed_file_path}")
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {removed_file_path}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await worker.update_portfolio_photo(new_portfolio)
    photo_len = len(new_portfolio)

    if photo_len == 0:
        await callback.message.answer(
            text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ',
            reply_markup=kbc.my_portfolio()
        )
        return

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º photo_id –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if photo_id <= -1:
        photo_id = photo_len - 1
    elif photo_id > (photo_len - 1):
        photo_id = 0

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile(new_portfolio[str(photo_id)])),
        reply_markup=kbc.my_portfolio(
            photo_num=photo_id,
            photo_len=photo_len,
            new_photo=True if photo_len < 10 else False
        )
    )


@router.callback_query(F.data == "upload_photo", WorkStates.create_portfolio)
async def upload_photo(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'upload_photo...')
    kbc = KeyboardCollection()

    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass

    text = f'–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ'

    msg = await callback.message.answer(
        text=text, reply_markup=kbc.menu()
    )

    await callback.answer(
        text=f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ 10 —Ñ–æ—Ç–æ.\n"
             f"–ù–∞ —Ñ–æ—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–¥–ø–∏—Å–µ–π, —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç - –∏—Ö —Å–ª–µ–¥—É–µ—Ç –∑–∞–º–∞–∑–∞—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π.\n"
             f"–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!\n",
        show_alert=True
    )

    await state.set_state(WorkStates.portfolio_upload_photo)
    await state.update_data(msg=msg.message_id)


@router.message(F.photo, WorkStates.portfolio_upload_photo)
async def upload_photo_portfolio(message: Message, state: FSMContext) -> None:
    logger.debug(f'upload_photo_portfolio...')

    kbc = KeyboardCollection()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    album = data.get('album', [])

    if len(album) == 10:
        msg = str(data.get('msg'))
        try:
            await bot.delete_message(chat_id=message.from_user.id, message_id=msg)
            msg = await message.answer(text='–ë–æ–ª—å—à–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–ª—å–∑—è\n–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É',
                                       reply_markup=kbc.done_btn())
            await state.update_data(msg=msg.message_id)
        except TelegramBadRequest:
            pass
        return

    album.append(message)
    await state.update_data(album=album)
    msg = str(data.get('msg'))
    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=msg)
        msg = await message.answer(text='–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É', reply_markup=kbc.done_btn())
        await state.update_data(msg=msg.message_id)
    except TelegramBadRequest:
        pass

    if len(album) < 10:
        return

    if len(album) > 10:
        return


@router.callback_query(F.data == 'skip_it_photo', WorkStates.portfolio_upload_photo)
async def create_abs_no_photo(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'create_abs_with_photo_end...')

    kbc = KeyboardCollection()
    state_data = await state.get_data()

    msg = str(state_data.get('msg'))
    album = state_data.get('album', [])

    await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg)
    msg = await callback.message.answer(text='–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞')

    photos = {}
    photo_len = len(album)

    worker = await Worker.get_worker(tg_id=callback.message.chat.id)

    portfolio_len = 0

    if worker.portfolio_photo:
        portfolio_len = len(worker.portfolio_photo)

    for i, obj in enumerate(album):
        if obj.photo:
            file_id = obj.photo[-1].file_id
        else:
            file_id = obj[obj.content_type].file_id

        file_path, _ = await help_defs.save_photo_var(id=callback.message.chat.id, n=portfolio_len + i)
        file_path_photo = f'{file_path}{portfolio_len + i}.jpg'
        await bot.download(file=file_id, destination=file_path_photo)
        text_photo = yandex_ocr.analyze_file(file_path_photo)

        if text_photo:
            if await checks.fool_check(text=text_photo):
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg.message_id)
                await callback.message.answer(text='–ù–∞ —Ñ–æ—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–µ–∫—Å—Ç!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
                await state.clear()
                await state.set_state(WorkStates.portfolio_upload_photo)
                return

        print(file_path_photo)

        help_defs.add_watermark(file_path_photo)
        photos[str(portfolio_len + i)] = file_path_photo

    if worker.portfolio_photo:
        worker.portfolio_photo = worker.portfolio_photo | photos
        photo_len = len(worker.portfolio_photo)
    else:
        worker.portfolio_photo = photos

    await worker.update_portfolio_photo(portfolio_photo=worker.portfolio_photo)

    await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg.message_id)

    await callback.message.answer_photo(
        photo=FSInputFile(worker.portfolio_photo['0']),
        reply_markup=kbc.my_portfolio(
            photo_len=photo_len,
            new_photo=True if photo_len < 10 else False
        )
    )
    await state.set_state(WorkStates.create_portfolio)


@router.callback_query(F.data == "create_photo_profile", WorkStates.worker_menu)
async def create_photo_profile(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'create_photo_profile...')
    kbc = KeyboardCollection()
    worker = await Worker.get_worker(tg_id=callback.message.chat.id)

    text = f'–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ'

    is_photo = True if worker.profile_photo else False

    msg = await callback.message.answer(
        text=text, reply_markup=kbc.photo_work_keyboard(is_photo=is_photo)
    )
    if not is_photo:
        await callback.answer(
            text=f"–ù–∞ —Å–Ω–∏–º–∫–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –≤–∞—à–µ –ª–∏—Ü–æ;\n\n"
                 f"–í –∫–∞–¥—Ä–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π.\n–°–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ‚Äî –í—ã!",
            show_alert=True
        )
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass
    await state.set_state(WorkStates.create_photo_profile)
    await state.update_data(msg_id=msg.message_id)


@router.callback_query(lambda c: c.data.startswith('photo_delite'))
async def block_photo_profile(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'block_photo_profile...')

    kbc = KeyboardCollection()

    worker = await Worker.get_worker(tg_id=callback.message.chat.id)
    await worker.update_profile_photo(profile_photo=None)
    await callback.message.delete_reply_markup()

    await state.set_state(WorkStates.worker_menu)
    await callback.message.delete()
    msg = await callback.message.answer(text=f'–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É–¥–∞–ª–µ–Ω–æ!', reply_markup=kbc.menu())
    await state.update_data(worker_id=worker.tg_id, msg_id=msg.message_id)


@router.message(F.photo, WorkStates.create_photo_profile)
async def process_photos(message: Message, state: FSMContext):
    logger.debug(f"process_photos")

    kbc = KeyboardCollection()

    photo = message.photo[-1].file_id
    file_path_photo = await help_defs.save_photo(id=message.from_user.id)
    await bot.download(file=photo, destination=file_path_photo)

    worker = await Worker.get_worker(tg_id=message.chat.id)

    text_photo = yandex_ocr.analyze_file(file_path_photo)
    logger.info(f'{text_photo}')
    if text_photo:
        if await checks.fool_check(text=text_photo):
            is_photo = True if worker.profile_photo else False
            await message.answer(
                text='–£–ø—Å, –ø–æ—Ö–æ–∂–µ –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞ üòå',
                reply_markup=kbc.photo_work_keyboard(is_photo=is_photo))
            return
        if checks.contains_invalid_chars(text=text_photo):
            is_photo = True if worker.profile_photo else False
            await message.answer(
                text='–£–ø—Å, –ø–æ—Ö–æ–∂–µ –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞ üòå',
                reply_markup=kbc.photo_work_keyboard(is_photo=is_photo))
            return

    await worker.update_profile_photo(profile_photo=file_path_photo)

    await state.set_state(WorkStates.worker_menu)

    await message.answer(text='–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!', reply_markup=kbc.menu_btn())

    await bot.send_photo(chat_id=config.ADVERTISEMENT_LOG,
                         caption=f'ID #{message.chat.id}\n–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è',
                         photo=FSInputFile(file_path_photo),
                         protect_content=False, reply_markup=kbc.delite_it_photo(worker_id=worker.id))


@router.callback_query(F.data == "add_worker_name", WorkStates.worker_menu)
async def add_worker_name(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'create_photo_profile...')
    kbc = KeyboardCollection()

    text = f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è'

    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass

    msg = await callback.message.answer(
        text=text, reply_markup=kbc.photo_name_keyboard()
    )
    await state.set_state(WorkStates.create_name_profile)
    await state.update_data(msg_id=msg.message_id)


@router.message(F.text, WorkStates.create_name_profile)
async def process_photos(message: Message, state: FSMContext):
    logger.debug(f"process_photos")

    kbc = KeyboardCollection()

    state_data = await state.get_data()
    msg_id = state_data.get('msg_id')

    name = message.text

    if await checks.fool_check(name):
        text = f'–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è –í—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–≤–æ–µ –∏–º—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑.'

        msg = await message.answer(
            text=text
        )
        await state.update_data(msg_id=msg.message_id)
        await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        return

    worker = await Worker.get_worker(tg_id=message.chat.id)
    await worker.update_profile_name(profile_name=name)

    await state.set_state(WorkStates.worker_menu)

    await message.answer(text='–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!', reply_markup=kbc.menu_btn())
    await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)


# –°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ò–ü —É–¥–∞–ª–µ–Ω—ã - –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤


@router.callback_query(F.data == 'look-abs-in-city', WorkStates.worker_menu)
async def abs_in_city(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'my_abs...')
    kbc = KeyboardCollection()

    worker = await Worker.get_worker(tg_id=callback.message.chat.id)
    worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–æ—Å–Ω–æ–≤–Ω–æ–π + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫)
    all_city_ids = list(worker.city_id)  # –û—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    from app.data.database.models import WorkerCitySubscription
    city_subscriptions = await WorkerCitySubscription.get_active_by_worker(worker.id)
    for subscription in city_subscriptions:
        all_city_ids.extend(subscription.city_ids)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    all_city_ids = list(set(all_city_ids))
    
    advertisements = []
    for city_id in all_city_ids:
        advertisements_temp = await Abs.get_all_in_city(city_id=city_id)
        if advertisements_temp:
            advertisements += advertisements_temp
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏, —Ç–∞–∫ –∫–∞–∫ ID –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–π)
    advertisements.sort(key=lambda x: x.id, reverse=True)

    bad_abs = []

    worker_and_reports = await WorkerAndReport.get_by_worker(worker_id=worker.id)
    worker_and_bad_responses = await WorkerAndBadResponse.get_by_worker(worker_id=worker.id)
    worker_and_abs = await WorkersAndAbs.get_by_worker(worker_id=worker.id)

    # –°–æ–±–∏—Ä–∞–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
    if worker_and_reports:
        bad_abs += [worker_and_report.abs_id for worker_and_report in worker_and_reports]
    if worker_and_bad_responses:
        bad_abs += [worker_and_bad_response.abs_id for worker_and_bad_response in worker_and_bad_responses]
    if worker_and_abs:
        bad_abs += [response.abs_id for response in worker_and_abs]
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    bad_abs = set(bad_abs)
    print(f"[ABS_FILTER] Worker {worker.id} bad_abs: {bad_abs}")

    advertisements_final = []

    if not advertisements:
        await callback.message.answer(text='–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π', reply_markup=kbc.menu())
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass
        await state.set_state(WorkStates.worker_menu)
        return

    for advertisement in advertisements:
        customer = await Customer.get_customer(id=advertisement.customer_id)
        if customer.tg_id == worker.tg_id:
            print(f"[ABS_FILTER] Skipping own ad: {advertisement.id}")
            continue
        if advertisement.id in bad_abs:
            print(f"[ABS_FILTER] Skipping already responded ad: {advertisement.id}")
            continue
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç—ã
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –Ω–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not worker_sub.work_type_ids and not worker_sub.unlimited_work_types:
            continue
            
        is_unlimited = (worker_sub.unlimited_work_types or 
                       (len(worker_sub.work_type_ids) == 1 and worker_sub.work_type_ids[0] == '0'))
        
        if is_unlimited or (worker_sub.work_type_ids and str(advertisement.work_type_id) in worker_sub.work_type_ids):
                if advertisement.relevance:
                    advertisements_final.append(advertisement)
        elif worker_sub.unlimited_work_types:
            logger.debug(f'worker_sub.unlimited_work_types')
            if advertisement.relevance:
                advertisements_final.append(advertisement)
        else:
            logger.debug(f'no one')

    print(f"[ABS_FILTER] Total ads found: {len(advertisements)}, after filtering: {len(advertisements_final)}")
    
    if not advertisements_final:
        await callback.message.answer(text='–ü–æ –≤–∞—à–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º, –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π',
                                      reply_markup=kbc.menu())
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass
        await state.set_state(WorkStates.worker_menu)
        return

    await state.set_state(WorkStates.worker_check_abs)

    abs_now: Abs = advertisements_final[0]
    await abs_now.update(views=1)
    if len(advertisements_final) > 1:
        btn_next = True
    else:
        btn_next = False

    btn_back = False  # –í –ø–µ—Ä–≤–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–µ –Ω—É–∂–Ω–∞

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É–±—Ä–∞–Ω–∞ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª–∏–∫–æ–≤

    text = help_defs.read_text_file(abs_now.text_path)


    text = f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ {abs_now.id}\n\n' + text

    if abs_now.photo_path:
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass
        if 'https' in abs_now.photo_path['0']:
            await callback.message.answer(text=text,
                                          reply_markup=kbc.advertisement_response_buttons(abs_id=abs_now.id, btn_next=btn_next, btn_back=btn_back, abs_list_id=0))
            return
        await callback.message.answer_photo(photo=FSInputFile(abs_now.photo_path['0']), caption=text,
                                            reply_markup=kbc.advertisement_response_buttons(abs_id=abs_now.id, btn_next=btn_next, btn_back=btn_back, abs_list_id=0))
        return
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass
    await callback.message.answer(text=text, reply_markup=kbc.advertisement_response_buttons(abs_id=abs_now.id, btn_next=btn_next, btn_back=btn_back, abs_list_id=0))


@router.callback_query(lambda c: c.data.startswith('go_worker_'), WorkStates.worker_check_abs)
async def check_abs_navigation(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    logger.debug(f'check_abs_navigation...')
    kbc = KeyboardCollection()
    abs_list_id = int(callback.data.split('_')[2])

    worker = await Worker.get_worker(tg_id=callback.message.chat.id)
    worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–æ—Å–Ω–æ–≤–Ω–æ–π + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫)
    all_city_ids = list(worker.city_id)  # –û—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    from app.data.database.models import WorkerCitySubscription
    city_subscriptions = await WorkerCitySubscription.get_active_by_worker(worker.id)
    for subscription in city_subscriptions:
        all_city_ids.extend(subscription.city_ids)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    all_city_ids = list(set(all_city_ids))
    
    advertisements = []
    for city_id in all_city_ids:
        advertisements_temp = await Abs.get_all_in_city(city_id=city_id)
        if advertisements_temp:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ None
            advertisements += advertisements_temp
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –ø–µ—Ä–≤—ã–º–∏)
    advertisements.sort(key=lambda x: x.id, reverse=True)

    advertisements_final = []

    if not advertisements:
        await callback.message.edit_text(text='–£ –≤–∞—Å –≤ –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π', reply_markup=kbc.menu())
        await state.set_state(WorkStates.worker_menu)
        return

    for advertisement in advertisements:
        customer = await Customer.get_customer(id=advertisement.customer_id)
        if customer.tg_id == worker.tg_id:
            continue
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è –ª–∏ —É–∂–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        if await WorkersAndAbs.get_by_worker_and_abs(worker_id=worker.id, abs_id=advertisement.id):
            continue
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç—ã
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –Ω–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not worker_sub.work_type_ids and not worker_sub.unlimited_work_types:
            continue
            
        is_unlimited = (worker_sub.unlimited_work_types or 
                       (len(worker_sub.work_type_ids) == 1 and worker_sub.work_type_ids[0] == '0'))
        
        if is_unlimited or (worker_sub.work_type_ids and advertisement.work_type_id in worker_sub.work_type_ids):
            advertisements_final.append(advertisement)

    if not advertisements_final or abs_list_id >= len(advertisements_final):
        await callback.message.edit_text(text='–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', reply_markup=kbc.menu())
        await state.set_state(WorkStates.worker_menu)
        return

    advertisement_now = advertisements_final[abs_list_id]

    btn_next = True if (len(advertisements_final) - 1 > abs_list_id) else False
    btn_back = True if abs_list_id > 0 else False

    if await WorkersAndAbs.get_by_worker_and_abs(worker_id=worker.id, abs_id=advertisement_now.id):
        btn_apply = False
        report_btn = False
    else:
        btn_apply = True
        report_btn = True

    await advertisement_now.update(views=1)

    text = help_defs.read_text_file(advertisement_now.text_path)
    text = f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ {advertisement_now.id}\n\n' + text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∏ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    has_photo_in_ad = advertisement_now.photo_path is not None
    has_photo_in_msg = callback.message.photo is not None
    
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –æ—Ç —Ñ–æ—Ç–æ –∫ —Ç–µ–∫—Å—Ç—É –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç - —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
    if has_photo_in_ad != has_photo_in_msg:
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass
        
        if has_photo_in_ad:
            if 'https' in advertisement_now.photo_path['0']:
                await callback.message.answer_photo(
                    photo=advertisement_now.photo_path['0'],
                    caption=text,
                    reply_markup=kbc.advertisement_response_buttons(abs_id=advertisement_now.id, btn_next=btn_next, btn_back=btn_back, abs_list_id=abs_list_id)
                )
            else:
                await callback.message.answer_photo(
                    photo=FSInputFile(advertisement_now.photo_path['0']),
                    caption=text,
                    reply_markup=kbc.advertisement_response_buttons(abs_id=advertisement_now.id, btn_next=btn_next, btn_back=btn_back, abs_list_id=abs_list_id)
                )
        else:
            await callback.message.answer(
                text=text,
                reply_markup=kbc.advertisement_response_buttons(abs_id=advertisement_now.id, btn_next=btn_next, btn_back=btn_back, abs_list_id=abs_list_id)
            )
        return
    
    # –ï—Å–ª–∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    if has_photo_in_ad and has_photo_in_msg:
        # –§–æ—Ç–æ –∫ —Ñ–æ—Ç–æ
        if 'https' in advertisement_now.photo_path['0']:
            await callback.message.edit_media(
                media=InputMediaPhoto(
                    media=advertisement_now.photo_path['0'],
                    caption=text),
                reply_markup=kbc.advertisement_response_buttons(abs_id=advertisement_now.id, btn_next=btn_next, btn_back=btn_back, abs_list_id=abs_list_id)
            )
        else:
            await callback.message.edit_media(
                media=InputMediaPhoto(
                    media=FSInputFile(advertisement_now.photo_path['0']),
                    caption=text),
                reply_markup=kbc.advertisement_response_buttons(abs_id=advertisement_now.id, btn_next=btn_next, btn_back=btn_back, abs_list_id=abs_list_id)
            )
    else:
        # –¢–µ–∫—Å—Ç –∫ —Ç–µ–∫—Å—Ç—É
        await callback.message.edit_text(
            text=text,
            reply_markup=kbc.advertisement_response_buttons(abs_id=advertisement_now.id, btn_next=btn_next, btn_back=btn_back, abs_list_id=abs_list_id)
        )


@router.callback_query(lambda c: c.data.startswith('go_'), WorkStates.worker_check_abs)
async def check_abs(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'check_abs...')
    kbc = KeyboardCollection()
    abs_list_id = int(callback.data.split('_')[1])

    worker = await Worker.get_worker(tg_id=callback.message.chat.id)
    worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–æ—Å–Ω–æ–≤–Ω–æ–π + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫)
    all_city_ids = list(worker.city_id)  # –û—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    from app.data.database.models import WorkerCitySubscription
    city_subscriptions = await WorkerCitySubscription.get_active_by_worker(worker.id)
    for subscription in city_subscriptions:
        all_city_ids.extend(subscription.city_ids)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    all_city_ids = list(set(all_city_ids))
    
    advertisements = []
    for city_id in all_city_ids:
        advertisements_temp = await Abs.get_all_in_city(city_id=city_id)
        if advertisements_temp:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ None
            advertisements += advertisements_temp
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –ø–µ—Ä–≤—ã–º–∏)
    advertisements.sort(key=lambda x: x.id, reverse=True)

    advertisements_final = []

    if not advertisements:
        await callback.message.edit_text(text='–£ –≤–∞—Å –≤ –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π', reply_markup=kbc.menu())
        await state.set_state(WorkStates.worker_menu)
        return

    for advertisement in advertisements:
        customer = await Customer.get_customer(id=advertisement.customer_id)
        if customer.tg_id == worker.tg_id:
            continue
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è –ª–∏ —É–∂–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        if await WorkersAndAbs.get_by_worker_and_abs(worker_id=worker.id, abs_id=advertisement.id):
            continue
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç—ã
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –Ω–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not worker_sub.work_type_ids and not worker_sub.unlimited_work_types:
            continue
            
        is_unlimited = (worker_sub.unlimited_work_types or 
                       (len(worker_sub.work_type_ids) == 1 and worker_sub.work_type_ids[0] == '0'))
        
        if is_unlimited or (worker_sub.work_type_ids and advertisement.work_type_id in worker_sub.work_type_ids):
            advertisements_final.append(advertisement)

    if not advertisements_final:
        await callback.message.edit_text(text='–£ –≤–∞—Å –≤ –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π', reply_markup=kbc.menu())
        await state.set_state(WorkStates.worker_menu)
        return

    abs_now = advertisements_final[abs_list_id]

    if len(advertisements_final) - 1 > abs_list_id:
        btn_next = True
    else:
        btn_next = False

    if abs_list_id == 0:
        btn_back = False
    else:
        btn_back = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É–±—Ä–∞–Ω–∞ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª–∏–∫–æ–≤

    text = help_defs.read_text_file(abs_now.text_path)


    text = f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ {abs_now.id}\n\n' + text

    await abs_now.update(views=1)

    if abs_now.photo_path:
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass

        if 'https' in abs_now.photo_path['0']:
            await callback.message.answer_photo(photo=abs_now.photo_path['0'],
                                               caption=text,
                                               reply_markup=kbc.advertisement_response_buttons(abs_id=abs_now.id, btn_next=btn_next, btn_back=btn_back, abs_list_id=abs_list_id))
            return

        await callback.message.answer_photo(photo=FSInputFile(abs_now.photo_path['0']),
                                            caption=text,
                                            reply_markup=kbc.advertisement_response_buttons(abs_id=abs_now.id, btn_next=btn_next, btn_back=btn_back, abs_list_id=abs_list_id))
        return
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass
    await callback.message.answer(text=text, reply_markup=kbc.advertisement_response_buttons(abs_id=abs_now.id, btn_next=btn_next, btn_back=btn_back, abs_list_id=abs_list_id))


@router.callback_query(lambda c: c.data.startswith('go-to-next_'), WorkStates.worker_check_abs)
async def check_abs(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'check_abs...')
    kbc = KeyboardCollection()

    photo_id = int(callback.data.split('_')[1])
    abs_list_id = int(callback.data.split('_')[2])

    worker = await Worker.get_worker(tg_id=callback.message.chat.id)
    worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–æ—Å–Ω–æ–≤–Ω–æ–π + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫)
    all_city_ids = list(worker.city_id)  # –û—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    from app.data.database.models import WorkerCitySubscription
    city_subscriptions = await WorkerCitySubscription.get_active_by_worker(worker.id)
    for subscription in city_subscriptions:
        all_city_ids.extend(subscription.city_ids)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    all_city_ids = list(set(all_city_ids))
    
    advertisements = []
    for city_id in all_city_ids:
        advertisements_temp = await Abs.get_all_in_city(city_id=city_id)
        if advertisements_temp:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ None
            advertisements += advertisements_temp
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –ø–µ—Ä–≤—ã–º–∏)
    advertisements.sort(key=lambda x: x.id, reverse=True)

    advertisements_final = []

    if not advertisements:
        await callback.message.edit_text(text='–£ –≤–∞—Å –≤ –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π', reply_markup=kbc.menu())
        await state.set_state(WorkStates.worker_menu)
        return

    for advertisement in advertisements:
        customer = await Customer.get_customer(id=advertisement.customer_id)
        if customer.tg_id == worker.tg_id:
            continue
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è –ª–∏ —É–∂–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        if await WorkersAndAbs.get_by_worker_and_abs(worker_id=worker.id, abs_id=advertisement.id):
            continue
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç—ã
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –Ω–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not worker_sub.work_type_ids and not worker_sub.unlimited_work_types:
            continue
            
        is_unlimited = (worker_sub.unlimited_work_types or 
                       (len(worker_sub.work_type_ids) == 1 and worker_sub.work_type_ids[0] == '0'))
        
        if is_unlimited or (worker_sub.work_type_ids and advertisement.work_type_id in worker_sub.work_type_ids):
            advertisements_final.append(advertisement)

    if not advertisements_final:
        await callback.message.edit_text(text='–£ –≤–∞—Å –≤ –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π', reply_markup=kbc.menu())
        await state.set_state(WorkStates.worker_menu)
        return

    advertisement_now = advertisements_final[abs_list_id]

    btn_next = True if (len(advertisements_final) - 1 > abs_list_id) else False

    if abs_list_id == 0:
        btn_back = False
    else:
        btn_back = True

    if await WorkersAndAbs.get_by_worker_and_abs(worker_id=worker.id, abs_id=advertisement_now.id):
        btn_apply = False
        report_btn = False
    else:
        btn_apply = True
        report_btn = True

    await advertisement_now.update(views=1)

    if photo_id <= -1:
        photo_id = advertisement_now.count_photo - 1
    elif photo_id > (advertisement_now.count_photo - 1):
        photo_id = 0

    if advertisement_now.photo_path:
        photo_path = advertisement_now.photo_path[str(photo_id)]
        
        if 'https' in photo_path:
            await callback.message.edit_media(
                media=InputMediaPhoto(
                    media=photo_path,
                    caption=callback.message.caption),
                reply_markup=kbc.advertisement_response_buttons(abs_id=advertisement_now.id)
            )
        else:
            await callback.message.edit_media(
                media=InputMediaPhoto(
                    media=FSInputFile(photo_path),
                    caption=callback.message.caption),
                reply_markup=kbc.advertisement_response_buttons(abs_id=advertisement_now.id)
            )
        return




@router.callback_query(lambda c: c.data.startswith('subscription_'), WorkStates.worker_check_subscription)
async def check_subscription(callback: CallbackQuery) -> None:
    logger.debug(f'check_subscription...')
    sub_id = int(callback.data.split('_')[1])
    kbc = KeyboardCollection()
    subscription = await SubscriptionType.get_subscription_type(id=sub_id)
    subscriptions = await SubscriptionType.get_all()
    subscriptions_ids = [sub.id for sub in subscriptions[1::]]
    subscriptions_ids.remove(sub_id)
    subscriptions_names = [sub.subscription_type for sub in subscriptions[1::]]
    subscriptions_names.remove(subscription.subscription_type)

    text = (f'–¢–∞—Ä–∏—Ñ <b>{subscription.subscription_type}</b>\n\n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤: {"–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ" if subscription.unlimited else subscription.count_guaranteed_orders}\n'
            f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {"–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ" if subscription.count_work_types == 100 else str(subscription.count_work_types) + " –∏–∑ 20"}\n'
            f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–æ–≤: {"–¥–æ—Å—Ç—É–ø–Ω–æ ‚úî" if subscription.notification else "–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ ‚ùå"}\n'
            f'–î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤: {subscription.count_cites}\n'
            f'–¶–µ–Ω–∞: {subscription.price} ‚ÇΩ\n')

    await callback.message.edit_text(text=text,
                                     reply_markup=kbc.choose_worker_subscription_and_buy(
                                         cur_sub_id=subscription.id,
                                         cur_sub_name=subscription.subscription_type,
                                         subscriptions_ids=subscriptions_ids,
                                         subscriptions_names=subscriptions_names),
                                     parse_mode='HTML'
                                     )


@router.callback_query(lambda c: c.data.startswith('subscription-buy_'), WorkStates.worker_check_subscription)
async def send_invoice_buy_subscription(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'send_invoice_buy_subscription...')
    sub_id = int(callback.data.split('_')[1])
    kbc = KeyboardCollection()
    subscription = await SubscriptionType.get_subscription_type(id=sub_id)
    if not subscription:
        logger.debug('Error: subscription not found')
        return
    worker = await Worker.get_worker(tg_id=callback.message.chat.id)

    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass

    prices = [LabeledPrice(label=f"{subscription.subscription_type}",
                           amount=int(subscription.price * 100))]

    text = f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü –ø–æ —Ç–∞—Ä–∏—Ñ—É {subscription.subscription_type}"

    await state.set_state(WorkStates.worker_buy_subscription)

    await callback.message.answer_invoice(
        title=f"–¢–∞—Ä–∏—Ñ {subscription.subscription_type}",
        description=text,
        provider_token=config.PAYMENTS,
        currency="RUB",  # –í–∞–ª—é—Ç–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        prices=prices,
        start_parameter="one-month-subscription",
        payload="invoice-payload",
        reply_markup=kbc.worker_buy_subscription(),
        need_email=True,
        send_email_to_provider=True
    )
    await state.update_data(worker_id=str(worker.id),
                            subscription_id=str(subscription.id))


@router.pre_checkout_query(lambda query: True, WorkStates.worker_buy_subscription)
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery) -> None:
    logger.debug(f'pre_checkout_handler...')
    await pre_checkout_query.answer(ok=True)


@router.callback_query(F.data == 'use-bonus')
async def success_payment_handler(callback: CallbackQuery, state: FSMContext):
    logger.debug(f'success_payment_handler...')
    kbc = KeyboardCollection()

    subscription_id = 6

    worker = await Worker.get_worker(tg_id=callback.message.chat.id)

    if worker_and_ref := await WorkerAndRefsAssociation.get_refs_by_worker(worker_id=worker.id):
        if worker_and_ref.worker_bonus:
            await worker_and_ref.update(worker_bonus=False)
        else:
            return
    elif worker_and_ref := await WorkerAndRefsAssociation.get_by_ref(ref_id=worker.tg_id):
        if worker_and_ref.ref_bonus:
            await worker_and_ref.update(ref_bonus=False)
        else:
            return
    else:
        return

    worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
    subscription = await SubscriptionType.get_subscription_type(id=subscription_id)

    await worker_sub.update(
        guaranteed_orders=subscription.count_guaranteed_orders,
        subscription_end=datetime.date.today() + datetime.timedelta(days=30),
        subscription_id=subscription_id,
        unlimited_orders=True if subscription.count_guaranteed_orders == 10000 else False,
        unlimited_work_types=True if subscription.count_work_types == 18 else False
    )

    work_types = await WorkType.get_all()

    names = [work_type.work_type for work_type in work_types]
    ids = [work_type.id for work_type in work_types]

    btn_back = True

    await callback.message.edit_text(
        text=f"–ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n–í—ã–±—Ä–∞–Ω–æ 0 –∏–∑ {subscription.count_work_types}",
        reply_markup=kbc.choose_type(ids=ids, names=names, btn_back=btn_back, name_btn_back='–ù–∞–∑–∞–¥')
    )
    await state.set_state(WorkStates.worker_choose_work_types)
    await state.update_data(subscription_id=str(subscription_id))
    await state.update_data(count_work_types=str(subscription.count_work_types))
    await state.update_data(work_type_ids='')


@router.message(F.successful_payment, WorkStates.worker_buy_subscription)
async def success_payment_handler(message: Message, state: FSMContext):
    logger.debug(f'success_payment_handler...')
    kbc = KeyboardCollection()

    state_data = await state.get_data()
    worker_id = int(state_data.get('worker_id'))
    subscription_id = int(state_data.get('subscription_id'))

    worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker_id)
    subscription = await SubscriptionType.get_subscription_type(id=subscription_id)

    await worker_sub.update(
        guaranteed_orders=subscription.count_guaranteed_orders,
        subscription_end=datetime.date.today() + datetime.timedelta(days=30),
        subscription_id=subscription_id,
        unlimited_orders=True if subscription.count_guaranteed_orders == 10000 else False,
        unlimited_work_types=True if subscription.count_work_types == 20 else False
    )

    work_types = await WorkType.get_all()

    names = [work_type.work_type for work_type in work_types]
    ids = [work_type.id for work_type in work_types]

    btn_back = True if worker_sub.unlimited_orders or worker_sub.subscription_id == 1 else False

    await message.answer(
        text=f"–°–ø–∞—Å–∏–±–æ, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {subscription.price}‚ÇΩ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n–í—ã–±—Ä–∞–Ω–æ 0 –∏–∑ {subscription.count_work_types}",
        reply_markup=kbc.choose_type(ids=ids, names=names, btn_back=btn_back, name_btn_back='–ù–∞–∑–∞–¥')
    )
    await state.set_state(WorkStates.worker_choose_work_types)
    await state.update_data(subscription_id=str(subscription_id))
    await state.update_data(count_work_types=str(subscription.count_work_types))
    await state.update_data(work_type_ids='')


async def get_worker_selected_work_types(worker_sub) -> List[WorkType]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    if worker_sub.work_type_ids:
        selected_ids = [int(id) for id in worker_sub.work_type_ids if id]
        work_types = await get_cached_work_types()
        return [wt for wt in work_types if wt.id in selected_ids]
    return []


async def get_worker_selected_ids(worker_sub) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    if worker_sub.work_type_ids:
        return [id for id in worker_sub.work_type_ids if id]
    return []


@router.callback_query(F.data == 'choose_work_types', WorkStates.worker_menu)
async def choose_work_types(callback: CallbackQuery, state: FSMContext):
    logger.debug(f'choose_work_types...')
    kbc = KeyboardCollection()

    worker = await Worker.get_worker(tg_id=callback.message.chat.id)
    worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
    subscription = await SubscriptionType.get_subscription_type(id=worker_sub.subscription_id)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    from app.data.database.models import WorkerWorkTypeChanges
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await WorkerWorkTypeChanges.create_table_if_not_exists()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    work_type_changes = await WorkerWorkTypeChanges.get_or_create(worker.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    can_change, message = work_type_changes.can_change_work_types()
    
    if not can_change:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        selected_ids = worker_sub.work_type_ids if worker_sub.work_type_ids else []
        
        limit_text = message + "\n\n"
        
        if selected_ids:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            limit_text += "‚úÖ **–¢–µ–∫—É—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
            selected_work_types = await get_worker_selected_work_types(worker_sub)
            for i, wt in enumerate(selected_work_types, 1):
                limit_text += f"{i}. {wt.work_type}\n"
            limit_text += "\n"
        
        limit_text += "üí° –í—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –æ–∂–∏–¥–∞–Ω–∏—è."
        
        try:
            await callback.message.edit_text(
                text=limit_text,
                reply_markup=kbc.menu_btn(),
                parse_mode='Markdown'
            )
        except Exception:
            try:
                await callback.message.delete()
            except Exception:
                pass
            await callback.message.answer(
                text=limit_text,
                reply_markup=kbc.menu_btn(),
                parse_mode='Markdown'
            )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    from app.data.database.models import WorkerRank
    rank = await WorkerRank.get_or_create_rank(worker.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–Ω–≥–∞
    work_types_limit = rank.get_work_types_limit()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    work_types = await get_cached_work_types()
    selected_ids = await get_worker_selected_ids(worker_sub)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±–æ—Ä–µ
    selected_count = len(selected_ids)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–Ω–≥–∞
    if work_types_limit is None:
        # –ü–ª–∞—Ç–∏–Ω–∞ - –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        available_count = len(work_types)
        limit_text = "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    else:
        available_count = min(work_types_limit, len(work_types))
        limit_text = f"–¥–æ {work_types_limit}"

    text = f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã\n\n"
    text += f"üèÜ **–í–∞—à —Ä–∞–Ω–≥:** {rank.current_rank} {rank.get_rank_name()}\n"
    text += f"üìä –í—ã–±—Ä–∞–Ω–æ: {selected_count}/{available_count} {limit_text}\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–≤—Å–µ–≥–¥–∞)
    remaining = 3 - work_type_changes.changes_count
    if work_type_changes.changes_count == 0:
        text += f"üîÑ **–ò–∑–º–µ–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** 0/3\n"
        text += f"üí° *–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è 3 —Ä–∞–∑–∞*\n"
    elif remaining > 0:
        text += f"üîÑ **–ò–∑–º–µ–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {work_type_changes.changes_count}/3 (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining})\n"
    else:
        text += f"‚ùå **–ò–∑–º–µ–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {work_type_changes.changes_count}/3 (–ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω)\n"
        text += f"‚è∞ *–°–ª–µ–¥—É—é—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π*\n"

    if selected_count > 0:
        selected_work_types = await get_worker_selected_work_types(worker_sub)
        text += f"‚úÖ –¢–µ–∫—É—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
        for wt in selected_work_types:
            text += f"‚Ä¢ {wt.work_type}\n"
        text += f"\n"

    if selected_count < available_count:
        text += f"üí° –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ {available_count - selected_count} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
    elif selected_count == available_count and work_types_limit is not None:
        text += f"üéâ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–∞—à–µ–≥–æ —Ä–∞–Ω–≥–∞! –ü–æ–≤—ã—Å—å—Ç–µ —Ä–∞–Ω–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π."
    elif selected_count == available_count:
        text += f"üéâ –í—ã–±—Ä–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π!"

    await callback.message.answer(
        text=text,
        reply_markup=kbc.choose_work_types_improved(
            all_work_types=work_types,
            selected_ids=selected_ids,
            count_work_types=available_count,
            page=0,
            btn_back=True
        ),
        parse_mode='Markdown'
    )

    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    await state.update_data(original_work_types=selected_ids.copy())

    await state.set_state(WorkStates.worker_choose_work_types)
    await state.update_data(subscription_id=str(subscription.id))
    await state.update_data(count_work_types=str(subscription.count_work_types))
    await state.update_data(work_type_ids='|'.join(selected_ids))
    await state.update_data(current_page=0)


# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
@router.callback_query(lambda c: c.data.startswith('add_work_type_'), WorkStates.worker_choose_work_types)
async def add_work_type(callback: CallbackQuery, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    logger.debug(f'add_work_type...')
    kbc = KeyboardCollection()

    work_type_id = callback.data.split('_')[3]
    state_data = await state.get_data()
    work_type_ids = str(state_data.get('work_type_ids', ''))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    from app.data.database.models import WorkerRank
    rank = await WorkerRank.get_or_create_rank(worker.id)
    work_types_limit = rank.get_work_types_limit()

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    current_ids = work_type_ids.split('|') if work_type_ids else []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Ä–∞–Ω–≥–∞
    if work_types_limit is not None and len(current_ids) >= work_types_limit:
        await callback.answer(
            f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–∞—à–µ–≥–æ —Ä–∞–Ω–≥–∞! –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ {work_types_limit} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.", 
            show_alert=True
        )
        return
    
    if work_type_id not in current_ids:
        current_ids.append(work_type_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(work_type_ids='|'.join(current_ids))

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    state_data = await state.get_data()
    current_page = state_data.get('current_page', 0)
    await update_work_types_interface(callback, state, kbc, current_page)


@router.callback_query(lambda c: c.data.startswith('remove_work_type_'), WorkStates.worker_choose_work_types)
async def remove_work_type(callback: CallbackQuery, state: FSMContext) -> None:
    """–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    logger.debug(f'remove_work_type...')
    kbc = KeyboardCollection()

    work_type_id = callback.data.split('_')[3]
    state_data = await state.get_data()
    work_type_ids = str(state_data.get('work_type_ids', ''))

    # –£–¥–∞–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    current_ids = work_type_ids.split('|') if work_type_ids else []
    if work_type_id in current_ids:
        current_ids.remove(work_type_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(work_type_ids='|'.join(current_ids))

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    state_data = await state.get_data()
    current_page = state_data.get('current_page', 0)
    await update_work_types_interface(callback, state, kbc, current_page)


@router.callback_query(F.data == 'clear_all', WorkStates.worker_choose_work_types)
async def clear_all_work_types(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    logger.debug(f'clear_all_work_types...')
    kbc = KeyboardCollection()

    # –û—á–∏—â–∞–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await state.update_data(work_type_ids='')

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    state_data = await state.get_data()
    current_page = state_data.get('current_page', 0)
    await update_work_types_interface(callback, state, kbc, current_page)


@router.callback_query(F.data == 'show_selected', WorkStates.worker_choose_work_types)
async def show_selected_work_types(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    logger.debug(f'show_selected_work_types...')
    kbc = KeyboardCollection()

    state_data = await state.get_data()
    work_type_ids = str(state_data.get('work_type_ids', ''))
    count_work_types = int(state_data.get('count_work_types'))

    if not work_type_ids:
        await callback.answer("–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    selected_ids = [int(id) for id in work_type_ids.split('|') if id]
    work_types = await get_cached_work_types()
    selected_work_types = [wt for wt in work_types if wt.id in selected_ids]

    text = f"üìã –í–∞—à–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"
    for i, wt in enumerate(selected_work_types, 1):
            text += f"{i}. {wt.work_type}\n"

    await callback.message.edit_text(
        text=text,
        reply_markup=kbc.show_selected_work_types(selected_work_types, count_work_types)
    )


@router.callback_query(F.data == 'back_to_selection', WorkStates.worker_choose_work_types)
async def back_to_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    logger.debug(f'back_to_selection...')
    kbc = KeyboardCollection()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    state_data = await state.get_data()
    current_page = state_data.get('current_page', 0)
    await update_work_types_interface(callback, state, kbc, current_page)


@router.callback_query(F.data == 'limit_reached', WorkStates.worker_choose_work_types)
async def limit_reached(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞"""
    await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö.", show_alert=True)


@router.callback_query(lambda c: c.data.startswith('page_'), WorkStates.worker_choose_work_types)
async def navigate_page(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
    logger.debug(f'navigate_page...')
    kbc = KeyboardCollection()

    page = int(callback.data.split('_')[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_page=page)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    await update_work_types_interface(callback, state, kbc, page)




async def update_work_types_interface(callback: CallbackQuery, state: FSMContext, kbc: KeyboardCollection, page: int = 0) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    state_data = await state.get_data()
    work_type_ids = str(state_data.get('work_type_ids', ''))

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    from app.data.database.models import WorkerRank
    rank = await WorkerRank.get_or_create_rank(worker.id)
    work_types_limit = rank.get_work_types_limit()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    from app.data.database.models import WorkerWorkTypeChanges
    work_type_changes = await WorkerWorkTypeChanges.get_or_create(worker.id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
    work_types = await get_cached_work_types()
    selected_ids = work_type_ids.split('|') if work_type_ids else []
    selected_ids = [id for id in selected_ids if id]  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    selected_count = len(selected_ids)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–Ω–≥–∞
    if work_types_limit is None:
        # –ü–ª–∞—Ç–∏–Ω–∞ - –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        available_count = len(work_types)
        limit_text = "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    else:
        available_count = min(work_types_limit, len(work_types))
        limit_text = f"–¥–æ {work_types_limit}"

    text = f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã\n\n"
    text += f"üèÜ **–í–∞—à —Ä–∞–Ω–≥:** {rank.current_rank} {rank.get_rank_name()}\n"
    text += f"üìä –í—ã–±—Ä–∞–Ω–æ: {selected_count}/{available_count} {limit_text}\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–≤—Å–µ–≥–¥–∞)
    remaining = 3 - work_type_changes.changes_count
    if work_type_changes.changes_count == 0:
        text += f"üîÑ **–ò–∑–º–µ–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** 0/3\n"
        text += f"üí° *–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è 3 —Ä–∞–∑–∞*\n"
    elif remaining > 0:
        text += f"üîÑ **–ò–∑–º–µ–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {work_type_changes.changes_count}/3 (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining})\n"
    else:
        text += f"‚ùå **–ò–∑–º–µ–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {work_type_changes.changes_count}/3 (–ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω)\n"
        text += f"‚è∞ *–°–ª–µ–¥—É—é—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π*\n"

    if selected_count > 0:
        selected_work_types = [wt for wt in work_types if str(wt.id) in selected_ids]
        text += f"‚úÖ –¢–µ–∫—É—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
        for wt in selected_work_types:
                text += f"‚Ä¢ {wt.work_type}\n"
        text += f"\n"

    if selected_count < available_count:
        text += f"üí° –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ {available_count - selected_count} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
    elif selected_count == available_count and work_types_limit is not None:
        text += f"üéâ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–∞—à–µ–≥–æ —Ä–∞–Ω–≥–∞! –ü–æ–≤—ã—Å—å—Ç–µ —Ä–∞–Ω–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π."
    elif selected_count == available_count:
        text += f"üéâ –í—ã–±—Ä–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π!"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        text=text,
        reply_markup=kbc.choose_work_types_improved(
            all_work_types=work_types,
            selected_ids=selected_ids,
            count_work_types=available_count,
            page=page,
            btn_back=True
        ),
        parse_mode='Markdown'
    )


# –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
@router.callback_query(lambda c: c.data.startswith('obj-id_'), WorkStates.worker_choose_work_types)
async def choose_work_types_old(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'choose_work_types...')
    kbc = KeyboardCollection()

    state_data = await state.get_data()
    count_work_types = int(state_data.get('count_work_types'))
    subscription_id = int(state_data.get('subscription_id'))
    work_type_ids = str(state_data.get('work_type_ids'))

    work_type_id_str = work_type_ids + '|' + str(callback.data.split('_')[1])
    work_type_id_list = work_type_id_str.split('|')
    while '' in work_type_id_list:
        work_type_id_list.remove('')
    work_type_id_str = '|'.join(work_type_id_list)

    await state.update_data(count_work_types=str(count_work_types))
    await state.update_data(work_type_ids=str(work_type_id_str))

    if int(callback.data.split('_')[1]) == 20:
        await callback.message.edit_text(
            text='*–í —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:* \n\n - –ë–∞—Ä–º–µ–Ω\n - –û—Ñ–∏—Ü–∏–∞–Ω—Ç\n - –ü–æ–≤–∞—Ä\n - –•–æ—Å—Ç–µ—Å\n - –£–±–æ—Ä—â–∏—Ü–∞\n - –û—Ö—Ä–∞–Ω–∞\n - –ö—É—Ä—å–µ—Ä\n - –ö–∞–ª—å—è–Ω—â–∏–∫',
            reply_markup=kbc.worker_apply_work_type()
        )
        return

    work_types = await WorkType.get_all()
    worker = await Worker.get_worker(tg_id=callback.message.chat.id)
    worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)

    if len(work_type_id_list) == count_work_types:
        if len(work_type_id_list) == 1:
            text = '–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ'
        else:
            text = '–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω—ã'
        await worker_sub.update(work_type_ids=work_type_id_list)
        await callback.message.edit_text(text=text, reply_markup=kbc.menu())
        await state.set_state(WorkStates.worker_menu)
        return

    work_type_id_list = [int(id) for id in work_type_id_list]

    new_work_types = []

    for work_type in work_types:
        if work_type.id not in work_type_id_list:
            new_work_types.append(work_type)

    subscription = await SubscriptionType.get_subscription_type(id=subscription_id)

    names = [work_type.work_type for work_type in new_work_types]
    ids = [work_type.id for work_type in new_work_types]

    btn_back = True if worker_sub.unlimited_orders or worker_sub.subscription_id == 1 else False

    await callback.message.edit_text(
        text=f"–í–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n–í—ã–±—Ä–∞–Ω–æ {len(work_type_id_list)} –∏–∑ {subscription.count_work_types}",
        reply_markup=kbc.choose_type(ids=ids, names=names, btn_back=btn_back, name_btn_back='–ù–∞–∑–∞–¥')
    )


@router.callback_query(lambda c: c.data.startswith('good'), WorkStates.worker_choose_work_types)
async def choose_work_types(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'choose_work_types...')
    kbc = KeyboardCollection()

    state_data = await state.get_data()
    count_work_types = int(state_data.get('count_work_types'))
    subscription_id = int(state_data.get('subscription_id'))
    work_type_ids = str(state_data.get('work_type_ids'))

    work_type_id_list = work_type_ids.split('|')
    while '' in work_type_id_list:
        work_type_id_list.remove('')

    work_types = await WorkType.get_all()
    worker = await Worker.get_worker(tg_id=callback.message.chat.id)
    worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)

    if len(work_type_id_list) == count_work_types:
        if len(work_type_id_list) == 1:
            text = '–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ'
        else:
            text = '–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω—ã'
        await worker_sub.update(work_type_ids=work_type_id_list)
        await callback.message.edit_text(text=text, reply_markup=kbc.menu())
        await state.set_state(WorkStates.worker_menu)
        return

    work_type_id_list = [int(id) for id in work_type_id_list]

    new_work_types = []

    for work_type in work_types:
        if work_type.id not in work_type_id_list:
            new_work_types.append(work_type)

    subscription = await SubscriptionType.get_subscription_type(id=subscription_id)

    names = [work_type.work_type for work_type in new_work_types]
    ids = [work_type.id for work_type in new_work_types]

    btn_back = True if worker_sub.unlimited_orders or worker_sub.subscription_id == 1 else False

    await callback.message.edit_text(
        text=f"–í–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n–í—ã–±—Ä–∞–Ω–æ {len(work_type_id_list)} –∏–∑ {subscription.count_work_types}",
        reply_markup=kbc.choose_type(ids=ids, names=names, btn_back=btn_back, name_btn_back='–ù–∞–∑–∞–¥')
    )


@router.callback_query(lambda c: c.data.startswith('bad'), WorkStates.worker_choose_work_types)
async def choose_work_types(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'choose_work_types...')
    kbc = KeyboardCollection()

    state_data = await state.get_data()
    count_work_types = int(state_data.get('count_work_types'))
    subscription_id = int(state_data.get('subscription_id'))
    work_type_ids = str(state_data.get('work_type_ids'))

    work_type_id_list = work_type_ids.split('|')
    while '' in work_type_id_list:
        work_type_id_list.remove('')
    work_type_id_str = '|'.join(work_type_id_list)

    await state.update_data(count_work_types=str(count_work_types))
    await state.update_data(work_type_ids=str(work_type_id_str))

    work_types = await WorkType.get_all()
    worker = await Worker.get_worker(tg_id=callback.message.chat.id)
    worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)

    if len(work_type_id_list) == count_work_types:
        if len(work_type_id_list) == 1:
            text = '–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ'
        else:
            text = '–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω—ã'
        await worker_sub.update(work_type_ids=work_type_id_list)
        await callback.message.edit_text(text=text, reply_markup=kbc.menu())
        await state.set_state(WorkStates.worker_menu)
        return

    work_type_id_list = [int(id) for id in work_type_id_list]

    new_work_types = []

    for work_type in work_types:
        if work_type.id not in work_type_id_list:
            new_work_types.append(work_type)

    subscription = await SubscriptionType.get_subscription_type(id=subscription_id)

    names = [work_type.work_type for work_type in new_work_types]
    ids = [work_type.id for work_type in new_work_types]

    btn_back = True if worker_sub.unlimited_orders or worker_sub.subscription_id == 1 else False

    await callback.message.edit_text(
        text=f"–í–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n–í—ã–±—Ä–∞–Ω–æ {len(work_type_id_list)} –∏–∑ {subscription.count_work_types}",
        reply_markup=kbc.choose_type(ids=ids, names=names, btn_back=btn_back, name_btn_back='–ù–∞–∑–∞–¥')
    )


async def is_selection_not_change(original_ids: set, current_ids: set, pending_selection: bool) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –±—ã–ª–æ –ª–∏ —ç—Ç–æ –í–´–ë–û–†–û–ú –∏–ª–∏ –ò–ó–ú–ï–ù–ï–ù–ò–ï–ú –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
    
    –í–´–ë–û–† (–Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True):
    - –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–ª–∞–≥ pending_selection (–ø–æ—Å–ª–µ –æ–±–Ω—É–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞)
    - –ï—Å–ª–∏ –±—ã–ª–æ 0 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä)
    - –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–ª–∏—Å—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è (–≤—Å–µ —Å—Ç–∞—Ä—ã–µ –µ—Å—Ç—å + –Ω–æ–≤—ã–µ)
    
    –ò–ó–ú–ï–ù–ï–ù–ò–ï (—Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False):
    - –ï—Å–ª–∏ —É–¥–∞–ª—è–ª–∏—Å—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    - –ï—Å–ª–∏ –∑–∞–º–µ–Ω—è–ª–∏—Å—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    - –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ < –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –æ–±–Ω—É–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞
    if pending_selection:
        logger.info(f'[WORK_TYPES] Selection detected: pending_selection flag is set')
        return True  # –í–´–ë–û–†
    
    # –ï—Å–ª–∏ –±—ã–ª–æ 0 - —ç—Ç–æ –≤—ã–±–æ—Ä
    if len(original_ids) == 0:
        logger.info(f'[WORK_TYPES] Selection detected: first time selection (was 0)')
        return True  # –í–´–ë–û–†
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–ª–∏ (–≤—Å–µ —Å—Ç–∞—Ä—ã–µ –µ—Å—Ç—å + –Ω–æ–≤—ã–µ)
    if original_ids.issubset(current_ids):
        added_count = len(current_ids) - len(original_ids)
        logger.info(f'[WORK_TYPES] Selection detected: only adding new work types (added {added_count})')
        return True  # –í–´–ë–û–† (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ)
    
    # –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö - –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    removed = original_ids - current_ids
    added = current_ids - original_ids
    logger.info(f'[WORK_TYPES] Change detected: removed {len(removed)}, added {len(added)}')
    return False  # –ò–ó–ú–ï–ù–ï–ù–ò–ï


@router.callback_query(F.data == 'back', WorkStates.worker_choose_work_types)
async def choose_work_types_end(callback: CallbackQuery, state: FSMContext) -> None:
    kbc = KeyboardCollection()
    logger.debug(f'choose_work_types_end...')

    state_data = await state.get_data()
    work_type_ids = str(state_data.get('work_type_ids', ''))
    original_work_types = set(state_data.get('original_work_types', []))

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    work_type_id_list = work_type_ids.split('|') if work_type_ids else []
    work_type_id_list = [id for id in work_type_id_list if id]  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

    worker = await Worker.get_worker(tg_id=callback.message.chat.id)
    worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î
    await worker_sub.update(work_type_ids=work_type_id_list)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    current_work_types = set(work_type_id_list)
    
    if original_work_types != current_work_types:
        # –ß—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –í–´–ë–û–† –∏–ª–∏ –ò–ó–ú–ï–ù–ï–ù–ò–ï
        from app.data.database.models import WorkerWorkTypeChanges
        work_type_changes = await WorkerWorkTypeChanges.get_or_create(worker.id)
        
        logger.info(f'[WORK_TYPES] Worker {worker.id} work types changed. Original: {original_work_types}, Current: {current_work_types}')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        was_selection = await is_selection_not_change(
            original_work_types, 
            current_work_types, 
            work_type_changes.pending_selection
        )
        
        if was_selection:
            # –≠—Ç–æ –±—ã–ª –í–´–ë–û–† - –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            logger.info(f'[WORK_TYPES] Worker {worker.id}: SELECTION (not counted as change)')
            
            if work_type_changes.pending_selection:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞
                work_type_changes.pending_selection = False
                await work_type_changes.save()
                logger.info(f'[WORK_TYPES] Worker {worker.id}: pending_selection flag cleared')
            
            await callback.answer(
                f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω—ã!",
                show_alert=False
            )
        else:
            # –≠—Ç–æ –±—ã–ª–æ –ò–ó–ú–ï–ù–ï–ù–ò–ï - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
            logger.info(f'[WORK_TYPES] Worker {worker.id}: CHANGE (counted as change)')
            
            await work_type_changes.register_change()
            
            logger.info(f'[WORK_TYPES] Worker {worker.id} registered change. Total changes: {work_type_changes.changes_count}/3')
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ - –ø–æ–∫–∞–∂–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if work_type_changes.changes_count >= 3:
                from datetime import datetime
                if work_type_changes.reset_date:
                    reset_date = datetime.strptime(work_type_changes.reset_date, '%Y-%m-%d %H:%M:%S')
                    days_left = (reset_date - datetime.now()).days + 1
                    await callback.answer(
                        f"‚ö†Ô∏è –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ 3 –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.\n–°–ª–µ–¥—É—é—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π.",
                        show_alert=True
                    )
            else:
                remaining = 3 - work_type_changes.changes_count
                await callback.answer(
                    f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n–û—Å—Ç–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏–π: {remaining}/3",
                    show_alert=False
                )
    else:
        logger.info(f'[WORK_TYPES] Worker {worker.id} exited without changes')

    logger.debug(f'work_type_id_list...{work_type_id_list}')

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    selected_count = len(work_type_id_list)
    if selected_count > 0:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞
        work_types = await get_cached_work_types()
        selected_work_types = [wt for wt in work_types if str(wt.id) in work_type_id_list]

        text = f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
        text += f"üìä –í—ã–±—Ä–∞–Ω–æ: {selected_count} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n\n"
        text += f"üéØ –í–∞—à–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
        for i, wt in enumerate(selected_work_types, 1):
                text += f"{i}. {wt.work_type}\n"
    else:
        text = "‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏—Ö –ø–æ–∑–∂–µ –≤ –º–µ–Ω—é."

    await callback.message.edit_text(text, reply_markup=kbc.menu())
    await state.set_state(WorkStates.worker_menu)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤ —É–¥–∞–ª–µ–Ω–∞ - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å –Ω—É–ª—è


# –§—É–Ω–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ —É–¥–∞–ª–µ–Ω–∞


# –§—É–Ω–∫—Ü–∏—è "–ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏" —É–¥–∞–ª–µ–Ω–∞


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫–ª–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞


# –§—É–Ω–∫—Ü–∏—è apply-it_ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞


@router.callback_query(lambda c: c.data.startswith('report-it_'))
async def report_order(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'report_order...')
    if user_blocked := await Banned.get_banned(tg_id=callback.message.chat.id):
        if user_blocked.ban_now or user_blocked.forever:
            try:
                await callback.message.delete()
            except TelegramBadRequest:
                pass
            await callback.message.answer(text='–£–ø—Å, –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')
            await state.set_state(BannedStates.banned)
            return

    kbc = KeyboardCollection()
    await state.clear()
    advertisement_id = int(callback.data.split('_')[1])
    advertisement = await Abs.get_one(id=advertisement_id)

    if not advertisement:
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass
        await callback.message.answer(text='–ü–æ—Ö–æ–∂–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ',
                                      reply_markup=kbc.menu())
        await state.set_state(WorkStates.worker_menu)
        return

    await state.set_state(WorkStates.worker_menu)
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass
    await callback.message.answer(text='–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞',
                                  reply_markup=kbc.menu())

    worker = await Worker.get_worker(tg_id=callback.message.chat.id)

    if not await WorkerAndReport.get_by_worker_and_abs(worker_id=worker.id, abs_id=advertisement_id):
        worker_and_report = WorkerAndReport(worker_id=worker.id, abs_id=advertisement_id)
        await worker_and_report.save()

    customer = await Customer.get_customer(id=advertisement.customer_id)

    text = f'–ó–∞–∫–∞–∑—á–∏–∫ ID {customer.tg_id}\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ {advertisement.id}\n\n' + help_defs.read_text_file(
        advertisement.text_path)
    if advertisement.photo_path:
        await bot.send_photo(chat_id=config.REPORT_LOG,
                             photo=FSInputFile(advertisement.photo_path),
                             caption=text,
                             reply_markup=kbc.block_abs(advertisement_id), protect_content=False)
    else:
        await bot.send_message(chat_id=config.REPORT_LOG,
                               text=text,
                               reply_markup=kbc.block_abs(advertisement_id), protect_content=False)


# –§—É–Ω–∫—Ü–∏—è apply-final-it_ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞ hide-obj-worker_ —É–¥–∞–ª–µ–Ω–∞


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–∫–∞–∑—á–∏–∫—É —É–¥–∞–ª–µ–Ω–∞


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω–∞




@router.callback_query(F.data == "worker_activity", WorkStates.worker_menu)
async def worker_activity(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    logger.debug(f'worker_activity...')
    kbc = KeyboardCollection()
    
    worker = await Worker.get_worker(tg_id=callback.message.chat.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–ª–µ activity_level
    if not hasattr(worker, 'activity_level') or worker.activity_level is None:
        worker.activity_level = 100  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –µ—Å–ª–∏ –º–µ—Ç–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)
    if not hasattr(worker, 'get_activity_zone'):
        zone_emoji, zone_message, _, _ = get_activity_info_fallback(worker)
    else:
        zone_emoji, zone_message = worker.get_activity_zone()
    
    text = f"üìà **–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {worker.activity_level}**\n\n"
    text += f"{zone_emoji} {zone_message}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    text += "**–ö–∞–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?**\n"
    text += "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ = +20\n"
    text += "‚úÖ –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏–π = +1\n\n"
    
    if worker.activity_level < 9:
        text += "‚ö†Ô∏è –ü—Ä–∏ –∫—Ä–∞—Å–Ω–æ–π –∑–æ–Ω–µ –º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É\n\n"
    
    text += "üí° –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤!"
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=kbc.menu_btn(),
            parse_mode='Markdown'
        )
    except Exception:
        try:
            await callback.message.delete()
        except Exception:
            pass
        await callback.message.answer(
            text=text,
            reply_markup=kbc.menu_btn(),
            parse_mode='Markdown'
        )
    await state.set_state(WorkStates.worker_menu)


@router.callback_query(F.data == "worker_status", WorkStates.worker_menu)
async def worker_status(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    logger.debug(f'worker_status...')
    kbc = KeyboardCollection()
    
    worker = await Worker.get_worker(tg_id=callback.message.chat.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    from app.data.database.models import WorkerStatus
    worker_status_obj = await WorkerStatus.get_or_create(worker.id)
    
    text = "üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è**\n\n"
    text += "–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ:\n\n"
    text += "‚úÖ **–ò–ü** (–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è)\n"
    text += "‚úÖ **–û–û–û** (–û–±—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é)\n"
    text += "‚úÖ **–°–ó** (–°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç–∏)\n\n"
    text += "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –æ—Ç–º–µ—Ç–∫–∞ ‚Äî —ç—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑.\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    has_any_status = worker_status_obj.has_ip or worker_status_obj.has_ooo or worker_status_obj.has_sz
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    if worker_status_obj.has_ip:
        text += "**–í–∞—à —Å—Ç–∞—Ç—É—Å:**\n‚úÖ –ò–ü –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n"
    elif worker_status_obj.has_ooo:
        text += "**–í–∞—à —Å—Ç–∞—Ç—É—Å:**\n‚úÖ –û–û–û –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\n"
    elif worker_status_obj.has_sz:
        text += "**–í–∞—à —Å—Ç–∞—Ç—É—Å:**\n‚úÖ –°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n"
    else:
        text += "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ù–ï–¢ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    if not has_any_status:
        builder.add(kbc._inline("üë§ –ò–ü", "confirm_ip_status"))
        builder.add(kbc._inline("üè¢ –û–û–û", "confirm_ooo_status"))
        builder.add(kbc._inline("üè≠ –°–ó", "confirm_sz_status"))
    
    builder.add(kbc._inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", "worker_menu"))
    builder.adjust(1)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode='Markdown'
        )
    except Exception:
        try:
            await callback.message.delete()
        except Exception:
            pass
        await callback.message.answer(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode='Markdown'
        )
    await state.set_state(WorkStates.worker_menu)


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –°–¢–ê–¢–£–°–û–í ==========

@router.callback_query(F.data == "confirm_ip_status", WorkStates.worker_menu)
async def confirm_ip_status(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–æ—Å –û–ì–†–ù–ò–ü –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ò–ü"""
    logger.debug(f'confirm_ip_status...')
    kbc = KeyboardCollection()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    from app.data.database.models import WorkerStatus
    worker_status = await WorkerStatus.get_or_create(worker.id)
    
    if worker_status.has_ip or worker_status.has_ooo or worker_status.has_sz:
        await callback.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å", show_alert=True)
        return
    
    text = "üë§ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ò–ü**\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ –í–∞—à **–û–ì–†–ù–ò–ü**\n\n"
    text += "üí° –û–ì–†–ù–ò–ü ‚Äî —ç—Ç–æ 15-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è"
    
    await state.set_state(WorkStates.individual_entrepreneur)
    
    msg = await callback.message.answer(
        text=text,
        reply_markup=kbc.back_btn(),
        parse_mode='Markdown'
    )
    
    try:
        await callback.message.delete()
    except Exception:
        pass
    
    await state.update_data(msg_id=msg.message_id)


@router.callback_query(F.data == "confirm_ooo_status", WorkStates.worker_menu)
async def confirm_ooo_status(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–æ—Å –û–ì–†–ù –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –û–û–û"""
    logger.debug(f'confirm_ooo_status...')
    kbc = KeyboardCollection()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    from app.data.database.models import WorkerStatus
    worker_status = await WorkerStatus.get_or_create(worker.id)
    
    if worker_status.has_ip or worker_status.has_ooo or worker_status.has_sz:
        await callback.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å", show_alert=True)
        return
    
    text = "üè¢ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –û–û–û**\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ –í–∞—à **–û–ì–†–ù**\n\n"
    text += "üí° –û–ì–†–ù ‚Äî —ç—Ç–æ 13-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞"
    
    await state.set_state(WorkStates.confirm_ooo_status)
    
    msg = await callback.message.answer(
        text=text,
        reply_markup=kbc.back_btn(),
        parse_mode='Markdown'
    )
    
    try:
        await callback.message.delete()
    except Exception:
        pass
    
    await state.update_data(msg_id=msg.message_id)


@router.callback_query(F.data == "confirm_sz_status", WorkStates.worker_menu)
async def confirm_sz_status(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–æ—Å –ò–ù–ù –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –°–ó"""
    logger.debug(f'confirm_sz_status...')
    kbc = KeyboardCollection()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    from app.data.database.models import WorkerStatus
    worker_status = await WorkerStatus.get_or_create(worker.id)
    
    if worker_status.has_ip or worker_status.has_ooo or worker_status.has_sz:
        await callback.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å", show_alert=True)
        return
    
    text = "üè≠ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç–∏**\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ –í–∞—à **–ò–ù–ù**\n\n"
    text += "üí° –ò–ù–ù ‚Äî —ç—Ç–æ 12-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ª–æ–≥–æ–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞"
    
    await state.set_state(WorkStates.confirm_sz_status)
    
    msg = await callback.message.answer(
        text=text,
        reply_markup=kbc.back_btn(),
        parse_mode='Markdown'
    )
    
    try:
        await callback.message.delete()
    except Exception:
        pass
    
    await state.update_data(msg_id=msg.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –û–ì–†–ù–ò–ü (–ò–ü) - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
@router.message(F.text, WorkStates.individual_entrepreneur)
async def process_ip_confirmation(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ò–ü"""
    logger.debug(f'process_ip_confirmation...')
    kbc = KeyboardCollection()
    
    state_data = await state.get_data()
    msg_id = state_data.get('msg_id')
    
    ogrnip = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if not ogrnip.isdigit():
        await message.answer(
            text="‚ùå –û–ì–†–ù–ò–ü –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!\n\n"
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–µ–∑ –±—É–∫–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=kbc.back_btn()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –û–ì–†–ù–ò–ü (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 15 —Ü–∏—Ñ—Ä)
    if len(ogrnip) != 15:
        await message.answer(
            text="‚ùå –û–ì–†–ù–ò–ü –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 15 —Ü–∏—Ñ—Ä!\n\n"
                 f"–í—ã –≤–≤–µ–ª–∏ {len(ogrnip)} —Ü–∏—Ñ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=kbc.back_btn()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –û–ì–†–ù–ò–ü
    from app.untils import help_defs
    result = help_defs.check_ip_status_by_ogrnip(ogrnip=ogrnip)
    
    if msg_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except Exception:
            pass
    
    await state.set_state(WorkStates.worker_menu)
    
    if result:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
        worker = await Worker.get_worker(tg_id=message.chat.id)
        from app.data.database.models import WorkerStatus
        from datetime import datetime
        worker_status = await WorkerStatus.get_or_create(worker.id)
        worker_status.has_ip = True
        worker_status.ip_number = ogrnip
        worker_status.last_status_check = datetime.now().isoformat()
        await worker_status.save()
        
        # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        await worker.update_individual_entrepreneur(individual_entrepreneur=True)
        
        await message.answer(
            text=f"‚úÖ **–í–∞—à —Å—Ç–∞—Ç—É—Å –ò–ü –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**\n\n{result}",
            reply_markup=kbc.menu(),
            parse_mode='Markdown'
        )
    else:
        await message.answer(
            text="‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—ã—Ç–∫—É...\n\n"
                 "–ù–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ç—É—Å' –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.",
            reply_markup=kbc.menu()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –û–ì–†–ù (–û–û–û)
@router.message(F.text, WorkStates.confirm_ooo_status)
async def process_ooo_confirmation(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –û–û–û"""
    logger.debug(f'process_ooo_confirmation...')
    kbc = KeyboardCollection()
    
    state_data = await state.get_data()
    msg_id = state_data.get('msg_id')
    
    ogrn = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if not ogrn.isdigit():
        await message.answer(
            text="‚ùå –û–ì–†–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!\n\n"
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–µ–∑ –±—É–∫–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=kbc.back_btn()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –û–ì–†–ù (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 13 —Ü–∏—Ñ—Ä)
    if len(ogrn) != 13:
        await message.answer(
            text="‚ùå –û–ì–†–ù –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 13 —Ü–∏—Ñ—Ä!\n\n"
                 f"–í—ã –≤–≤–µ–ª–∏ {len(ogrn)} —Ü–∏—Ñ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=kbc.back_btn()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –û–ì–†–ù
    from app.untils import help_defs
    result = help_defs.check_ooo(query=ogrn)
    
    if msg_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except Exception:
            pass
    
    await state.set_state(WorkStates.worker_menu)
    
    if result == "error":
        await message.answer(
            text="‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∑–∂–µ...",
            reply_markup=kbc.menu()
        )
    elif result:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
        worker = await Worker.get_worker(tg_id=message.chat.id)
        from app.data.database.models import WorkerStatus
        from datetime import datetime
        worker_status = await WorkerStatus.get_or_create(worker.id)
        worker_status.has_ooo = True
        worker_status.ooo_number = ogrn
        worker_status.last_status_check = datetime.now().isoformat()
        await worker_status.save()
        
        await message.answer(
            text="‚úÖ **–í–∞—à —Å—Ç–∞—Ç—É—Å –û–û–û –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**",
            reply_markup=kbc.menu(),
            parse_mode='Markdown'
        )
    else:
        await message.answer(
            text="‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—ã—Ç–∫—É...\n\n"
                 "–ù–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ç—É—Å' –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.",
            reply_markup=kbc.menu()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ò–ù–ù (–°–ó)
@router.message(F.text, WorkStates.confirm_sz_status)
async def process_sz_confirmation(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç–∏"""
    logger.debug(f'process_sz_confirmation...')
    kbc = KeyboardCollection()
    
    state_data = await state.get_data()
    msg_id = state_data.get('msg_id')
    
    inn = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if not inn.isdigit():
        await message.answer(
            text="‚ùå –ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!\n\n"
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–µ–∑ –±—É–∫–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=kbc.back_btn()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ò–ù–ù (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 12 —Ü–∏—Ñ—Ä)
    if len(inn) != 12:
        await message.answer(
            text="‚ùå –ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 12 —Ü–∏—Ñ—Ä!\n\n"
                 f"–í—ã –≤–≤–µ–ª–∏ {len(inn)} —Ü–∏—Ñ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=kbc.back_btn()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ù–ù
    from app.untils import help_defs
    result = help_defs.check_npd(inn=inn)
    
    if msg_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except Exception:
            pass
    
    await state.set_state(WorkStates.worker_menu)
    
    if result == "error":
        await message.answer(
            text="‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∑–∂–µ...",
            reply_markup=kbc.menu()
        )
    elif result:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
        worker = await Worker.get_worker(tg_id=message.chat.id)
        from app.data.database.models import WorkerStatus
        from datetime import datetime
        worker_status = await WorkerStatus.get_or_create(worker.id)
        worker_status.has_sz = True
        worker_status.sz_number = inn
        worker_status.last_status_check = datetime.now().isoformat()
        await worker_status.save()
        
        await message.answer(
            text="‚úÖ **–í–∞—à —Å—Ç–∞—Ç—É—Å –°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**",
            reply_markup=kbc.menu(),
            parse_mode='Markdown'
        )
    else:
        await message.answer(
            text="‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—ã—Ç–∫—É...\n\n"
                 "–ù–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ç—É—Å' –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.",
            reply_markup=kbc.menu()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
@router.callback_query(F.data == "back", WorkStates.individual_entrepreneur)
async def back_from_ip_confirmation(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ò–ü"""
    logger.debug(f'back_from_ip_confirmation...')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –û–ì–†–ù–ò–ü
    state_data = await state.get_data()
    msg_id = state_data.get('msg_id')
    if msg_id:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
        except Exception:
            pass
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–æ–≤
    await state.set_state(WorkStates.worker_menu)
    await worker_status(callback, state)


@router.callback_query(F.data == "back", WorkStates.confirm_ooo_status)
async def back_from_ooo_confirmation(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –û–û–û"""
    logger.debug(f'back_from_ooo_confirmation...')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –û–ì–†–ù
    state_data = await state.get_data()
    msg_id = state_data.get('msg_id')
    if msg_id:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
        except Exception:
            pass
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–æ–≤
    await state.set_state(WorkStates.worker_menu)
    await worker_status(callback, state)


@router.callback_query(F.data == "back", WorkStates.confirm_sz_status)
async def back_from_sz_confirmation(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –°–ó"""
    logger.debug(f'back_from_sz_confirmation...')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ò–ù–ù
    state_data = await state.get_data()
    msg_id = state_data.get('msg_id')
    if msg_id:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
        except Exception:
            pass
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–æ–≤
    await state.set_state(WorkStates.worker_menu)
    await worker_status(callback, state)


# # ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô –†–ê–ë–û–¢–´ ==========

# @router.callback_query(F.data == "choose_work_types", WorkStates.worker_menu)
# async def choose_work_types_handler(callback: CallbackQuery, state: FSMContext) -> None:
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'"""
#     logger.debug(f'choose_work_types_handler...')
#     kbc = KeyboardCollection()
    
#     worker = await Worker.get_worker(tg_id=callback.from_user.id)
#     worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
    
#     # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
#     from app.data.database.models import WorkerWorkTypeChanges
    
#     # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
#     await WorkerWorkTypeChanges.create_table_if_not_exists()
    
#     # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
#     work_type_changes = await WorkerWorkTypeChanges.get_or_create(worker.id)
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
#     can_change, message = work_type_changes.can_change_work_types()
    
#     if not can_change:
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏
#         try:
#             await callback.message.edit_text(
#                 text=message + "\n\nüí° –í—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –æ–∂–∏–¥–∞–Ω–∏—è.",
#                 reply_markup=kbc.menu_btn(),
#                 parse_mode='Markdown'
#             )
#         except Exception:
#             try:
#                 await callback.message.delete()
#             except Exception:
#                 pass
#             await callback.message.answer(
#                 text=message + "\n\nüí° –í—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –æ–∂–∏–¥–∞–Ω–∏—è.",
#                 reply_markup=kbc.menu_btn(),
#                 parse_mode='Markdown'
#             )
#         return
    
#     # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ —Ä–∞–Ω–≥–∞
#     from app.data.database.models import WorkerRank
#     worker_rank = await WorkerRank.get_or_create_rank(worker.id)
#     rank_work_types_limit = worker_rank.get_work_types_limit()
    
#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
#     if worker_sub.unlimited_work_types:
#         count_work_types = 100  # –ë–µ–∑–ª–∏–º–∏—Ç
#         limit_text = "–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
#     else:
#         # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç –∏–∑ —Ä–∞–Ω–≥–∞
#         count_work_types = rank_work_types_limit or 1
#         limit_text = f"{count_work_types} –∏–∑ 20"
    
#     # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
#     all_work_types = await WorkType.get_all()
    
#     # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
#     selected_ids = worker_sub.work_type_ids if worker_sub.work_type_ids else []
    
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
#     original_work_types = set(selected_ids) if selected_ids else set()
    
#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
#     text = "üéØ **–ú–æ–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç**\n\n"
#     text += f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {limit_text}\n"
    
#     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
#     if work_type_changes.changes_count > 0:
#         remaining = 3 - work_type_changes.changes_count
#         if remaining > 0:
#             text += f"‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {work_type_changes.changes_count}/3 (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining})\n"
#         else:
#             text += f"‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {work_type_changes.changes_count}/3 (–ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω)\n"
    
#     if message:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
#         text += f"{message}\n"
    
#     text += f"\n"
    
#     if selected_ids:
#         text += f"**–í—ã–±—Ä–∞–Ω–æ:** {len(selected_ids)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n\n"
#         text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
#         text += "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö."
#     else:
#         text += "**–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.**\n\n"
#         text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ."
    
#     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
#     await state.set_state(WorkStates.worker_choose_work_types)
#     await state.update_data(page=0, original_work_types=list(original_work_types))
    
#     try:
#         await callback.message.edit_text(
#             text=text,
#             reply_markup=kbc.choose_work_types_improved(
#                 all_work_types=all_work_types,
#                 selected_ids=selected_ids,
#                 count_work_types=count_work_types,
#                 page=0,
#                 btn_back=True,
#                 name_btn_back='‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
#             ),
#             parse_mode='Markdown'
#         )
#     except Exception:
#         try:
#             await callback.message.delete()
#         except Exception:
#             pass
#         await callback.message.answer(
#             text=text,
#             reply_markup=kbc.choose_work_types_improved(
#                 all_work_types=all_work_types,
#                 selected_ids=selected_ids,
#                 count_work_types=count_work_types,
#                 page=0,
#                 btn_back=True,
#                 name_btn_back='‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
#             ),
#             parse_mode='Markdown'
#         )


# @router.callback_query(lambda c: c.data.startswith('add_work_type_'), WorkStates.worker_choose_work_types)
# async def add_work_type_handler(callback: CallbackQuery, state: FSMContext) -> None:
#     """–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
#     logger.debug(f'add_work_type_handler...')
#     kbc = KeyboardCollection()
    
#     work_type_id = int(callback.data.split('_')[3])
    
#     worker = await Worker.get_worker(tg_id=callback.from_user.id)
#     worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
    
#     # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ —Ä–∞–Ω–≥–∞
#     from app.data.database.models import WorkerRank
#     worker_rank = await WorkerRank.get_or_create_rank(worker.id)
#     rank_work_types_limit = worker_rank.get_work_types_limit()
    
#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
#     if worker_sub.unlimited_work_types:
#         count_work_types = 100
#     else:
#         count_work_types = rank_work_types_limit or 1
    
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
#     selected_ids = worker_sub.work_type_ids if worker_sub.work_type_ids else []
    
#     # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
#     if str(work_type_id) not in selected_ids:
#         selected_ids.append(str(work_type_id))
        
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
#         await worker_sub.update_work_type_ids(work_type_ids=selected_ids)
    
#     # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
#     all_work_types = await WorkType.get_all()
#     state_data = await state.get_data()
#     page = state_data.get('page', 0)
    
#     text = "üéØ **–ú–æ–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç**\n\n"
#     text += f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {count_work_types if count_work_types < 100 else '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ'}\n"
#     text += f"**–í—ã–±—Ä–∞–Ω–æ:** {len(selected_ids)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n\n"
#     text += "‚úÖ **–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!**\n\n"
#     text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞."
    
#     try:
#         await callback.message.edit_text(
#             text=text,
#             reply_markup=kbc.choose_work_types_improved(
#                 all_work_types=all_work_types,
#                 selected_ids=selected_ids,
#                 count_work_types=count_work_types,
#                 page=page,
#                 btn_back=True,
#                 name_btn_back='‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
#             ),
#             parse_mode='Markdown'
#         )
#     except Exception:
#         await callback.answer("‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")


# @router.callback_query(lambda c: c.data.startswith('remove_work_type_'), WorkStates.worker_choose_work_types)
# async def remove_work_type_handler(callback: CallbackQuery, state: FSMContext) -> None:
#     """–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
#     logger.debug(f'remove_work_type_handler...')
#     kbc = KeyboardCollection()
    
#     work_type_id = int(callback.data.split('_')[3])
    
#     worker = await Worker.get_worker(tg_id=callback.from_user.id)
#     worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
    
#     # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ —Ä–∞–Ω–≥–∞
#     from app.data.database.models import WorkerRank
#     worker_rank = await WorkerRank.get_or_create_rank(worker.id)
#     rank_work_types_limit = worker_rank.get_work_types_limit()
    
#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
#     if worker_sub.unlimited_work_types:
#         count_work_types = 100
#     else:
#         count_work_types = rank_work_types_limit or 1
    
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
#     selected_ids = worker_sub.work_type_ids if worker_sub.work_type_ids else []
    
#     # –£–¥–∞–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
#     if str(work_type_id) in selected_ids:
#         selected_ids.remove(str(work_type_id))
        
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
#         await worker_sub.update_work_type_ids(work_type_ids=selected_ids)
    
#     # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
#     all_work_types = await WorkType.get_all()
#     state_data = await state.get_data()
#     page = state_data.get('page', 0)
    
#     text = "üéØ **–ú–æ–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç**\n\n"
#     text += f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {count_work_types if count_work_types < 100 else '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ'}\n"
    
#     if selected_ids:
#         text += f"**–í—ã–±—Ä–∞–Ω–æ:** {len(selected_ids)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n\n"
#         text += "‚ùå **–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!**\n\n"
#         text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞."
#     else:
#         text += "**–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.**\n\n"
#         text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ."
    
#     try:
#         await callback.message.edit_text(
#             text=text,
#             reply_markup=kbc.choose_work_types_improved(
#                 all_work_types=all_work_types,
#                 selected_ids=selected_ids,
#                 count_work_types=count_work_types,
#                 page=page,
#                 btn_back=True,
#                 name_btn_back='‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
#             ),
#             parse_mode='Markdown'
#         )
#     except Exception:
#         await callback.answer("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")


# @router.callback_query(lambda c: c.data.startswith('work_types_page_'), WorkStates.worker_choose_work_types)
# async def work_types_pagination_handler(callback: CallbackQuery, state: FSMContext) -> None:
#     """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º"""
#     logger.debug(f'work_types_pagination_handler...')
#     kbc = KeyboardCollection()
    
#     page = int(callback.data.split('_')[3])
    
#     worker = await Worker.get_worker(tg_id=callback.from_user.id)
#     worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
    
#     # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ —Ä–∞–Ω–≥–∞
#     from app.data.database.models import WorkerRank
#     worker_rank = await WorkerRank.get_or_create_rank(worker.id)
#     rank_work_types_limit = worker_rank.get_work_types_limit()
    
#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
#     if worker_sub.unlimited_work_types:
#         count_work_types = 100
#     else:
#         count_work_types = rank_work_types_limit or 1
    
#     # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
#     all_work_types = await WorkType.get_all()
#     selected_ids = worker_sub.work_type_ids if worker_sub.work_type_ids else []
    
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
#     await state.update_data(page=page)
    
#     text = "üéØ **–ú–æ–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç**\n\n"
#     text += f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {count_work_types if count_work_types < 100 else '–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ'}\n"
    
#     if selected_ids:
#         text += f"**–í—ã–±—Ä–∞–Ω–æ:** {len(selected_ids)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n\n"
#         text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞."
#     else:
#         text += "**–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.**\n\n"
#         text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ."
    
#     try:
#         await callback.message.edit_text(
#             text=text,
#             reply_markup=kbc.choose_work_types_improved(
#                 all_work_types=all_work_types,
#                 selected_ids=selected_ids,
#                 count_work_types=count_work_types,
#                 page=page,
#                 btn_back=True,
#                 name_btn_back='‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'
#             ),
#             parse_mode='Markdown'
#         )
#     except Exception:
#         pass


# @router.callback_query(F.data == "show_selected_work_types", WorkStates.worker_choose_work_types)
# async def show_selected_work_types_handler(callback: CallbackQuery, state: FSMContext) -> None:
#     """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
#     logger.debug(f'show_selected_work_types_handler...')
#     kbc = KeyboardCollection()
    
#     worker = await Worker.get_worker(tg_id=callback.from_user.id)
#     worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
    
#     # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ —Ä–∞–Ω–≥–∞
#     from app.data.database.models import WorkerRank
#     worker_rank = await WorkerRank.get_or_create_rank(worker.id)
#     rank_work_types_limit = worker_rank.get_work_types_limit()
    
#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
#     if worker_sub.unlimited_work_types:
#         count_work_types = 100
#     else:
#         count_work_types = rank_work_types_limit or 1
    
#     # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
#     selected_ids = worker_sub.work_type_ids if worker_sub.work_type_ids else []
    
#     if not selected_ids:
#         await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π", show_alert=True)
#         return
    
#     # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
#     selected_work_types = []
#     for work_type_id in selected_ids:
#         work_type = await WorkType.get_work_type(id=int(work_type_id))
#         if work_type:
#             selected_work_types.append(work_type)
    
#     text = "üìã **–í—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç**\n\n"
#     text += f"**–í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ:** {len(selected_work_types)}/{count_work_types if count_work_types < 100 else '‚àû'}\n\n"
#     text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ:"
    
#     try:
#         await callback.message.edit_text(
#             text=text,
#             reply_markup=kbc.show_selected_work_types(
#                 selected_work_types=selected_work_types,
#                 count_work_types=count_work_types
#             ),
#             parse_mode='Markdown'
#         )
#     except Exception:
#         pass


# @router.callback_query(F.data == "back", WorkStates.worker_choose_work_types)
# async def back_from_work_types(callback: CallbackQuery, state: FSMContext) -> None:
#     """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –º–µ–Ω—é"""
#     logger.debug(f'back_from_work_types...')
    
#     worker = await Worker.get_worker(tg_id=callback.from_user.id)
#     worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
    
#     # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
#     state_data = await state.get_data()
#     original_work_types = set(state_data.get('original_work_types', []))
    
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#     current_work_types = set(worker_sub.work_type_ids if worker_sub.work_type_ids else [])
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
#     if original_work_types != current_work_types:
#         # –ë—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
#         from app.data.database.models import WorkerWorkTypeChanges
#         work_type_changes = await WorkerWorkTypeChanges.get_or_create(worker.id)
        
#         logger.info(f'[WORK_TYPES] Worker {worker.id} changing work types. Original: {original_work_types}, Current: {current_work_types}')
        
#         await work_type_changes.register_change()
        
#         logger.info(f'[WORK_TYPES] Worker {worker.id} registered change. Total changes: {work_type_changes.changes_count}/3')
        
#         # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ - –ø–æ–∫–∞–∂–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
#         if work_type_changes.changes_count >= 3:
#             from datetime import datetime
#             if work_type_changes.reset_date:
#                 reset_date = datetime.strptime(work_type_changes.reset_date, '%Y-%m-%d %H:%M:%S')
#                 days_left = (reset_date - datetime.now()).days + 1
#                 await callback.answer(
#                     f"‚ö†Ô∏è –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ 3 –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.\n–°–ª–µ–¥—É—é—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π.",
#                     show_alert=True
#                 )
#         else:
#             remaining = 3 - work_type_changes.changes_count
#             await callback.answer(
#                 f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n–û—Å—Ç–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏–π: {remaining}/3",
#                 show_alert=False
#             )
#     else:
#         logger.info(f'[WORK_TYPES] Worker {worker.id} exited without changes')
    
#     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
#     await state.set_state(WorkStates.worker_menu)
#     await show_worker_menu(callback, state, worker)


@router.callback_query(F.data == "add_city", WorkStates.worker_menu)
async def add_city(callback: CallbackQuery, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ (–ø–ª–∞—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    logger.debug(f'add_city...')
    kbc = KeyboardCollection()
    
    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    active_subscriptions = await WorkerCitySubscription.get_active_by_worker(worker.id)
    
    text = "üèôÔ∏è **–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ ‚ÇΩ**\n\n"
    
    if active_subscriptions:
        text += "**–ê–∫—Ç–∏–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:**\n"
        for subscription in active_subscriptions:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
            city_names = []
            for city_id in subscription.city_ids:
                city = await City.get_city(id=city_id)
                if city:
                    city_names.append(city.city)
            
            end_date = datetime.strptime(subscription.subscription_end, '%Y-%m-%d').strftime('%d.%m.%Y')
            text += f"‚Ä¢ {', '.join(city_names)} –¥–æ {end_date}\n"
        text += "\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:"
    
    builder = InlineKeyboardBuilder()
    builder.add(kbc._inline("+1 city", "city_count_1"))
    builder.add(kbc._inline("+2 city", "city_count_2"))
    builder.add(kbc._inline("+3 city", "city_count_3"))
    builder.add(kbc._inline("+4 city", "city_count_4"))
    builder.add(kbc._inline("+5 city", "city_count_5"))
    builder.add(kbc._inline("+10 city", "city_count_10"))
    builder.add(kbc._inline("+20 city", "city_count_20"))
    builder.add(kbc._inline("üè† –í –º–µ–Ω—é", "worker_menu"))
    builder.adjust(1)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode='Markdown'
        )
    except Exception:
        try:
            await callback.message.delete()
        except Exception:
            pass
        await callback.message.answer(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode='Markdown'
        )


@router.callback_query(lambda c: c.data.startswith('city_count_'))
async def city_count_selected(callback: CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Ä–æ–¥–æ–≤"""
    logger.debug(f'city_count_selected...')
    kbc = KeyboardCollection()
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ callback_data: city_count_1, city_count_2, etc.
    city_count = int(callback.data.split('_')[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(city_count=city_count)
    
    # –¶–µ–Ω—ã –∑–∞ –º–µ—Å—è—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Ä–æ–¥–æ–≤
    prices = {
        1: 90,    # 1 –º–µ—Å—è—Ü = 90‚ÇΩ
        2: 180,   # 2 –º–µ—Å—è—Ü–∞ = 171‚ÇΩ, –Ω–æ –∑–∞ –º–µ—Å—è—Ü = 90‚ÇΩ
        3: 270,   # 3 –º–µ—Å—è—Ü–∞ = 243‚ÇΩ, –Ω–æ –∑–∞ –º–µ—Å—è—Ü = 90‚ÇΩ
        4: 360,   # 4 –º–µ—Å—è—Ü–∞ = 360‚ÇΩ –∑–∞ –º–µ—Å—è—Ü
        5: 450,   # 5 –º–µ—Å—è—Ü–µ–≤ = 450‚ÇΩ –∑–∞ –º–µ—Å—è—Ü
        10: 900,  # 10 –º–µ—Å—è—Ü–µ–≤ = 900‚ÇΩ –∑–∞ –º–µ—Å—è—Ü
        20: 1800  # 20 –º–µ—Å—è—Ü–µ–≤ = 1800‚ÇΩ –∑–∞ –º–µ—Å—è—Ü
    }
    
    base_price = prices[city_count]
    
    text = f"üèôÔ∏è **+{city_count} city**\n\n"
    text += f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
    text += f"üí∞ –¶–µ–Ω—ã –∑–∞ {city_count} –≥–æ—Ä–æ–¥(–æ–≤):\n"
    text += f"‚Ä¢ 1 –º–µ—Å—è—Ü: {base_price}‚ÇΩ\n"
    text += f"‚Ä¢ 2 –º–µ—Å—è—Ü–∞: {int(base_price * 2 * 0.95)}‚ÇΩ (—Å–∫–∏–¥–∫–∞ 5%)\n"
    text += f"‚Ä¢ 3 –º–µ—Å—è—Ü–∞: {int(base_price * 3 * 0.9)}‚ÇΩ (—Å–∫–∏–¥–∫–∞ 10%)\n"
    text += f"‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤: {int(base_price * 6 * 0.8)}‚ÇΩ (—Å–∫–∏–¥–∫–∞ 20%)\n"
    text += f"‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤: {int(base_price * 12 * 0.7)}‚ÇΩ (—Å–∫–∏–¥–∫–∞ 30%)"
    
    builder = InlineKeyboardBuilder()
    builder.add(kbc._inline(f"–ö—É–ø–∏—Ç—å 1 –º–µ—Å—è—Ü {base_price}‚ÇΩ", f"city_period_1_{base_price}"))
    builder.add(kbc._inline(f"–ö—É–ø–∏—Ç—å 2 –º–µ—Å—è—Ü–∞ {int(base_price * 2 * 0.95)}‚ÇΩ", f"city_period_2_{int(base_price * 2 * 0.95)}"))
    builder.add(kbc._inline(f"–ö—É–ø–∏—Ç—å 3 –º–µ—Å—è—Ü–∞ {int(base_price * 3 * 0.9)}‚ÇΩ", f"city_period_3_{int(base_price * 3 * 0.9)}"))
    builder.add(kbc._inline(f"–ö—É–ø–∏—Ç—å 6 –º–µ—Å—è—Ü–µ–≤ {int(base_price * 6 * 0.8)}‚ÇΩ", f"city_period_6_{int(base_price * 6 * 0.8)}"))
    builder.add(kbc._inline(f"–ö—É–ø–∏—Ç—å 12 –º–µ—Å—è—Ü–µ–≤ {int(base_price * 12 * 0.7)}‚ÇΩ", f"city_period_12_{int(base_price * 12 * 0.7)}"))
    builder.add(kbc._inline("‚óÄÔ∏è –ö –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Ä–æ–¥–æ–≤", "add_city"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        text=text,
        reply_markup=builder.as_markup(),
        parse_mode='Markdown'
    )


@router.callback_query(lambda c: c.data.startswith('city_period_'))
async def city_period_selected(callback: CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥–æ—Ä–æ–¥–∞"""
    logger.debug(f'city_period_selected...')
    kbc = KeyboardCollection()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: city_period_{months}_{price}
    parts = callback.data.split('_')
    months = int(parts[2])
    price = int(parts[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    city_count = data.get('city_count', 1)
    
    text = f"üí∞ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏**\n\n"
    text += f"üèôÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤: {city_count}\n"
    text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {months} –º–µ—Å—è—Ü(–µ–≤)\n"
    text += f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚ÇΩ\n\n"
    text += f"–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ {months} –º–µ—Å—è—Ü–∞(–µ–≤).\n\n"
    text += f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?"
    
    builder = InlineKeyboardBuilder()
    builder.add(kbc._inline("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", f"confirm_city_purchase_{city_count}_{months}_{price}"))
    builder.add(kbc._inline("‚ùå –û—Ç–º–µ–Ω–∞", "add_city"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        text=text,
        reply_markup=builder.as_markup(),
        parse_mode='Markdown'
    )


@router.callback_query(lambda c: c.data.startswith('confirm_city_purchase_'))
async def confirm_city_purchase(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥–æ—Ä–æ–¥–∞"""
    logger.debug(f'confirm_city_purchase...')
    kbc = KeyboardCollection()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: confirm_city_purchase_{city_count}_{months}_{price}
    parts = callback.data.split('_')
    city_count = int(parts[3])
    months = int(parts[4])
    price = int(parts[5])
    
    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–∏–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã
        start_date = datetime.now()
        end_date = start_date + timedelta(days=months * 30)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –ø—É—Å—Ç—ã–º–∏ city_ids (–±—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã –ø–æ–∑–∂–µ)
        subscription = WorkerCitySubscription(
            id=None,  # –î–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            worker_id=worker.id,
            city_ids=[],  # –ü–æ–∫–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ—Ä–æ–¥–æ–≤
            subscription_start=start_date.strftime('%Y-%m-%d'),
            subscription_end=end_date.strftime('%Y-%m-%d'),
            subscription_months=months,
            price=price
        )
        await subscription.save()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
        worker = await Worker.get_worker(tg_id=callback.from_user.id)
        all_cities = await City.get_all()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        all_active_subscriptions = await WorkerCitySubscription.get_active_by_worker(worker.id)
        all_subscription_cities = []
        for subscription in all_active_subscriptions:
            all_subscription_cities.extend(subscription.city_ids)
        
        # –ò—Å–∫–ª—é—á–∞–µ–º: –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥, –≥–æ—Ä–æ–¥–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        excluded_cities = worker.city_id + all_subscription_cities
        available_cities = [city for city in all_cities if city.id not in excluded_cities]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤
        await state.update_data(
            subscription_id=subscription.id,
            city_count=city_count,
            selected_cities=[]
        )
        
        text = f"‚úÖ **–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!**\n\n"
        text += f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {city_count} –≥–æ—Ä–æ–¥(–æ–≤) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
        text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {months} –º–µ—Å—è—Ü(–µ–≤)\n"
        text += f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y')}\n\n"
        
        if len(available_cities) == 0:
            text += f"‚ö†Ô∏è **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞!**\n"
            text += f"–í—Å–µ –≥–æ—Ä–æ–¥–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∏–ª–∏ —è–≤–ª—è—é—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏.\n"
            text += f"–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞ –ø–æ–∑–∂–µ."
            
            await callback.message.edit_text(
                text=text,
                reply_markup=kbc.menu_btn(),
                parse_mode='Markdown'
            )
            await state.set_state(WorkStates.worker_menu)
        else:
            text += f"üìç –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–æ–≤
            await state.set_state(WorkStates.worker_choose_subscription_cities)
            await choose_subscription_cities(callback, state)
        
    except Exception as e:
        logger.error(f"Error in confirm_city_purchase: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ", show_alert=True)


async def choose_subscription_cities(callback: CallbackQuery, state: FSMContext) -> None:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    kbc = KeyboardCollection()
    data = await state.get_data()
    city_count = data.get('city_count', 1)
    selected_cities = data.get('selected_cities', [])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∫—Ä–æ–º–µ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    all_cities = await City.get_all()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞) –∏–ª–∏ –≤—ã—á–∏—Å–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
    excluded_from_state = data.get('excluded_cities', [])
    if excluded_from_state:
        # –≠—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        excluded_cities = selected_cities + worker.city_id + excluded_from_state
    else:
        # –≠—Ç–æ –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        all_active_subscriptions = await WorkerCitySubscription.get_active_by_worker(worker.id)
        all_subscription_cities = []
        for subscription in all_active_subscriptions:
            all_subscription_cities.extend(subscription.city_ids)
        
        # –ò—Å–∫–ª—é—á–∞–µ–º: —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ, –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥, –≥–æ—Ä–æ–¥–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        excluded_cities = selected_cities + worker.city_id + all_subscription_cities
    
    available_cities = [city for city in all_cities if city.id not in excluded_cities]
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
    cities_dict = {city.id: city.city for city in all_cities}
    main_city_names = [cities_dict.get(city_id, f"–ì–æ—Ä–æ–¥ {city_id}") for city_id in worker.city_id]
    
    text = f"üèôÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
    text += f"üìä –í—ã–±—Ä–∞–Ω–æ: {len(selected_cities)} –∏–∑ {city_count}\n\n"
    
    if len(available_cities) == 0:
        text += f"‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞!**\n"
        text += f"–í—Å–µ –≥–æ—Ä–æ–¥–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∏–ª–∏ —è–≤–ª—è—é—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏."
    elif len(selected_cities) >= city_count:
        text += f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤!\n"
        text += f"–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
    else:
        text += f"üí° **–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞** –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:\n"
        text += f"–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ {city_count - len(selected_cities)} –≥–æ—Ä–æ–¥(–æ–≤)"
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    if len(available_cities) > 0:
        page = data.get('city_page', 0)
        cities_per_page = 8
        start_idx = page * cities_per_page
        end_idx = start_idx + cities_per_page
        page_cities = available_cities[start_idx:end_idx]
        
        for city in page_cities:
            city_name = city.city
            if city.id in selected_cities:
                builder.add(kbc._inline(f"‚úÖ {city_name}", f"subscription_city_select_{city.id}"))
            else:
                builder.add(kbc._inline(f"‚ùå {city_name}", f"subscription_city_select_{city.id}"))
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        nav_buttons = []
        if page > 0:
            nav_buttons.append(kbc._inline("‚óÄÔ∏è", f"subscription_city_page_{page-1}"))
        
        total_pages = (len(available_cities) + cities_per_page - 1) // cities_per_page
        if total_pages > 1:
            nav_buttons.append(kbc._inline(f"{page+1}/{total_pages}", "subscription_city_noop"))
        
        if page < total_pages - 1:
            nav_buttons.append(kbc._inline("‚ñ∂Ô∏è", f"subscription_city_page_{page+1}"))
        
        if nav_buttons:
            builder.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if len(selected_cities) >= city_count and len(available_cities) > 0:
        builder.add(kbc._inline("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", "subscription_cities_confirm"))
    
    builder.add(kbc._inline("üè† –í –º–µ–Ω—é", "worker_menu"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        text=text,
        reply_markup=builder.as_markup(),
        parse_mode='Markdown'
    )


@router.callback_query(lambda c: c.data.startswith('subscription_city_select_'))
async def subscription_city_select(callback: CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä/–æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    city_id = int(callback.data.split('_')[3])
    data = await state.get_data()
    selected_cities = data.get('selected_cities', [])
    city_count = data.get('city_count', 1)
    
    if city_id in selected_cities:
        # –£–±–∏—Ä–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        selected_cities.remove(city_id)
        await callback.answer("‚ùå –ì–æ—Ä–æ–¥ —É–±—Ä–∞–Ω –∏–∑ –≤—ã–±–æ—Ä–∞")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç)
        if len(selected_cities) < city_count:
            selected_cities.append(city_id)
            await callback.answer("‚úÖ –ì–æ—Ä–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤—ã–±–æ—Ä")
        else:
            await callback.answer(f"‚ùå –ú–∞–∫—Å–∏–º—É–º {city_count} –≥–æ—Ä–æ–¥–æ–≤", show_alert=True)
            return
    
    await state.update_data(selected_cities=selected_cities)
    await choose_subscription_cities(callback, state)


@router.callback_query(lambda c: c.data.startswith('subscription_city_page_'))
async def subscription_city_page(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤"""
    page = int(callback.data.split('_')[3])
    await state.update_data(city_page=page)
    await choose_subscription_cities(callback, state)


@router.callback_query(F.data == "subscription_cities_confirm")
async def subscription_cities_confirm(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    kbc = KeyboardCollection()
    data = await state.get_data()
    selected_cities = data.get('selected_cities', [])
    subscription_id = data.get('subscription_id')
    city_count = data.get('city_count', 1)
    
    if len(selected_cities) != city_count:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –≥–æ—Ä–æ–¥–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    city_names = []
    for city_id in selected_cities:
        city = await City.get_city(id=city_id)
        if city:
            city_names.append(city.city)
    
    text = f"‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞**\n\n"
    text += f"üèôÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:\n"
    for name in city_names:
        text += f"‚Ä¢ {name}\n"
    text += f"\nüìä –í—Å–µ–≥–æ: {len(selected_cities)} –≥–æ—Ä–æ–¥–æ–≤\n\n"
    text += f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä?"
    
    builder = InlineKeyboardBuilder()
    builder.add(kbc._inline("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "subscription_cities_final_confirm"))
    builder.add(kbc._inline("‚ùå –û—Ç–º–µ–Ω–∞", "subscription_cities_back"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        text=text,
        reply_markup=builder.as_markup(),
        parse_mode='Markdown'
    )


@router.callback_query(F.data == "subscription_cities_final_confirm")
async def subscription_cities_final_confirm(callback: CallbackQuery, state: FSMContext) -> None:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤"""
    kbc = KeyboardCollection()
    data = await state.get_data()
    selected_cities = data.get('selected_cities', [])
    subscription_id = data.get('subscription_id')
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏
        worker = await Worker.get_worker(tg_id=callback.from_user.id)
        active_subscriptions = await WorkerCitySubscription.get_active_by_worker(worker.id)
        
        existing_subscription = None
        for subscription in active_subscriptions:
            if subscription.id == subscription_id:
                existing_subscription = subscription
                break
        
        if existing_subscription:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —Å –Ω–æ–≤—ã–º–∏
            all_selected_cities = existing_subscription.city_ids + selected_cities
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            all_selected_cities = list(set(all_selected_cities))
        else:
            all_selected_cities = selected_cities
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏
        conn = await aiosqlite.connect(database='app/data/database/database.db')
        city_ids_str = '|'.join(map(str, all_selected_cities))
        await conn.execute(
            'UPDATE worker_city_subscriptions SET city_ids = ? WHERE id = ?',
            [city_ids_str, subscription_id])
        await conn.commit()
        await conn.close()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        all_city_names = []
        for city_id in all_selected_cities:
            city = await City.get_city(id=city_id)
            if city:
                all_city_names.append(city.city)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
        new_city_names = []
        for city_id in selected_cities:
            city = await City.get_city(id=city_id)
            if city:
                new_city_names.append(city.city)
        
        text = f"üéâ **–ì–æ—Ä–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø–æ–¥–ø–∏—Å–∫—É!**\n\n"
        if new_city_names:
            text += f"üÜï –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:\n"
            for name in new_city_names:
                text += f"‚Ä¢ {name}\n"
            text += f"\n"
        
        text += f"üèôÔ∏è –í—Å–µ –≥–æ—Ä–æ–¥–∞ –≤ –ø–æ–¥–ø–∏—Å–∫–µ:\n"
        for name in all_city_names:
            text += f"‚Ä¢ {name}\n"
        text += f"\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ –≤—Å–µ—Ö —ç—Ç–∏—Ö –≥–æ—Ä–æ–¥–æ–≤!"
        
        await callback.message.edit_text(
            text=text,
            reply_markup=kbc.menu_btn(),
            parse_mode='Markdown'
        )
        await state.set_state(WorkStates.worker_menu)
        
    except Exception as e:
        logger.error(f"Error in subscription_cities_final_confirm: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data == "subscription_cities_back")
async def subscription_cities_back(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–æ–≤"""
    await choose_subscription_cities(callback, state)


@router.callback_query(F.data == "subscription_city_noop")
async def subscription_city_noop(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    await callback.answer()


@router.message(F.text, WorkStates.worker_choose_subscription_cities)
async def subscription_city_search(message: Message, state: FSMContext) -> None:
    """–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    kbc = KeyboardCollection()
    city_input = message.text
    logger.debug(f'subscription_city_search: {city_input}')

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_cities = data.get('selected_cities', [])
    city_count = data.get('city_count', 1)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    worker = await Worker.get_worker(tg_id=message.from_user.id)
    all_cities = await City.get_all(sort=False)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞) –∏–ª–∏ –≤—ã—á–∏—Å–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
    excluded_from_state = data.get('excluded_cities', [])
    if excluded_from_state:
        # –≠—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        excluded_cities = selected_cities + worker.city_id + excluded_from_state
    else:
        # –≠—Ç–æ –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        all_active_subscriptions = await WorkerCitySubscription.get_active_by_worker(worker.id)
        all_subscription_cities = []
        for subscription in all_active_subscriptions:
            all_subscription_cities.extend(subscription.city_ids)
        
        # –ò—Å–∫–ª—é—á–∞–µ–º: —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ, –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥, –≥–æ—Ä–æ–¥–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        excluded_cities = selected_cities + worker.city_id + all_subscription_cities
    
    available_cities = [city for city in all_cities if city.id not in excluded_cities]
    
    city_names = [city.city for city in available_cities]

    # –ò—â–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    city_find = await checks.levenshtein_distance_check_city(phrase=city_input, words=city_names)
    if not city_find:
        await message.answer(text=f'‚ùå –ì–æ—Ä–æ–¥ "{city_input}" –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏')
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    found_cities = []
    for i in city_find:
        if i <= len(available_cities):
            found_cities.append(available_cities[i-1])

    city_names = [city.city for city in found_cities]
    city_ids = [city.id for city in found_cities]

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    main_city_names = []
    for city_id in worker.city_id:
        city = await City.get_city(id=city_id)
        if city:
            main_city_names.append(city.city)

    text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ: {city_input}**\n\n"
    text += f"üìä –í—ã–±—Ä–∞–Ω–æ: {len(selected_cities)} –∏–∑ {city_count}\n"
    text += f"üìç –û—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥: {', '.join(main_city_names)}\n\n"
    text += f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:"

    builder = InlineKeyboardBuilder()
    
    for city in found_cities:
        city_name = city.city
        if city.id in selected_cities:
            builder.add(kbc._inline(f"‚úÖ {city_name}", f"subscription_city_select_{city.id}"))
        else:
            builder.add(kbc._inline(f"‚ùå {city_name}", f"subscription_city_select_{city.id}"))
    
    builder.add(kbc._inline("‚óÄÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", "subscription_city_cancel_search"))
    builder.adjust(1)

    await message.answer(
        text=text,
        reply_markup=builder.as_markup(),
        parse_mode='Markdown'
    )


@router.callback_query(F.data == "subscription_city_cancel_search")
async def subscription_city_cancel_search(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–ø–∏—Å–∫—É"""
    await state.update_data(city_page=0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await choose_subscription_cities(callback, state)


@router.callback_query(lambda c: c.data.startswith('city_subscription_'))
async def city_subscription_management(callback: CallbackQuery, state: FSMContext) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –≥–æ—Ä–æ–¥–∞"""
    logger.debug(f'city_subscription_management...')
    kbc = KeyboardCollection()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: city_subscription_{action}_{subscription_id}
    parts = callback.data.split('_')
    action = parts[2]  # renew, change, cancel
    subscription_id = int(parts[3])
    
    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    
    if action == "renew":
        # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ –∂–µ —Ç–∞—Ä–∏—Ñ—ã
        text = f"üîÑ **–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
        text += f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription = await WorkerCitySubscription.get_active_by_worker(worker.id)
        if not subscription:
            await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        city_count = len(subscription[0].city_ids) if subscription else 1
        
        # –¶–µ–Ω—ã –∑–∞ –º–µ—Å—è—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Ä–æ–¥–æ–≤
        prices = {
            1: 90, 2: 180, 3: 270, 4: 360, 5: 450, 10: 900, 20: 1800
        }
        base_price = prices.get(city_count, 90)
        
        builder = InlineKeyboardBuilder()
        builder.add(kbc._inline(f"–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü {base_price}‚ÇΩ", f"city_period_1_{base_price}"))
        builder.add(kbc._inline(f"–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 2 –º–µ—Å—è—Ü–∞ {int(base_price * 2 * 0.95)}‚ÇΩ", f"city_period_2_{int(base_price * 2 * 0.95)}"))
        builder.add(kbc._inline(f"–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 3 –º–µ—Å—è—Ü–∞ {int(base_price * 3 * 0.9)}‚ÇΩ", f"city_period_3_{int(base_price * 3 * 0.9)}"))
        builder.add(kbc._inline(f"–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ {int(base_price * 6 * 0.8)}‚ÇΩ", f"city_period_6_{int(base_price * 6 * 0.8)}"))
        builder.add(kbc._inline(f"–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤ {int(base_price * 12 * 0.7)}‚ÇΩ", f"city_period_12_{int(base_price * 12 * 0.7)}"))
        builder.add(kbc._inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", "add_city"))
        builder.adjust(1)
        
    elif action == "change":
        # –°–º–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Ä–æ–¥–æ–≤
        await add_city(callback, state)
        return
        
    elif action == "cancel":
        # –û—Ç–∫–∞–∑ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        text = f"‚ùå **–û—Ç–∫–∞–∑ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
        text += f"–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞, –≤—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ—ë —Å–Ω–æ–≤–∞ –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è!"
        
        builder = InlineKeyboardBuilder()
        builder.add(kbc._inline("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–∫–∞–∑", f"confirm_cancel_subscription_{subscription_id}"))
        builder.add(kbc._inline("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", "add_city"))
        builder.adjust(1)
    
    await callback.message.edit_text(
        text=text,
        reply_markup=builder.as_markup(),
        parse_mode='Markdown'
    )


@router.callback_query(lambda c: c.data.startswith('confirm_cancel_subscription_'))
async def confirm_cancel_subscription(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    logger.debug(f'confirm_cancel_subscription...')
    kbc = KeyboardCollection()
    
    subscription_id = int(callback.data.split('_')[3])
    
    try:
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        conn = await aiosqlite.connect(database='app/data/database/database.db')
        await conn.execute(
            'UPDATE worker_city_subscriptions SET active = 0 WHERE id = ?',
            [subscription_id])
        await conn.commit()
        await conn.close()
        
        text = f"‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n"
        text += f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
        text += f"–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ—ë –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –º–µ–Ω—é."
        
        await callback.message.edit_text(
            text=text,
            reply_markup=kbc.menu_btn(),
            parse_mode='Markdown'
        )
        await state.set_state(WorkStates.worker_menu)
        
    except Exception as e:
        logger.error(f"Error in confirm_cancel_subscription: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ", show_alert=True)


async def send_city_subscription_expiry_notifications():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –≥–æ—Ä–æ–¥–∞"""
    try:
        from app.keyboards import KeyboardCollection
        kbc = KeyboardCollection()
        
        expiring_subscriptions = await WorkerCitySubscription.get_expiring_tomorrow()
        
        for subscription in expiring_subscriptions:
            worker = await Worker.get_worker(id=subscription.worker_id)
            if not worker:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
            city_names = []
            for city_id in subscription.city_ids:
                city = await City.get_city(id=city_id)
                if city:
                    city_names.append(city.city)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ —Ü–µ–Ω—ã
            prices = {90: 1, 180: 2, 270: 3, 360: 4, 450: 5, 900: 10, 1800: 20}
            city_count = prices.get(subscription.price, 1)
            
            text = f"‚ö†Ô∏è **–ó–∞–≤—Ç—Ä–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
            text += f"üèôÔ∏è **+{city_count} city**\n"
            for city_name in city_names:
                text += f"{city_name}\n"
            text += f"üìÖ –°—Ä–æ–∫ {subscription.subscription_months} –º–µ—Å—è—Ü.\n\n"
            text += f"–ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã."
            
            builder = InlineKeyboardBuilder()
            builder.add(kbc._inline("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å", f"city_subscription_renew_{subscription.id}"))
            builder.add(kbc._inline("üîÑ –°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ", f"city_subscription_change_{subscription.id}"))
            builder.add(kbc._inline("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", f"city_subscription_cancel_{subscription.id}"))
            builder.adjust(1)
            
            try:
                await bot.send_message(
                    chat_id=worker.tg_id,
                    text=text,
                    reply_markup=builder.as_markup(),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Failed to send notification to worker {worker.tg_id}: {e}")
                
    except Exception as e:
        logger.error(f"Error in send_city_subscription_expiry_notifications: {e}")


@router.callback_query(F.data == "worker_purchased_contacts", WorkStates.worker_menu)
async def worker_purchased_contacts(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫—É–ø–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    logger.debug(f'worker_purchased_contacts...')
    kbc = KeyboardCollection()
    
    worker = await Worker.get_worker(tg_id=callback.message.chat.id)
    
    text = f"üí≥ **–ö—É–ø–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã**\n\n"
    text += f"üìä –£ –≤–∞—Å —Å–µ–π—á–∞—Å: {worker.purchased_contacts} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n"
    text += f"üîì –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if worker.unlimited_contacts_until else '‚ùå –ù–µ—Ç'}\n\n"
    
    if worker.unlimited_contacts_until:
        try:
            until_date = datetime.fromisoformat(worker.unlimited_contacts_until)
            if until_date > datetime.now():
                text += f"‚è∞ –ë–µ–∑–ª–∏–º–∏—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {until_date.strftime('%d.%m.%Y %H:%M')}\n\n"
            else:
                text += f"‚è∞ –ë–µ–∑–ª–∏–º–∏—Ç –∏—Å—Ç–µ–∫\n\n"
        except ValueError:
            text += f"‚è∞ –ë–µ–∑–ª–∏–º–∏—Ç –∏—Å—Ç–µ–∫\n\n"
    
    text += f"üì¶ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:**\n\n"
    text += f"üî∏ 1 –∫–æ–Ω—Ç–∞–∫—Ç - 190‚ÇΩ\n"
    text += f"üî∏ 2 –∫–æ–Ω—Ç–∞–∫—Ç–∞ - 290‚ÇΩ (-24%)\n"
    text += f"üî∏ 5 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ - 690‚ÇΩ (-27%)\n"
    text += f"üî∏ 10 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ - 1190‚ÇΩ (-37%)\n"
    text += f"üî∏ –ë–µ–∑–ª–∏–º–∏—Ç 1 –º–µ—Å—è—Ü - 1990‚ÇΩ\n"
    text += f"üî∏ –ë–µ–∑–ª–∏–º–∏—Ç 3 –º–µ—Å—è—Ü–∞ - 4490‚ÇΩ\n"
    text += f"üî∏ –ë–µ–∑–ª–∏–º–∏—Ç 6 –º–µ—Å—è—Ü–µ–≤ - 6990‚ÇΩ\n"
    text += f"üî∏ –ë–µ–∑–ª–∏–º–∏—Ç 12 –º–µ—Å—è—Ü–µ–≤ - 10990‚ÇΩ\n\n"
    text += f"üí° –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(kbc._inline("190 ‚ÇΩ ‚Äî 1 –∫–æ–Ω—Ç–∞–∫—Ç", "contact-tariff_1_190"))
    builder.add(kbc._inline("290 ‚ÇΩ ‚Äî 2 –∫–æ–Ω—Ç–∞–∫—Ç–∞", "contact-tariff_2_290"))
    builder.add(kbc._inline("690 ‚ÇΩ ‚Äî 5 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", "contact-tariff_5_690"))
    builder.add(kbc._inline("1190 ‚ÇΩ ‚Äî 10 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", "contact-tariff_10_1190"))
    builder.add(kbc._inline("1990 ‚ÇΩ ‚Äî –ë–µ–∑–ª–∏–º–∏—Ç 1 –º–µ—Å—è—Ü", "contact-tariff_unlimited_1_1990"))
    builder.add(kbc._inline("4490 ‚ÇΩ ‚Äî –ë–µ–∑–ª–∏–º–∏—Ç 3 –º–µ—Å—è—Ü–∞", "contact-tariff_unlimited_3_4490"))
    builder.add(kbc._inline("6990 ‚ÇΩ ‚Äî –ë–µ–∑–ª–∏–º–∏—Ç 6 –º–µ—Å—è—Ü–µ–≤", "contact-tariff_unlimited_6_6990"))
    builder.add(kbc._inline("10990 ‚ÇΩ ‚Äî –ë–µ–∑–ª–∏–º–∏—Ç 12 –º–µ—Å—è—Ü–µ–≤", "contact-tariff_unlimited_12_10990"))
    builder.add(kbc._inline("üè† –í –º–µ–Ω—é", "worker_menu"))
    builder.adjust(1)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode='Markdown'
        )
    except Exception:
        try:
            await callback.message.delete()
        except Exception:
            pass
        await callback.message.answer(
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode='Markdown'
        )


@router.callback_query(lambda c: c.data.startswith('contact-tariff_'), WorkStates.worker_menu)
async def buy_contacts_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    logger.debug(f'buy_contacts_handler...')
    kbc = KeyboardCollection()
    
    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    
    # –ü–∞—Ä—Å–∏–º callback_data: contact-tariff_{tokens}_{price} –∏–ª–∏ contact-tariff_unlimited_{months}_{price}
    parts = callback.data.split('_')
    logger.debug(f"Callback data: {callback.data}")
    logger.debug(f"Parts: {parts}")
    
    if len(parts) < 3:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞—Ä–∏—Ñ–∞", show_alert=True)
        return
    
    if parts[1] == "unlimited":
        # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ: contact-tariff_unlimited_{months}_{price}
        months = int(parts[2])
        price = int(parts[3])
        tokens = -1  # –ë–µ–∑–ª–∏–º–∏—Ç
        tariff_name = f"–ë–µ–∑–ª–∏–º–∏—Ç {months} –º–µ—Å—è—Ü(–µ–≤)"
    else:
        # –û–±—ã—á–Ω—ã–π —Ç–∞—Ä–∏—Ñ: contact-tariff_{tokens}_{price}
        tokens = int(parts[1])
        price = int(parts[2])
        tariff_name = f"{tokens} –∫–æ–Ω—Ç–∞–∫—Ç(–æ–≤)"
        months = 0  # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ months = 0
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
    text = f"""
üí∞ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏**

üì¶ –¢–∞—Ä–∏—Ñ: {tariff_name}
üíµ –¶–µ–Ω–∞: {price}‚ÇΩ

{f'–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —É –≤–∞—Å –±—É–¥–µ—Ç {worker.purchased_contacts + tokens} –∫–æ–Ω—Ç–∞–∫—Ç(–æ–≤)' if tokens > 0 else f'–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –Ω–∞ {months} –º–µ—Å—è—Ü(–µ–≤)'}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?
        """
    
    builder = InlineKeyboardBuilder()
    builder.add(kbc._inline("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", f"confirm_contact_purchase_{tokens}_{price}_{months}"))
    builder.add(kbc._inline("‚ùå –û—Ç–º–µ–Ω–∞", "worker_purchased_contacts"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        text=text,
        reply_markup=builder.as_markup(),
        parse_mode='Markdown'
    )


@router.callback_query(lambda c: c.data.startswith('confirm_contact_purchase_'), WorkStates.worker_menu)
async def confirm_contact_purchase(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    logger.debug(f'confirm_contact_purchase...')
    kbc = KeyboardCollection()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: confirm_contact_purchase_{tokens}_{price}_{months}
    parts = callback.data.split('_')
    tokens = int(parts[3])
    price = int(parts[4])
    months = int(parts[5]) if len(parts) > 5 else 0
    
    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã (–∏–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã)
    
    try:
        if tokens == -1:  # –ë–µ–∑–ª–∏–º–∏—Ç
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤
            until_date = datetime.now() + timedelta(days=months * 30)
            await worker.update_unlimited_contacts(unlimited_contacts_until=until_date.isoformat())
            
            text = f"""
‚úÖ **–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!**

üéâ –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º!
‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {until_date.strftime('%d.%m.%Y %H:%M')}
üìÖ –ü–µ—Ä–∏–æ–¥: {months} –º–µ—Å—è—Ü(–µ–≤)

üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!
            """
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            new_count = worker.purchased_contacts + tokens
            await worker.update_purchased_contacts(purchased_contacts=new_count)
            
            text = f"""
‚úÖ **–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!**

üéâ –î–æ–±–∞–≤–ª–µ–Ω–æ {tokens} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤!
üìä –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å: {new_count} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤!
            """
        
        await callback.message.edit_text(
            text=text,
            reply_markup=kbc.menu_btn(),
            parse_mode='Markdown'
        )
        await state.set_state(WorkStates.worker_menu)
        
    except Exception as e:
        logger.error(f"Error in confirm_contact_purchase: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ", show_alert=True)


@router.callback_query(F.data == "worker_change_city_menu", WorkStates.worker_menu)
async def worker_change_city_menu(callback: CallbackQuery, state: FSMContext) -> None:
    """–ú–µ–Ω—é —Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤"""
    logger.debug(f'worker_change_city_menu...')
    kbc = KeyboardCollection()

    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    active_subscriptions = await WorkerCitySubscription.get_active_by_worker(worker.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∫—É–ø–ª–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    has_purchased_cities = len(active_subscriptions) > 0
    
    text = "üèôÔ∏è **–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥**\n\n"
    
    if has_purchased_cities:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        text += "üìã **–ú–æ–∏ –≥–æ—Ä–æ–¥–∞** - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏\n"
        text += "üîÑ **–°–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥** - –∏–∑–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        builder.add(kbc._inline("üìã –ú–æ–∏ –≥–æ—Ä–æ–¥–∞", "worker_my_cities"))
        builder.add(kbc._inline("üîÑ –°–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥", "worker_change_main_city"))
        builder.add(kbc._inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", "worker_menu"))
        builder.adjust(1)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        try:
            await callback.message.edit_text(
                text=text,
                reply_markup=builder.as_markup(),
                parse_mode='Markdown'
            )
        except Exception:
            try:
                await callback.message.delete()
            except Exception:
                pass
            await callback.message.answer(
                text=text,
                reply_markup=builder.as_markup(),
                parse_mode='Markdown'
            )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        text += "–£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        text += "üîÑ **–°–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥** - –≤—ã–±—Ä–∞—Ç—å –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤\n"
        text += "üìç **–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥** - –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–π –≥–æ—Ä–æ–¥ (—Å—Ç–∞–Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º)"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        builder.add(kbc._inline("üîÑ –°–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥", "worker_change_main_city"))
        builder.add(kbc._inline("üìç –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥", "worker_choose_city"))
        builder.add(kbc._inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", "worker_menu"))
        builder.adjust(1)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        try:
            await callback.message.edit_text(
                text=text,
                reply_markup=builder.as_markup(),
                parse_mode='Markdown'
            )
        except Exception:
            try:
                await callback.message.delete()
            except Exception:
                pass
            await callback.message.answer(
                text=text,
                reply_markup=builder.as_markup(),
                parse_mode='Markdown'
            )


@router.callback_query(F.data == "worker_change_main_city", WorkStates.worker_menu)
async def worker_change_main_city(callback: CallbackQuery, state: FSMContext) -> None:
    """–°–º–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º"""
    logger.debug(f'worker_change_main_city...')
    kbc = KeyboardCollection()

    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–º–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–π –≥–æ—Ä–æ–¥ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
    all_cities = await City.get_all()
    cities_dict = {city.id: city.city for city in all_cities}
    
    city_names = [city.city for city in all_cities]
    city_ids = [city.id for city in all_cities]
    count_cities = len(city_names)
    id_now = 0

    btn_next = True if len(city_names) > 5 else False

    city_names, city_ids = help_defs.get_obj_name_and_id_for_btn(names=city_names, ids=city_ids,
                                                                 id_now=id_now)

    current_main_city = cities_dict.get(worker.city_id[0], f"–ì–æ—Ä–æ–¥ {worker.city_id[0]}")
    
    text = f"üîÑ **–°–º–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞**\n\n"
    text += f"üìç **–¢–µ–∫—É—â–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥:** {current_main_city}\n\n"
    text += f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º\n\n"
    text += f'–ü–æ–∫–∞–∑–∞–Ω–æ {id_now + len(city_names)} –∏–∑ {count_cities} –≥–æ—Ä–æ–¥–æ–≤'

    msg = await callback.message.edit_text(
        text=text,
        reply_markup=kbc.choose_obj(id_now=id_now, ids=city_ids, names=city_names,
                                    btn_next=btn_next, btn_back=True,),
        parse_mode='Markdown'
    )
    await state.update_data(msg_id=msg.message_id)
    await state.set_state(WorkStates.worker_change_main_city)


@router.callback_query(F.data == "worker_choose_city", WorkStates.worker_menu)
async def worker_choose_city(callback: CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤"""
    logger.debug(f'worker_choose_city...')
    kbc = KeyboardCollection()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞
    cities = await City.get_all()
    city_names = [city.city for city in cities]
    city_ids = [city.id for city in cities]
    count_cities = len(city_names)
    id_now = 0

    btn_next = True if len(city_names) > 5 else False

    city_names, city_ids = help_defs.get_obj_name_and_id_for_btn(names=city_names, ids=city_ids,
                                                                 id_now=id_now)

    text = f"üìç **–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥**\n\n"
    text += f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º\n\n"
    text += f'–ü–æ–∫–∞–∑–∞–Ω–æ {id_now + len(city_names)} –∏–∑ {count_cities} –≥–æ—Ä–æ–¥–æ–≤'

    msg = await callback.message.edit_text(
        text=text,
        reply_markup=kbc.choose_obj(id_now=id_now, ids=city_ids, names=city_names,
                                    btn_next=btn_next, btn_back=True,),
        parse_mode='Markdown'
    )
    await state.update_data(msg_id=msg.message_id)
    await state.set_state(WorkStates.worker_choose_city)


@router.callback_query(lambda c: c.data.startswith('go_'), WorkStates.worker_change_main_city)
async def change_main_city_next(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥–∞–º –¥–ª—è —Å–º–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    logger.debug(f'change_main_city_next...')
    kbc = KeyboardCollection()

    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–º–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    all_cities = await City.get_all()
    city_names = [city.city for city in all_cities]
    city_ids = [city.id for city in all_cities]
    count_cities = len(city_names)

    id_now = int(callback.data.split('_')[1])
    
    # –ï—Å–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–π—Ç–∏ –Ω–∞–∑–∞–¥ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞
    if id_now < 0:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(WorkStates.worker_menu)
        await worker_change_city_menu(callback, state)
        return

    btn_next = True if len(city_names) > 5 + id_now else False
    btn_back = True if id_now > 0 else False

    city_names, city_ids = help_defs.get_obj_name_and_id_for_btn(names=city_names, ids=city_ids,
                                                                 id_now=id_now)

    cities_dict = {city.id: city.city for city in all_cities}
    current_main_city = cities_dict.get(worker.city_id[0], f"–ì–æ—Ä–æ–¥ {worker.city_id[0]}")

    try:
        msg = await callback.message.edit_text(
            text=f"üîÑ **–°–º–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞**\n\n"
                 f"üìç **–¢–µ–∫—É—â–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥:** {current_main_city}\n\n"
                 f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º\n\n"
                 f'–ü–æ–∫–∞–∑–∞–Ω–æ {id_now + len(city_names)} –∏–∑ {count_cities} –≥–æ—Ä–æ–¥–æ–≤',
            reply_markup=kbc.choose_obj(id_now=id_now, ids=city_ids, names=city_names,
                                        btn_next=btn_next, btn_back=btn_back,),
            parse_mode='Markdown'
        )
        await state.update_data(msg_id=msg.message_id)
    except TelegramBadRequest:
        pass


@router.message(F.text, WorkStates.worker_change_main_city)
async def change_main_city_search(message: Message, state: FSMContext) -> None:
    """–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ –ø–æ —Ç–µ–∫—Å—Ç—É –¥–ª—è —Å–º–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    logger.debug(f'change_main_city_search...')
    kbc = KeyboardCollection()

    worker = await Worker.get_worker(tg_id=message.from_user.id)
    city_input = message.text
    state_data = await state.get_data()
    msg_id = int(state_data.get('msg_id'))

    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    all_cities = await City.get_all()
    city_names = [city.city for city in all_cities]

    city_find = await checks.levenshtein_distance_check_city(phrase=city_input, words=city_names)
    if not city_find:
        await message.answer(text=f'–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏')
        return

    cities_result = []
    for city_id in city_find:
        city = await City.get_city(id=city_id)
        cities_result.append(city)

    city_names = [city.city for city in cities_result]
    city_ids = [city.id for city in cities_result]

    cities_dict = {city.id: city.city for city in all_cities}
    current_main_city = cities_dict.get(worker.city_id[0], f"–ì–æ—Ä–æ–¥ {worker.city_id[0]}")

    msg = await message.answer(
        text=f"üîÑ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ: {city_input}**\n\n"
             f"üìç **–¢–µ–∫—É—â–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥:** {current_main_city}\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º\n\n",
        reply_markup=kbc.choose_obj(id_now=0, ids=city_ids, names=city_names,
                                    btn_next=True, btn_back=True, 
                                    btn_next_name='–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞'),
        parse_mode='Markdown'
    )
    await state.update_data(msg_id=msg.message_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)


@router.callback_query(lambda c: c.data.startswith('obj-id_'), WorkStates.worker_change_main_city)
async def change_main_city_end(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–º–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    logger.debug(f'change_main_city_end...')
    kbc = KeyboardCollection()

    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    new_city_id = int(callback.data.split('_')[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ—Ä–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    city_exists = await City.get_city(id=new_city_id)
    if not city_exists:
        await callback.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
    all_cities = await City.get_all()
    cities_dict = {city.id: city.city for city in all_cities}
    
    new_city_name = cities_dict.get(new_city_id, f"–ì–æ—Ä–æ–¥ {new_city_id}")
    old_city_id = worker.city_id[0]
    old_city_name = cities_dict.get(old_city_id, f"–ì–æ—Ä–æ–¥ {old_city_id}")
    
    # –ú–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥
    worker.city_id[0] = new_city_id
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π –≥–æ—Ä–æ–¥ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –Ω–∞ –≤—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ
    if len(worker.city_id) > 1 and old_city_id in worker.city_id[1:]:
        worker.city_id.remove(old_city_id)
        worker.city_id.insert(1, old_city_id)
    
    await worker.update_city(worker.city_id)
    
    text = f"‚úÖ **–û—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω**\n\n"
    text += f"üìç **–ù–æ–≤—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥:** {new_city_name}\n"
    text += f"üìç **–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ—Ä–æ–¥:** {old_city_name}\n\n"
    text += "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ."
    
    await callback.message.edit_text(
        text=text,
        reply_markup=kbc.menu_btn(),
        parse_mode='Markdown'
    )
    await state.set_state(WorkStates.worker_menu)


@router.callback_query(lambda c: c.data.startswith('go_'), WorkStates.worker_choose_city)
async def choose_city_next_worker(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥–∞–º –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    logger.debug(f'choose_city_next_worker...')
    kbc = KeyboardCollection()

    cities = await City.get_all()
    city_names = [city.city for city in cities]
    city_ids = [city.id for city in cities]
    count_cities = len(city_names)

    id_now = int(callback.data.split('_')[1])
    
    # –ï—Å–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–π—Ç–∏ –Ω–∞–∑–∞–¥ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞
    if id_now < 0:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(WorkStates.worker_menu)
        await worker_change_city_menu(callback, state)
        return

    btn_next = True if len(city_names) > 5 + id_now else False
    btn_back = True if id_now > 0 else False

    city_names, city_ids = help_defs.get_obj_name_and_id_for_btn(names=city_names, ids=city_ids,
                                                                 id_now=id_now)

    try:
        msg = await callback.message.edit_text(
            text=f"üìç **–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥**\n\n"
                 f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º\n\n"
                 f'–ü–æ–∫–∞–∑–∞–Ω–æ {id_now + len(city_names)} –∏–∑ {count_cities} –≥–æ—Ä–æ–¥–æ–≤',
            reply_markup=kbc.choose_obj(id_now=id_now, ids=city_ids, names=city_names,
                                        btn_next=btn_next, btn_back=btn_back,),
            parse_mode='Markdown'
        )
        await state.update_data(msg_id=msg.message_id)
    except TelegramBadRequest:
        pass


@router.message(F.text, WorkStates.worker_choose_city)
async def choose_city_search_worker(message: Message, state: FSMContext) -> None:
    """–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ –ø–æ —Ç–µ–∫—Å—Ç—É –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    logger.debug(f'choose_city_search_worker...')
    kbc = KeyboardCollection()

    city_input = message.text
    state_data = await state.get_data()
    msg_id = int(state_data.get('msg_id'))

    cities = await City.get_all()
    city_names = [city.city for city in cities]

    city_find = await checks.levenshtein_distance_check_city(phrase=city_input, words=city_names)
    if not city_find:
        await message.answer(text=f'–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏')
        return

    cities_result = []
    for city_id in city_find:
        city = await City.get_city(id=city_id)
        cities_result.append(city)

    city_names = [city.city for city in cities_result]
    city_ids = [city.id for city in cities_result]

    msg = await message.answer(
        text=f"üìç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ: {city_input}**\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º\n\n",
        reply_markup=kbc.choose_obj(id_now=0, ids=city_ids, names=city_names,
                                    btn_next=True, btn_back=True, 
                                    btn_next_name='–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞'),
        parse_mode='Markdown'
    )
    await state.update_data(msg_id=msg.message_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)


@router.callback_query(lambda c: c.data.startswith('obj-id_'), WorkStates.worker_choose_city)
async def choose_city_end_worker(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    logger.debug(f'choose_city_end_worker...')
    kbc = KeyboardCollection()

    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    new_city_id = int(callback.data.split('_')[1])

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    new_city = await City.get_city(id=new_city_id)
    new_city_name = new_city.city if new_city else f"–ì–æ—Ä–æ–¥ {new_city_id}"

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    old_city_id = worker.city_id[0]
    old_city = await City.get_city(id=old_city_id)
    old_city_name = old_city.city if old_city else f"–ì–æ—Ä–æ–¥ {old_city_id}"

    # –ú–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥
    worker.city_id[0] = new_city_id

    # –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π –≥–æ—Ä–æ–¥ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –Ω–∞ –≤—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ
    if len(worker.city_id) > 1 and old_city_id in worker.city_id[1:]:
        worker.city_id.remove(old_city_id)
        worker.city_id.insert(1, old_city_id)

    await worker.update_city(worker.city_id)

    text = f"‚úÖ **–û—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω**\n\n"
    text += f"üìç **–ù–æ–≤—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥:** {new_city_name}\n"
    text += f"üìç **–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ—Ä–æ–¥:** {old_city_name}\n\n"
    text += "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ."

    await callback.message.edit_text(
        text=text,
        reply_markup=kbc.menu_btn(),
        parse_mode='Markdown'
    )
    await state.set_state(WorkStates.worker_menu)


@router.callback_query(lambda c: c.data.startswith('set_main_city_'))
async def set_main_city(callback: CallbackQuery, state: FSMContext) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    logger.debug(f'set_main_city...')
    kbc = KeyboardCollection()

    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    new_city_id = int(callback.data.split('_')[-1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    available_city_ids = list(worker.city_id)
    active_subscriptions = await WorkerCitySubscription.get_active_by_worker(worker.id)
    for subscription in active_subscriptions:
        available_city_ids.extend(subscription.city_ids)
    
    if new_city_id not in available_city_ids:
        await callback.answer("‚ùå –≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    # –ú–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥
    old_city_id = worker.city_id[0]
    worker.city_id[0] = new_city_id
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π –≥–æ—Ä–æ–¥ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –Ω–∞ –≤—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ
    if len(worker.city_id) > 1 and old_city_id in worker.city_id[1:]:
        worker.city_id.remove(old_city_id)
        worker.city_id.insert(1, old_city_id)
    
    await worker.update_city(worker.city_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    all_cities = await City.get_all()
    cities_dict = {city.id: city.city for city in all_cities}
    
    old_city_name = cities_dict.get(old_city_id, f"–ì–æ—Ä–æ–¥ {old_city_id}")
    new_city_name = cities_dict.get(new_city_id, f"–ì–æ—Ä–æ–¥ {new_city_id}")
    
    text = f"‚úÖ **–û—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω**\n\n"
    text += f"üìç **–ù–æ–≤—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥:** {new_city_name}\n"
    text += f"üìç **–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ—Ä–æ–¥:** {old_city_name}\n\n"
    text += "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ."
    
    await callback.message.edit_text(
        text=text,
        reply_markup=kbc.menu_btn(),
        parse_mode='Markdown'
    )


@router.callback_query(F.data == "worker_my_cities", WorkStates.worker_menu)
async def worker_my_cities(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'worker_my_cities...')
    kbc = KeyboardCollection()

    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    active_subscriptions = await WorkerCitySubscription.get_active_by_worker(worker.id)
    
    text = "üèôÔ∏è **–ú–æ–∏ –≥–æ—Ä–æ–¥–∞**\n\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    all_cities = await City.get_all()
    cities_dict = {city.id: city.city for city in all_cities}
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
    main_city_names = [cities_dict.get(city_id, f"–ì–æ—Ä–æ–¥ {city_id}") for city_id in worker.city_id]
    
    text += f"üìç **–û—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥:** {', '.join(main_city_names)}\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    incomplete_subscriptions = []
    for subscription in active_subscriptions:
        prices = {90: 1, 180: 2, 270: 3, 360: 4, 450: 5, 900: 10, 1800: 20}
        purchased_cities = prices.get(subscription.price, 1)
        if len(subscription.city_ids) < purchased_cities:
            incomplete_subscriptions.append(subscription)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if active_subscriptions:
        text += "üè∑Ô∏è **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥–æ—Ä–æ–¥–∞:**\n\n"
        for subscription in active_subscriptions:
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ —Ü–µ–Ω—ã
            prices = {90: 1, 180: 2, 270: 3, 360: 4, 450: 5, 900: 10, 1800: 20}
            total_count = prices.get(subscription.price, 1)
            selected_count = len(subscription.city_ids)
            remaining = total_count - selected_count
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
            selected_city_names = [cities_dict.get(city_id, f"–ì–æ—Ä–æ–¥ {city_id}") for city_id in subscription.city_ids]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
            end_date = datetime.strptime(subscription.subscription_end, '%Y-%m-%d').strftime('%d.%m.%Y')
            
            text += f"üì¶ **–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {total_count} –≥–æ—Ä–æ–¥–æ–≤** (–¥–æ {end_date}):\n"
            if selected_city_names:
                text += f"‚Ä¢ –í—ã–±—Ä–∞–Ω–æ: {', '.join(selected_city_names)}\n"
            else:
                text += f"‚Ä¢ –í—ã–±—Ä–∞–Ω–æ: 0 –≥–æ—Ä–æ–¥–æ–≤\n"
            
            if remaining > 0:
                text += f"‚Ä¢ ‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å: {remaining} –≥–æ—Ä–æ–¥–æ–≤\n"
            else:
                text += f"‚Ä¢ ‚úÖ –í—Å–µ –≥–æ—Ä–æ–¥–∞ –≤—ã–±—Ä–∞–Ω—ã\n"
            text += "\n"
    else:
        text += "üì≠ **–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞**\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if incomplete_subscriptions:
        text += "‚ö†Ô∏è **–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:**\n"
        for subscription in incomplete_subscriptions:
            prices = {90: 1, 180: 2, 270: 3, 360: 4, 450: 5, 900: 10, 1800: 20}
            total_count = prices.get(subscription.price, 1)
            selected_count = len(subscription.city_ids)
            remaining = total_count - selected_count
            text += f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å {remaining} –∏–∑ {total_count} –≥–æ—Ä–æ–¥–æ–≤\n"
        text += "\n"
    
    builder = InlineKeyboardBuilder()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if incomplete_subscriptions:
        for subscription in incomplete_subscriptions:
            prices = {90: 1, 180: 2, 270: 3, 360: 4, 450: 5, 900: 10, 1800: 20}
            total_count = prices.get(subscription.price, 1)
            selected_count = len(subscription.city_ids)
            remaining = total_count - selected_count
            
            builder.add(kbc._inline(
                f"‚úÖ –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞ ({remaining} –æ—Å—Ç–∞–ª–æ—Å—å)", 
                f"continue_subscription_cities_{subscription.id}"
            ))
    
    builder.add(kbc._inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", "worker_change_city_menu"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        text=text,
        reply_markup=builder.as_markup(),
        parse_mode='Markdown'
    )


@router.callback_query(lambda c: c.data.startswith('continue_subscription_cities_'))
async def continue_subscription_cities(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    logger.debug(f'continue_subscription_cities...')
    
    subscription_id = int(callback.data.split('_')[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    worker = await Worker.get_worker(tg_id=callback.from_user.id)
    active_subscriptions = await WorkerCitySubscription.get_active_by_worker(worker.id)
    
    target_subscription = None
    for subscription in active_subscriptions:
        if subscription.id == subscription_id:
            target_subscription = subscription
            break
    
    if not target_subscription:
        await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    prices = {90: 1, 180: 2, 270: 3, 360: 4, 450: 5, 900: 10, 1800: 20}
    purchased_cities = prices.get(target_subscription.price, 1)
    remaining_cities = purchased_cities - len(target_subscription.city_ids)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π)
    other_subscription_cities = []
    for subscription in active_subscriptions:
        if subscription.id != subscription_id:
            other_subscription_cities.extend(subscription.city_ids)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        subscription_id=subscription_id,
        city_count=remaining_cities,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å
        selected_cities=target_subscription.city_ids.copy(),  # –£–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
        excluded_cities=other_subscription_cities  # –ì–æ—Ä–æ–¥–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–æ–≤
    await state.set_state(WorkStates.worker_choose_subscription_cities)
    await choose_subscription_cities(callback, state)


# @router.message(F.text, WorkStates.worker_change_city)
async def choose_city_main(message: Message, state: FSMContext) -> None:
    logger.debug(f'choose_city_main...')
    kbc = KeyboardCollection()

    city_input = message.text

    state_data = await state.get_data()
    msg_id = int(state_data.get('msg_id'))
    cites = state_data.get('cites')

    cities = await City.get_all(sort=False)
    city_names = [city.city for city in cities]

    worker = await Worker.get_worker(tg_id=message.chat.id)
    worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
    subscription = await SubscriptionType.get_subscription_type(id=worker_sub.subscription_id)

    city_find = await checks.levenshtein_distance_check_city(phrase=city_input, words=city_names)
    if not city_find:
        await message.answer(text=f'–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏')
        return

    cities = []

    for city_id in city_find:
        city = await City.get_city(id=city_id)
        cities.append(city)

    city_names = [city.city for city in cities]
    city_ids = [city.id for city in cities]

    if cites is None:
        cites = []
    else:
        cites = [int(x) for x in cites.split(' | ')]
        for city_id in cites:
            city = await City.get_city(id=city_id)
            try:
                city_names.remove(city.city)
                city_ids.remove(city.id)
            except ValueError:
                pass

    msg = await message.answer(
        text=f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ: {city_input}\n'
             f'–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º\n\n'
             f'–ü–æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤: {subscription.count_cites}, –≤—ã–±—Ä–∞–Ω–æ {len(cites)}',
        reply_markup=kbc.choose_obj(id_now=0, ids=city_ids, names=city_names,
                                    btn_next=True, btn_back=False, menu_btn=True,
                                    btn_next_name='–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞'))
    await state.update_data(msg_id=msg.message_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)


# @router.callback_query(lambda c: c.data.startswith('go_'), WorkStates.worker_change_city)
async def change_city_next(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'change_city_next...')

    kbc = KeyboardCollection()

    id_now = int(callback.data.split('_')[1])

    state_data = await state.get_data()
    cites = state_data.get('cites')

    cities = await City.get_all()
    city_names = [city.city for city in cities]
    city_ids = [city.id for city in cities]

    worker = await Worker.get_worker(tg_id=callback.message.chat.id)
    worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
    subscription = await SubscriptionType.get_subscription_type(id=worker_sub.subscription_id)

    if cites is None:
        cites = []
    else:
        cites = [int(x) for x in cites.split(' | ')]
        for city_id in cites:
            city = await City.get_city(id=city_id)
            city_names.remove(city.city)
            city_ids.remove(city.id)

    count_cities = len(city_names)

    btn_next = True if count_cities > 5 + id_now else False
    btn_back = True if id_now >= 5 else False

    city_names, city_ids = help_defs.get_obj_name_and_id_for_btn(names=city_names, ids=city_ids,
                                                                 id_now=id_now)

    try:
        msg = await callback.message.edit_text(
            text=f'–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º\n\n'
                 f' –ü–æ–∫–∞–∑–∞–Ω–æ {id_now + len(city_names)} –∏–∑ {count_cities}\n\n'
                 f'–ü–æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤: {subscription.count_cites} –≥–æ—Ä–æ–¥–æ–≤, –≤—ã–±—Ä–∞–Ω–æ {len(cites)}\n',
            reply_markup=kbc.choose_obj(id_now=id_now, ids=city_ids, names=city_names,
                                        btn_next=btn_next, btn_back=btn_back, menu_btn=True))
        await state.update_data(msg_id=msg.message_id)
    except TelegramBadRequest:
        pass


# @router.callback_query(lambda c: c.data.startswith('obj-id_'), WorkStates.worker_change_city)
async def change_city_end(callback: CallbackQuery, state: FSMContext) -> None:
    logger.debug(f'change_city_end...')
    kbc = KeyboardCollection()

    city_id = int(callback.data.split('_')[1])

    state_data = await state.get_data()
    cites = state_data.get('cites')
    if cites is None:
        cites_list = [city_id]
    else:
        cites_list = [int(x) for x in cites.split(' | ')]
        cites_list.append(city_id)

    worker = await Worker.get_worker(tg_id=callback.message.chat.id)
    worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
    subscription = await SubscriptionType.get_subscription_type(id=worker_sub.subscription_id)

    if len(cites_list) >= subscription.count_cites:
        await worker.update_city(city_id=cites_list)
        await callback.message.edit_text('–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –≥–æ—Ä–æ–¥!', reply_markup=kbc.menu())
        await state.set_state(WorkStates.worker_menu)
        return

    id_now = int(callback.data.split('_')[2])

    cities = await City.get_all()
    city_names = [city.city for city in cities]
    city_ids = [city.id for city in cities]

    for city_id in cites_list:
        city = await City.get_city(id=city_id)
        city_names.remove(city.city)
        city_ids.remove(city.id)

    count_cities = len(city_names)

    btn_next = True if count_cities > 5 + id_now else False
    btn_back = True if id_now >= 5 else False

    city_names, city_ids = help_defs.get_obj_name_and_id_for_btn(names=city_names, ids=city_ids,
                                                                 id_now=id_now)

    msg = await callback.message.edit_text(
        text=f'–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º\n\n'
             f'–ü–æ–∫–∞–∑–∞–Ω–æ {id_now + len(city_names)} –∏–∑ {count_cities}\n\n'
             f'–ü–æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤: {subscription.count_cites} –≥–æ—Ä–æ–¥–æ–≤, –≤—ã–±—Ä–∞–Ω–æ {len(cites_list)}\n',
        reply_markup=kbc.choose_obj(id_now=id_now, ids=city_ids, names=city_names,
                                    btn_next=btn_next, btn_back=btn_back, menu_btn=True))
    await state.update_data(msg_id=msg.message_id)
    cites_list = [str(x) for x in cites_list]
    await state.update_data(cites=' | '.join(cites_list))


# –§—É–Ω–∫—Ü–∏–∏ –æ–±–º–µ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ —É–¥–∞–ª–µ–Ω—ã


# –§—É–Ω–∫—Ü–∏—è buy_contact_handler –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞


# –§—É–Ω–∫—Ü–∏—è –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞


# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–∫—É–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

# –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–º–µ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã


@router.callback_query(F.data == "worker_rank", WorkStates.worker_menu)
async def worker_rank(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    logger.debug(f'worker_rank...')
    kbc = KeyboardCollection()
    
    try:
        worker = await Worker.get_worker(tg_id=callback.from_user.id)
        if not worker:
            await callback.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ä–∞–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        from app.data.database.models import WorkerRank
        rank = await WorkerRank.get_or_create_rank(worker.id)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ get_rank_description() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        text = rank.get_rank_description()
        text += f"\n\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {rank.completed_orders_count}"
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        builder = InlineKeyboardBuilder()
        builder.add(kbc._inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", "worker_menu"))
        builder.adjust(1)
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.edit_text(
                text=text,
                reply_markup=builder.as_markup(),
                parse_mode='Markdown'
            )
        except Exception:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await callback.message.delete()
            except Exception:
                pass
            await callback.message.answer(
                text=text,
                reply_markup=builder.as_markup(),
                parse_mode='Markdown'
            )
        
    except Exception as e:
        logger.error(f"Error in worker_rank: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–Ω–≥–µ", show_alert=True)


@router.callback_query(F.data == "rank_downgrade_ok")
async def rank_downgrade_ok(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ OK –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ —Ä–∞–Ω–≥–∞.
    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è" –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
    """
    logger.debug(f'rank_downgrade_ok...')
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        try:
            await callback.message.delete()
        except Exception:
            pass
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é
        await state.set_state(WorkStates.worker_menu)
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–æ–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è" –Ω–∞–ø—Ä—è–º—É—é
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π callback —Å –Ω—É–∂–Ω—ã–º data
        from copy import copy
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é callback —Å –Ω–æ–≤—ã–º data
        fake_callback = copy(callback)
        fake_callback._data = "choose_work_types"
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (—Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Å—Ç—Ä–æ–∫–µ 1709)
        await choose_work_types(fake_callback, state)
        
    except Exception as e:
        logger.error(f"Error in rank_downgrade_ok: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π", show_alert=True)


async def filter_worker_advertisements(worker_id: int, advertisements: list) -> list:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏–µ—Å—è"""
    worker = await Worker.get_worker(id=worker_id)
    worker_sub = await WorkerAndSubscription.get_by_worker(worker_id=worker.id)
    
    # –°–æ–±–∏—Ä–∞–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
    bad_abs = []
    worker_and_reports = await WorkerAndReport.get_by_worker(worker_id=worker.id)
    worker_and_bad_responses = await WorkerAndBadResponse.get_by_worker(worker_id=worker.id)
    worker_and_abs = await WorkersAndAbs.get_by_worker(worker_id=worker.id)

    if worker_and_reports:
        bad_abs += [worker_and_report.abs_id for worker_and_report in worker_and_reports]
    if worker_and_bad_responses:
        bad_abs += [worker_and_bad_response.abs_id for worker_and_bad_response in worker_and_bad_responses]
    if worker_and_abs:
        bad_abs += [response.abs_id for response in worker_and_abs]
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    bad_abs = set(bad_abs)
    
    advertisements_final = []
    
    for advertisement in advertisements:
        customer = await Customer.get_customer(id=advertisement.customer_id)
        if customer.tg_id == worker.tg_id:
            continue
        if advertisement.id in bad_abs:
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç—ã
        if not worker_sub.work_type_ids and not worker_sub.unlimited_work_types:
            continue
            
        is_unlimited = (worker_sub.unlimited_work_types or 
                       (len(worker_sub.work_type_ids) == 1 and worker_sub.work_type_ids[0] == '0'))
        
        if is_unlimited or (worker_sub.work_type_ids and str(advertisement.work_type_id) in worker_sub.work_type_ids):
            if advertisement.relevance:
                advertisements_final.append(advertisement)
        elif worker_sub.unlimited_work_types:
            if advertisement.relevance:
                advertisements_final.append(advertisement)
    
    return advertisements_final


#  _    _        _      _____              _
# | |  | |      | |    |_   _|            | |
# | |  | |  ___ | |__    | |    ___   ___ | |__
# | |/\| | / _ \| '_ \   | |   / _ \ / __|| '_ \
# \  /\  /|  __/| |_) |  | |  |  __/| (__ | | | |
#  \/  \/  \___||_.__/   \_/   \___| \___||_| |_|
