"""
Handlers –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∫–ª–∏–∫–∞–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:
- –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞
- –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç
- –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
- –ü–æ–∫—É–ø–∫–∞ –∂–µ—Ç–æ–Ω–æ–≤
"""

import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from app.states import WorkStates, CustomerStates
from app.keyboards import KeyboardCollection
from app.data.database.models import Worker, Customer, Abs, WorkersAndAbs, ContactExchange
from loaders import bot
from app.untils.contact_filter import check_message_for_contacts

logger = logging.getLogger(__name__)
router = Router()

# –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
print("[WORKER_RESPONSES] Module imported!")
logger.info("[WORKER_RESPONSES] Router initialized!")
print(f"[WORKER_RESPONSES] Router object: {router}")


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def safe_edit_or_send(callback: CallbackQuery, text: str, reply_markup=None, parse_mode: str = 'Markdown'):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - —É–¥–∞–ª—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ"""
    try:
        await callback.message.edit_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–±—ã–ª–æ —Ñ–æ—Ç–æ –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞), —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except Exception:
            pass
        await callback.message.answer(
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
async def get_worker_status_string(worker_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    from app.data.database.models import WorkerStatus
    worker_status = await WorkerStatus.get_by_worker(worker_id)
    
    if not worker_status:
        return "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    
    statuses = []
    if worker_status.has_ip:
        statuses.append("–ò–ü ‚úÖ")
    if worker_status.has_ooo:
        statuses.append("–û–û–û ‚úÖ")
    if worker_status.has_sz:
        statuses.append("–°–∞–º–æ–∑–∞–Ω—è—Ç–æ—Å—Ç—å ‚úÖ")
    
    if not statuses:
        return "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    
    return " | ".join(statuses)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –±–µ–∑
async def send_with_worker_photo(chat_id, worker, text: str, reply_markup=None, parse_mode: str = 'Markdown'):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç"""
    from loaders import bot
    from aiogram.types import FSInputFile
    
    if worker.profile_photo:
        try:
            await bot.send_photo(
                chat_id=chat_id,
                photo=FSInputFile(worker.profile_photo),
                caption=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        except Exception:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
            await bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
    else:
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )

# –¢–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞
CHAT_RULES_TEXT = """
‚ö†Ô∏è **–í–ê–ñ–ù–û: –ü—Ä–∞–≤–∏–ª–∞ –ê–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ß–∞—Ç–∞**

üö´ **–°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û:**
‚Ä¢ –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ (–≤ –ª—é–±–æ–º –≤–∏–¥–µ)
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å email –∞–¥—Ä–µ—Å–∞
‚Ä¢ –î–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏/–º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã  
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã)
‚Ä¢ –ü—ã—Ç–∞—Ç—å—Å—è –æ–±–æ–π—Ç–∏ —Ñ–∏–ª—å—Ç—Ä (—Ä–∞–∑–±–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã)

‚úÖ **–î–õ–Ø –û–ë–ú–ï–ù–ê –ö–û–ù–¢–ê–ö–¢–ê–ú–ò:**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É **"üìû –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"**

‚ö†Ô∏è **–ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏:**
–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞!

**–í—ã –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?**
"""


# ========== 1. –ò–ù–ò–¶–ò–ê–¶–ò–Ø –û–¢–ö–õ–ò–ö–ê ==========

# –¢–µ—Å—Ç–æ–≤—ã–π handler —É–¥–∞–ª–µ–Ω - –æ–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª –≤—Å–µ respond_to_ad callback'–∏

# –¢–µ—Å—Ç–æ–≤—ã–π handler —É–¥–∞–ª–µ–Ω - –æ–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª –≤—Å–µ callback'–∏

# Handler –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫–ª–∏–∫–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–º
@router.callback_query(lambda c: c.data.startswith('view_response_'))
async def view_response_by_customer(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–∫–∞–∑—á–∏–∫ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –æ—Ç–∫–ª–∏–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    try:
        # view_response_{worker_id}_{abs_id}
        parts = callback.data.split('_')
        worker_id = int(parts[2])
        abs_id = int(parts[3])
        
        print(f"[CUSTOMER_VIEW] Customer {callback.from_user.id} viewing response: worker_id={worker_id}, abs_id={abs_id}")
        logger.info(f"[CUSTOMER_VIEW] Customer viewing response: worker_id={worker_id}, abs_id={abs_id}")
        
        customer = await Customer.get_customer(tg_id=callback.from_user.id)
        if not customer:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        worker = await Worker.get_worker(id=worker_id)
        if not worker:
            await callback.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        advertisement = await Abs.get_one(id=abs_id)
        if not advertisement or advertisement.customer_id != customer.id:
            await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        response = await WorkersAndAbs.get_by_worker_and_abs(worker_id=worker_id, abs_id=abs_id)
        if not response:
            await callback.answer("‚ùå –û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
        text = f"üìã **–û—Ç–∫–ª–∏–∫ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{abs_id}**\n\n"
        
        # ID –∏ –∏–º—è
        worker_name = worker.profile_name or worker.tg_name
        text += f"üë§ **ID:** {worker.public_id or f'#{worker.id}'} {worker_name}\n"
        
        # –†–µ–π—Ç–∏–Ω–≥
        if worker.count_ratings > 0:
            text += f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {worker.stars / worker.count_ratings:.1f}/5 ({worker.count_ratings} –æ—Ü–µ–Ω–æ–∫)\n"
        else:
            text += f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫\n"
        
        # –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        status_string = await get_worker_status_string(worker.id)
        text += f"üìã **–°—Ç–∞—Ç—É—Å:** {status_string}\n"
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤
        text += f"üì¶ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤:** {worker.order_count}\n"
        
        # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        text += f"üìÖ **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:** {worker.registration_data}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        if response.worker_messages:
            text += "üí¨ **–°–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:**\n"
            for msg in response.worker_messages:
                text += f"‚Ä¢ {msg}\n"
            text += "\n"
        
        if response.customer_messages:
            text += "üí¨ **–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n"
            for msg in response.customer_messages:
                text += f"‚Ä¢ {msg}\n"
            text += "\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —á–∞—Ç–∞
        contact_exchange = await ContactExchange.get_by_worker_and_abs(worker_id, abs_id)
        contact_requested = contact_exchange is not None
        contacts_purchased = contact_exchange and contact_exchange.contacts_purchased
        contacts_sent = contact_exchange and contact_exchange.contacts_sent
        
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã (–∫—É–ø–ª–µ–Ω—ã), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —á–∞—Ç –∑–∞–∫—Ä—ã—Ç
        if contacts_purchased:
            text += "\n\nüîí **–ß–∞—Ç –∑–∞–∫—Ä—ã—Ç** - –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã.\n\n"
            text += "‚ÑπÔ∏è –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."
            kbc = KeyboardCollection()
            builder = InlineKeyboardBuilder()
            builder.add(kbc._inline(button_text="‚óÄÔ∏è –ö –æ—Ç–∫–ª–∏–∫–∞–º", 
                                   callback_data=f"view_responses_{abs_id}"))
            builder.adjust(1)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
            if worker.profile_photo:
                try:
                    from aiogram.types import FSInputFile
                    await callback.message.delete()
                    await callback.message.answer_photo(
                        photo=FSInputFile(worker.profile_photo),
                        caption=text,
                        reply_markup=builder.as_markup(),
                        parse_mode='Markdown'
                    )
                except Exception:
                    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–º
                    await callback.message.edit_text(
                        text=text,
                        reply_markup=builder.as_markup(),
                        parse_mode='Markdown'
                    )
            else:
                await callback.message.edit_text(
                    text=text,
                    reply_markup=builder.as_markup(),
                    parse_mode='Markdown'
                )
        else:
            # –ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            kbc = KeyboardCollection()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
            if worker.profile_photo:
                try:
                    from aiogram.types import FSInputFile
                    await callback.message.delete()
                    await callback.message.answer_photo(
                        photo=FSInputFile(worker.profile_photo),
                        caption=text,
                        reply_markup=kbc.anonymous_chat_customer_buttons(
                            worker_id=worker_id,
                            abs_id=abs_id,
                            contact_requested=contact_requested,
                            contact_sent=contacts_sent,
                            contacts_purchased=contacts_purchased
                        ),
                        parse_mode='Markdown'
                    )
                except Exception:
                    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–º
                    await callback.message.edit_text(
                        text=text,
                        reply_markup=kbc.anonymous_chat_customer_buttons(
                            worker_id=worker_id,
                            abs_id=abs_id,
                            contact_requested=contact_requested,
                            contact_sent=contacts_sent,
                            contacts_purchased=contacts_purchased
                        ),
                        parse_mode='Markdown'
                    )
            else:
                await callback.message.edit_text(
                    text=text,
                    reply_markup=kbc.anonymous_chat_customer_buttons(
                        worker_id=worker_id,
                        abs_id=abs_id,
                        contact_requested=contacts_sent,
                        contact_sent=contacts_sent,
                        contacts_purchased=contacts_purchased
                    ),
                    parse_mode='Markdown'
                )
        
        await state.update_data(current_chat_abs_id=abs_id, current_chat_worker_id=worker_id)
        await state.set_state(CustomerStates.customer_anonymous_chat)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in view_response_by_customer: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—Ç–∫–ª–∏–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith('reject_customer_response_'))
async def reject_customer_response_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–º"""
    try:
        # reject_customer_response_{worker_id}_{abs_id}
        parts = callback.data.split('_')
        worker_id = int(parts[3])
        abs_id = int(parts[4])
        
        customer = await Customer.get_customer(tg_id=callback.from_user.id)
        if not customer:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        worker = await Worker.get_worker(id=worker_id)
        if not worker:
            await callback.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        advertisement = await Abs.get_one(id=abs_id)
        if not advertisement or advertisement.customer_id != customer.id:
            await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∫–ª–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        response = await WorkersAndAbs.get_by_worker_and_abs(worker_id=worker_id, abs_id=abs_id)
        if not response:
            await callback.answer("‚ùå –û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã –µ—â–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        contact_exchange = await ContactExchange.get_by_worker_and_abs(worker_id, abs_id)
        if contact_exchange and contact_exchange.contacts_sent:
            await callback.answer("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_text = f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞**\n\n"
        confirmation_text += f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{abs_id}?\n\n"
        confirmation_text += f"**–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:**\n"
        confirmation_text += f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏\n"
        confirmation_text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ù–ï –∏–∑–º–µ–Ω–∏—Ç—Å—è\n"
        confirmation_text += f"‚úÖ –û—Ç–∫–ª–∏–∫ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞\n\n"
        confirmation_text += f"–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª, –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã."
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        from app.keyboards import KeyboardCollection
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        
        kbc = KeyboardCollection()
        builder = InlineKeyboardBuilder()
        
        builder.add(kbc._inline("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", f"confirm_reject_customer_response_{worker_id}_{abs_id}"))
        builder.add(kbc._inline("‚ùå –û—Ç–º–µ–Ω–∞", f"view_response_{worker_id}_{abs_id}"))
        builder.adjust(1)
        
        await safe_edit_or_send(
            callback=callback,
            text=confirmation_text,
            reply_markup=builder.as_markup(),
            parse_mode='Markdown'
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in reject_customer_response_confirm: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith('confirm_reject_customer_response_'))
async def confirm_reject_customer_response(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–º (–ù–ï –≤–ª–∏—è–µ—Ç –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)"""
    try:
        # confirm_reject_customer_response_{worker_id}_{abs_id}
        parts = callback.data.split('_')
        worker_id = int(parts[4])
        abs_id = int(parts[5])
        
        customer = await Customer.get_customer(tg_id=callback.from_user.id)
        if not customer:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        worker = await Worker.get_worker(id=worker_id)
        if not worker:
            await callback.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        advertisement = await Abs.get_one(id=abs_id)
        if not advertisement or advertisement.customer_id != customer.id:
            await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∫–ª–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        response = await WorkersAndAbs.get_by_worker_and_abs(worker_id=worker_id, abs_id=abs_id)
        if not response:
            await callback.answer("‚ùå –û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã –µ—â–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        contact_exchange = await ContactExchange.get_by_worker_and_abs(worker_id, abs_id)
        if contact_exchange and contact_exchange.contacts_sent:
            await callback.answer("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", show_alert=True)
            return
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª–∏–∫
        await response.delete()
        
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if contact_exchange:
            await contact_exchange.delete()
        
        # –í–ê–ñ–ù–û: –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ worker_response_cancellations
        # –ù–ï —Å–Ω–∏–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        # –≠—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–æ–º, –Ω–µ –æ—Ç–º–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        from loaders import bot
        try:
            await bot.send_message(
                chat_id=worker.tg_id,
                text=f"üì® –ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –æ—Ç–∫–ª–∏–∫ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{abs_id}\n\n"
                     f"–≠—Ç–æ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å."
            )
        except Exception as e:
            logger.error(f"Error sending rejection notification to worker {worker.tg_id}: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç–∫–ª–∏–∫–æ–≤
        kbc = KeyboardCollection()
        await callback.message.edit_text(
            text="‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω\n\n–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ —Å–ø–∏—Å–∫—É –æ—Ç–∫–ª–∏–∫–æ–≤",
            reply_markup=kbc.menu_btn()
        )
        await state.set_state(CustomerStates.customer_menu)
        
    except Exception as e:
        logger.error(f"Error in reject_customer_response: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(lambda c: c.data.startswith('reply_in_chat_'))
async def reply_in_chat(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–∫–∞–∑—á–∏–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤ —á–∞—Ç–µ"""
    try:
        # reply_in_chat_{worker_id}_{abs_id}
        parts = callback.data.split('_')
        worker_id = int(parts[3])
        abs_id = int(parts[4])
        
        print(f"[REPLY_CHAT] Customer {callback.from_user.id} wants to reply in chat")
        logger.info(f"[REPLY_CHAT] Customer wants to reply in chat")
        
        customer = await Customer.get_customer(tg_id=callback.from_user.id)
        worker = await Worker.get_worker(id=worker_id)
        
        if not customer or not worker:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã—Ç –ª–∏ —á–∞—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫—É–ø–ª–µ–Ω—ã)
        response = await WorkersAndAbs.get_by_worker_and_abs(worker_id, abs_id)
        if not response:
            await callback.answer("‚ùå –û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        contact_exchange = await ContactExchange.get_by_worker_and_abs(worker_id, abs_id)
        print(f"[DEBUG] contact_exchange: {contact_exchange}")
        if contact_exchange:
            print(f"[DEBUG] contacts_purchased: {contact_exchange.contacts_purchased}")
            if contact_exchange.contacts_purchased:
                await callback.answer("‚ùå –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç - –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã", show_alert=True)
                return
        else:
            print(f"[DEBUG] No contact_exchange record found - chat is open")
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞
        await state.update_data(current_chat_abs_id=abs_id, current_chat_worker_id=worker_id)
        await state.set_state(CustomerStates.customer_anonymous_chat)
        
        text = f"üí¨ **–ß–∞—Ç —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º**\n\n"
        text += f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n"
        text += f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {worker.public_id or f'ID#{worker.id}'}\n\n"
        text += f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é:"
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ç–æ)
        await safe_edit_or_send(
            callback=callback,
            text=text,
            parse_mode='Markdown'
        )
        
        await callback.answer("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é")
        
    except Exception as e:
        logger.error(f"Error in reply_in_chat: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –°—Ç–∞—Ä—ã–π handler –¥–ª—è apply-it-first_ —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ respond_to_ad_
@router.callback_query(lambda c: c.data.startswith('respond_to_ad_'))
async def initiate_response(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è'"""
    print(f"[RESPONSE] MAIN HANDLER TRIGGERED! Data: {callback.data}")
    logger.info(f"[RESPONSE] MAIN HANDLER TRIGGERED! Data: {callback.data}")
    current_state = await state.get_state()
    logger.info(f"[RESPONSE] Current state: {current_state}")
    try:
        abs_id = int(callback.data.split('_')[3])
        logger.info(f"[RESPONSE] Parsed abs_id: {abs_id}")
        worker = await Worker.get_worker(tg_id=callback.from_user.id)
        
        if not worker:
            await callback.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è –ª–∏ —É–∂–µ
        existing_response = await WorkersAndAbs.get_by_abs(abs_id=abs_id)
        if existing_response:
            for response in existing_response:
                if response.worker_id == worker.id:
                    await callback.answer("‚ùå –í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", show_alert=True)
                    return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞
        kbc = KeyboardCollection()
        await state.update_data(pending_response_abs_id=abs_id)
        await state.set_state(WorkStates.worker_response_chat_rules)
        
        await callback.message.edit_text(
            text=CHAT_RULES_TEXT,
            reply_markup=kbc.chat_rules_confirmation(),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in initiate_response: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "confirm_chat_rules", StateFilter(WorkStates.worker_response_chat_rules))
async def confirm_rules(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞"""
    try:
        data = await state.get_data()
        abs_id = data.get('pending_response_abs_id')
        
        kbc = KeyboardCollection()
        await callback.message.edit_text(
            text="üìù **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–∫–ª–∏–∫–∞:**\n\n"
                 "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è\n"
                 "‚Ä¢ –ò–ª–∏ –æ—Ç–∫–ª–∏–∫–Ω–∏—Ç–µ—Å—å –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è",
            reply_markup=kbc.response_type_choice(abs_id=abs_id),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in confirm_rules: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "cancel_response")
async def cancel_response(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ—Ç–∫–ª–∏–∫–∞"""
    kbc = KeyboardCollection()
    await state.set_state(WorkStates.worker_menu)
    await callback.message.edit_text(
        text="‚ùå –û—Ç–∫–ª–∏–∫ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=kbc.menu()
    )


# ========== 2. –û–¢–ö–õ–ò–ö –ë–ï–ó –¢–ï–ö–°–¢–ê ==========

@router.callback_query(lambda c: c.data.startswith('response_without_text_'))
async def response_without_text(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫–ª–∏–∫ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        abs_id = int(callback.data.split('_')[3])
        worker = await Worker.get_worker(tg_id=callback.from_user.id)
        
        if not worker:
            await callback.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        advertisement = await Abs.get_one(id=abs_id)
        
        if not advertisement:
            await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        from app.data.database.models import WorkerDailyResponses
        from datetime import date
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–ª–µ activity_level
        if not hasattr(worker, 'activity_level') or worker.activity_level is None:
            worker.activity_level = 100  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        today = date.today().isoformat()
        responses_today = await WorkerDailyResponses.get_responses_count(worker.id, today)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞ —Å fallback
        if not hasattr(worker, 'can_make_response'):
            # Fallback –ª–æ–≥–∏–∫–∞
            if worker.activity_level >= 74:
                can_respond = True
            elif worker.activity_level >= 48:
                can_respond = responses_today < 3
            elif worker.activity_level >= 9:
                can_respond = responses_today < 1
            else:
                can_respond = False
        else:
            can_respond = worker.can_make_response(responses_today)
        
        if not can_respond:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å fallback
            if not hasattr(worker, 'get_responses_limit_per_day'):
                if worker.activity_level >= 74:
                    limit = -1
                elif worker.activity_level >= 48:
                    limit = 3
                elif worker.activity_level >= 9:
                    limit = 1
                else:
                    limit = 0
            else:
                limit = worker.get_responses_limit_per_day()
            
            if not hasattr(worker, 'get_activity_zone'):
                if worker.activity_level >= 74:
                    zone_emoji, zone_message = "üü¢", "–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –¥–æ—Å—Ç—É–ø –ø–æ–ª–Ω—ã–π"
                elif worker.activity_level >= 48:
                    zone_emoji, zone_message = "üü°", "–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç—Å—è, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –º–æ–∂–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 3 –∑–∞–∫–∞–∑–∞ –≤ –¥–µ–Ω—å"
                elif worker.activity_level >= 9:
                    zone_emoji, zone_message = "üü†", "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –º–æ–∂–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 1 –∑–∞–∫–∞–∑ –≤ –¥–µ–Ω—å"
                else:
                    zone_emoji, zone_message = "üî¥", "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤: –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!"
            else:
                zone_emoji, zone_message = worker.get_activity_zone()
            
            kbc = KeyboardCollection()
            if limit == 0:
                error_text = f"{zone_emoji} {zone_message}"
            else:
                error_text = f"{zone_emoji} {zone_message}\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –æ—Ç–∫–ª–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {responses_today}/{limit}"
            
            await state.set_state(WorkStates.worker_menu)
            await callback.message.edit_text(
                text=error_text,
                reply_markup=kbc.menu()
            )
            return
        
        customer = await Customer.get_customer(id=advertisement.customer_id)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫–ª–∏–∫–æ–≤ –∑–∞ –¥–µ–Ω—å
        await WorkerDailyResponses.increment_responses_count(worker.id, today)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª–∏–∫ –≤ –ë–î
        worker_and_abs = WorkersAndAbs(
            worker_id=worker.id,
            abs_id=abs_id
        )
        await worker_and_abs.save()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await worker_and_abs.update(
            worker_messages=["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"],
            applyed=True
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        notification_text = f"üì® **–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!**\n\n"
        notification_text += f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n\n"
        
        # ID –∏ –∏–º—è
        worker_name = worker.profile_name or worker.tg_name
        notification_text += f"üë§ **ID:** {worker.public_id or f'#{worker.id}'} {worker_name}\n"
        
        # –†–µ–π—Ç–∏–Ω–≥
        if worker.count_ratings > 0:
            notification_text += f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {worker.stars / worker.count_ratings:.1f}/5 ({worker.count_ratings} –æ—Ü–µ–Ω–æ–∫)\n"
        else:
            notification_text += f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫\n"
        
        # –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
        status_string = await get_worker_status_string(worker.id)
        notification_text += f"üìã **–°—Ç–∞—Ç—É—Å:** {status_string}\n"
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤
        notification_text += f"üì¶ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤:** {worker.order_count}\n"
        
        # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        notification_text += f"üìÖ **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:** {worker.registration_data}\n\n"
        
        notification_text += "üí¨ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        kbc = KeyboardCollection()
        await send_with_worker_photo(
            chat_id=customer.tg_id,
            worker=worker,
            text=notification_text,
            reply_markup=kbc.anonymous_chat_customer_buttons(
                worker_id=worker.id,
                abs_id=abs_id,
                contact_requested=False,
                contact_sent=False,
                contacts_purchased=False
            ),
            parse_mode='Markdown'
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        kbc = KeyboardCollection()
        await state.set_state(WorkStates.worker_menu)
        await callback.message.edit_text(
            text="‚úÖ **–í–∞—à –æ—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n"
                 "–ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–º –æ—Ç–∫–ª–∏–∫–µ.\n"
                 "–ö–æ–≥–¥–∞ –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
            reply_markup=kbc.menu(),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in response_without_text: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞", show_alert=True)


# ========== 3. –û–¢–ö–õ–ò–ö –° –¢–ï–ö–°–¢–û–ú ==========

@router.callback_query(lambda c: c.data.startswith('response_with_text_'))
async def response_with_text_prompt(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞"""
    try:
        abs_id = int(callback.data.split('_')[3])
        
        await state.update_data(response_abs_id=abs_id)
        await state.set_state(WorkStates.worker_response_write_text)
        
        await callback.message.edit_text(
            text="‚úçÔ∏è **–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É:**\n\n"
                 "‚ö†Ô∏è –ü–æ–º–Ω–∏—Ç–µ –æ –ø—Ä–∞–≤–∏–ª–∞—Ö —á–∞—Ç–∞!\n"
                 "üö´ –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞–ø—Ä—è–º—É—é",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in response_with_text_prompt: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(F.text, StateFilter(WorkStates.worker_response_write_text))
async def process_response_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã —á–µ—Ä–µ–∑ —É—Å–∏–ª–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        is_valid, error_message = check_message_for_contacts(message.text)
        
        if not is_valid:
            kbc = KeyboardCollection()
            await message.answer(
                text=f"üö´ **–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!**\n\n{error_message}\n\n"
                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–∫–ª–∏–∫–Ω–∏—Ç–µ—Å—å –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.",
                reply_markup=kbc.menu(),
                parse_mode='Markdown'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message.text) > 500:
            await message.answer(
                text="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                     f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤"
            )
            return
        
        data = await state.get_data()
        abs_id = data.get('response_abs_id')
        
        worker = await Worker.get_worker(tg_id=message.from_user.id)
        
        if not worker:
            await message.answer("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        advertisement = await Abs.get_one(id=abs_id)
        
        if not advertisement:
            await message.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        from app.data.database.models import WorkerDailyResponses
        from datetime import date
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–ª–µ activity_level
        if not hasattr(worker, 'activity_level') or worker.activity_level is None:
            worker.activity_level = 100  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        today = date.today().isoformat()
        responses_today = await WorkerDailyResponses.get_responses_count(worker.id, today)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞ —Å fallback
        if not hasattr(worker, 'can_make_response'):
            # Fallback –ª–æ–≥–∏–∫–∞
            if worker.activity_level >= 74:
                can_respond = True
            elif worker.activity_level >= 48:
                can_respond = responses_today < 3
            elif worker.activity_level >= 9:
                can_respond = responses_today < 1
            else:
                can_respond = False
        else:
            can_respond = worker.can_make_response(responses_today)
        
        if not can_respond:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å fallback
            if not hasattr(worker, 'get_responses_limit_per_day'):
                if worker.activity_level >= 74:
                    limit = -1
                elif worker.activity_level >= 48:
                    limit = 3
                elif worker.activity_level >= 9:
                    limit = 1
                else:
                    limit = 0
            else:
                limit = worker.get_responses_limit_per_day()
            
            if not hasattr(worker, 'get_activity_zone'):
                if worker.activity_level >= 74:
                    zone_emoji, zone_message = "üü¢", "–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –¥–æ—Å—Ç—É–ø –ø–æ–ª–Ω—ã–π"
                elif worker.activity_level >= 48:
                    zone_emoji, zone_message = "üü°", "–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç—Å—è, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –º–æ–∂–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 3 –∑–∞–∫–∞–∑–∞ –≤ –¥–µ–Ω—å"
                elif worker.activity_level >= 9:
                    zone_emoji, zone_message = "üü†", "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –º–æ–∂–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 1 –∑–∞–∫–∞–∑ –≤ –¥–µ–Ω—å"
                else:
                    zone_emoji, zone_message = "üî¥", "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤: –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!"
            else:
                zone_emoji, zone_message = worker.get_activity_zone()
            
            kbc = KeyboardCollection()
            if limit == 0:
                error_text = f"{zone_emoji} {zone_message}"
            else:
                error_text = f"{zone_emoji} {zone_message}\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –æ—Ç–∫–ª–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {responses_today}/{limit}"
            
            await state.set_state(WorkStates.worker_menu)
            await message.answer(
                text=error_text,
                reply_markup=kbc.menu()
            )
            return
        
        customer = await Customer.get_customer(id=advertisement.customer_id)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫–ª–∏–∫–æ–≤ –∑–∞ –¥–µ–Ω—å
        await WorkerDailyResponses.increment_responses_count(worker.id, today)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª–∏–∫ –≤ –ë–î
        worker_and_abs = WorkersAndAbs(
            worker_id=worker.id,
            abs_id=abs_id
        )
        await worker_and_abs.save()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await worker_and_abs.update(
            worker_messages=[message.text],
            applyed=True
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        notification_text = f"üì® **–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!**\n\n"
        notification_text += f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{abs_id}\n\n"
        
        # ID –∏ –∏–º—è
        worker_name = worker.profile_name or worker.tg_name
        notification_text += f"üë§ **ID:** {worker.public_id or f'#{worker.id}'} {worker_name}\n"
        
        # –†–µ–π—Ç–∏–Ω–≥
        if worker.count_ratings > 0:
            notification_text += f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {worker.stars / worker.count_ratings:.1f}/5 ({worker.count_ratings} –æ—Ü–µ–Ω–æ–∫)\n"
        else:
            notification_text += f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫\n"
        
        # –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
        status_string = await get_worker_status_string(worker.id)
        notification_text += f"üìã **–°—Ç–∞—Ç—É—Å:** {status_string}\n"
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤
        notification_text += f"üì¶ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤:** {worker.order_count}\n"
        
        # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        notification_text += f"üìÖ **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:** {worker.registration_data}\n\n"
        
        notification_text += f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n{message.text}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        kbc = KeyboardCollection()
        await send_with_worker_photo(
            chat_id=customer.tg_id,
            worker=worker,
            text=notification_text,
            reply_markup=kbc.anonymous_chat_customer_buttons(
                worker_id=worker.id,
                abs_id=abs_id,
                contact_requested=False,
                contact_sent=False,
                contacts_purchased=False
            ),
            parse_mode='Markdown'
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        kbc = KeyboardCollection()
        await state.set_state(WorkStates.worker_menu)
        await message.answer(
            text="‚úÖ **–í–∞—à –æ—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n"
                 "–ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
                 "–ö–æ–≥–¥–∞ –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
            reply_markup=kbc.menu(),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in process_response_text: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞")
        await state.clear()


# ========== 4. –û–¢–ö–õ–û–ù–ï–ù–ò–ï –ò –ñ–ê–õ–û–ë–ê ==========

@router.callback_query(lambda c: c.data.startswith('decline_ad_'))
async def decline_ad(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    try:
        abs_id = int(callback.data.split('_')[2])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ "–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å"
        from app.data.database.models import WorkerAndBadResponse
        worker = await Worker.get_worker(tg_id=callback.from_user.id)
        
        bad_response = WorkerAndBadResponse(worker_id=worker.id, abs_id=abs_id)
        await bad_response.save()
        
        kbc = KeyboardCollection()
        await state.set_state(WorkStates.worker_menu)
        await callback.message.edit_text(
            text="‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è",
            reply_markup=kbc.menu()
        )
        
    except Exception as e:
        logger.error(f"Error in decline_ad: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "back_to_ads")
async def back_to_ads(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é menu_worker
    from app.handlers.worker import menu_worker
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é
    await menu_worker(callback, state)


@router.callback_query(lambda c: c.data.startswith('report_ad_'))
async def report_ad(callback: CallbackQuery, state: FSMContext):
    """–ñ–∞–ª–æ–±–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
    try:
        abs_id = int(callback.data.split('_')[2])
        worker = await Worker.get_worker(tg_id=callback.from_user.id)
        
        from app.data.database.models import WorkerAndReport
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ —É–∂–µ –∂–∞–ª–æ–±—É
        existing_report = await WorkerAndReport.get_by_worker(worker_id=worker.id)
        if existing_report:
            for report in existing_report:
                if report.abs_id == abs_id:
                    await callback.answer("‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∂–∞–ª–æ–±—É –Ω–∞ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", show_alert=True)
                    return
        
        # –°–æ–∑–¥–∞–µ–º –∂–∞–ª–æ–±—É
        report = WorkerAndReport(worker_id=worker.id, abs_id=abs_id)
        await report.save()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        import config
        await bot.send_message(
            chat_id=config.REPORT_LOG,
            text=f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –∂–∞–ª–æ–±–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{abs_id}\n"
                 f"–û—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {worker.tg_id} ({worker.public_id})"
        )
        
        kbc = KeyboardCollection()
        await state.set_state(WorkStates.worker_menu)
        await callback.message.edit_text(
            text="‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
                 "–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=kbc.menu()
        )
        
    except Exception as e:
        logger.error(f"Error in report_ad: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

