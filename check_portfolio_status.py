#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.
"""

import os
import sqlite3
import json
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('portfolio_status.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def check_portfolio_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = 'app/data/database/database.db'
    if not os.path.exists(db_path):
        logger.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM workers")
        total_workers = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM workers WHERE portfolio_photo IS NOT NULL AND portfolio_photo != ''")
        workers_with_portfolio = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM workers WHERE portfolio_photo IS NULL")
        workers_without_portfolio = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM workers WHERE portfolio_photo = ''")
        workers_empty_portfolio = cursor.fetchone()[0]
        
        print("\n" + "="*80)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–†–¢–§–û–õ–ò–û")
        print("="*80)
        print(f"–í—Å–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {total_workers}")
        print(f"–° –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {workers_with_portfolio}")
        print(f"–ë–µ–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (NULL): {workers_without_portfolio}")
        print(f"–° –ø—É—Å—Ç—ã–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ ('') : {workers_empty_portfolio}")
        print("="*80)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
        if workers_with_portfolio > 0:
            print("\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–†–¢–§–û–õ–ò–û:")
            print("-" * 80)
            
            cursor.execute("""
                SELECT id, tg_id, tg_name, portfolio_photo 
                FROM workers 
                WHERE portfolio_photo IS NOT NULL AND portfolio_photo != ''
                ORDER BY id
            """)
            
            workers = cursor.fetchall()
            
            for worker_id, tg_id, tg_name, portfolio_json in workers:
                try:
                    portfolio_dict = json.loads(portfolio_json)
                    photo_count = len(portfolio_dict)
                    
                    print(f"ID: {worker_id} | TG: {tg_id} | –ò–º—è: {tg_name} | –§–æ—Ç–æ: {photo_count}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
                    for key, path in portfolio_dict.items():
                        file_exists = os.path.exists(path) if path else False
                        status = "‚úÖ" if file_exists else "‚ùå"
                        print(f"  {status} –ö–ª—é—á {key}: {path}")
                    
                    print()
                    
                except json.JSONDecodeError as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {tg_id}: {e}")
                    print(f"   –î–∞–Ω–Ω—ã–µ: {portfolio_json[:100]}...")
                    print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        print("\nüìÅ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í–û–ô –°–ò–°–¢–ï–ú–´:")
        print("-" * 80)
        
        photo_dir = 'app/data/photo'
        if os.path.exists(photo_dir):
            # –°—á–∏—Ç–∞–µ–º –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_folders = []
            portfolio_folders = []
            
            for item in os.listdir(photo_dir):
                item_path = os.path.join(photo_dir, item)
                if os.path.isdir(item_path) and item.isdigit():
                    user_folders.append(item)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É portfolio
                    portfolio_path = os.path.join(item_path, 'portfolio')
                    if os.path.exists(portfolio_path):
                        portfolio_folders.append(item)
                        # –°—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ portfolio
                        portfolio_files = [f for f in os.listdir(portfolio_path) if f.endswith('.jpg')]
                        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {item}: {len(portfolio_files)} —Ñ–æ—Ç–æ –≤ portfolio/")
            
            print(f"\nüìä –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:")
            print(f"  –ü–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_folders)}")
            print(f"  –ü–∞–ø–æ–∫ —Å portfolio: {len(portfolio_folders)}")
        else:
            print("‚ùå –ü–∞–ø–∫–∞ app/data/photo –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    finally:
        conn.close()

def check_specific_worker(tg_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    
    db_path = 'app/data/database/database.db'
    if not os.path.exists(db_path):
        logger.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            SELECT id, tg_id, tg_name, portfolio_photo 
            FROM workers 
            WHERE tg_id = ?
        """, (tg_id,))
        
        worker = cursor.fetchone()
        
        if not worker:
            print(f"‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å TG ID {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        worker_id, tg_id, tg_name, portfolio_json = worker
        
        print(f"\nüë§ –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨: {tg_name} (TG: {tg_id}, ID: {worker_id})")
        print("-" * 60)
        
        if portfolio_json:
            try:
                portfolio_dict = json.loads(portfolio_json)
                photo_count = len(portfolio_dict)
                
                print(f"üì∏ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {photo_count} —Ñ–æ—Ç–æ")
                
                for key, path in portfolio_dict.items():
                    file_exists = os.path.exists(path) if path else False
                    status = "‚úÖ" if file_exists else "‚ùå"
                    print(f"  {status} –ö–ª—é—á {key}: {path}")
                    
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"–î–∞–Ω–Ω—ã–µ: {portfolio_json}")
        else:
            print("üì∏ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        try:
            tg_id = int(sys.argv[1])
            check_specific_worker(tg_id)
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π TG ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        check_portfolio_status()
